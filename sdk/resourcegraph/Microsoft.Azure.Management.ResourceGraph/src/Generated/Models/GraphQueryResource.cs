// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Graph Query entity definition.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class GraphQueryResource : Resource
    {
        /// <summary>
        /// Initializes a new instance of the GraphQueryResource class.
        /// </summary>
        public GraphQueryResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GraphQueryResource class.
        /// </summary>
        /// <param name="query">KQL query that will be graph.</param>
        /// <param name="id">Azure resource Id</param>
        /// <param name="name">Azure resource name. This is GUID value. The
        /// display name should be assigned within properties field.</param>
        /// <param name="type">Azure resource type</param>
        /// <param name="eTag">This will be used to handle Optimistic
        /// Concurrency. If not present, it will always overwrite the existing
        /// resource without checking conflict.</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="timeModified">Date and time in UTC of the last
        /// modification that was made to this graph query definition.</param>
        /// <param name="description">The description of a graph query.</param>
        /// <param name="resultKind">Enum indicating a type of graph query.
        /// Possible values include: 'basic'</param>
        public GraphQueryResource(string query, string id = default(string), string name = default(string), string type = default(string), string eTag = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), System.DateTime? timeModified = default(System.DateTime?), string description = default(string), string resultKind = default(string))
            : base(id, name, type, eTag, tags)
        {
            TimeModified = timeModified;
            Description = description;
            Query = query;
            ResultKind = resultKind;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets date and time in UTC of the last modification that was made to
        /// this graph query definition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.timeModified")]
        public System.DateTime? TimeModified { get; private set; }

        /// <summary>
        /// Gets or sets the description of a graph query.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets KQL query that will be graph.
        /// </summary>
        [JsonProperty(PropertyName = "properties.query")]
        public string Query { get; set; }

        /// <summary>
        /// Gets enum indicating a type of graph query. Possible values
        /// include: 'basic'
        /// </summary>
        [JsonProperty(PropertyName = "properties.resultKind")]
        public string ResultKind { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Query == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Query");
            }
        }
    }
}
