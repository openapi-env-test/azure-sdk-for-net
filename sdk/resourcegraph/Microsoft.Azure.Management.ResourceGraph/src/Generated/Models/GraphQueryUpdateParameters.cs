// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceGraph.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The parameters that can be provided when updating workbook properties
    /// properties.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class GraphQueryUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the GraphQueryUpdateParameters class.
        /// </summary>
        public GraphQueryUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GraphQueryUpdateParameters class.
        /// </summary>
        /// <param name="tags">Resource tags</param>
        /// <param name="eTag">This will be used to handle Optimistic
        /// Concurrency. If not present, it will always overwrite the existing
        /// resource without checking conflict.</param>
        /// <param name="description">The description of a graph query.</param>
        /// <param name="query">KQL query that will be graph.</param>
        public GraphQueryUpdateParameters(IDictionary<string, string> tags = default(IDictionary<string, string>), string eTag = default(string), string description = default(string), string query = default(string))
        {
            Tags = tags;
            ETag = eTag;
            Description = description;
            Query = query;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets resource tags
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets or sets this will be used to handle Optimistic Concurrency. If
        /// not present, it will always overwrite the existing resource without
        /// checking conflict.
        /// </summary>
        [JsonProperty(PropertyName = "eTag")]
        public string ETag { get; set; }

        /// <summary>
        /// Gets or sets the description of a graph query.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets KQL query that will be graph.
        /// </summary>
        [JsonProperty(PropertyName = "properties.query")]
        public string Query { get; set; }

    }
}
