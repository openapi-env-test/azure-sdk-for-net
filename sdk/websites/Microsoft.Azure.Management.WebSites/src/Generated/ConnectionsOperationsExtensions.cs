// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ConnectionsOperations.
    /// </summary>
    public static partial class ConnectionsOperationsExtensions
    {
            /// <summary>
            /// Get Connections
            /// </summary>
            /// <remarks>
            /// Gets a list of connections.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource Group Name
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<Connection> List(this IConnectionsOperations operations, string resourceGroupName, ODataQuery<Connection> odataQuery = default(ODataQuery<Connection>))
            {
                return operations.ListAsync(resourceGroupName, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Connections
            /// </summary>
            /// <remarks>
            /// Gets a list of connections.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource Group Name
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Connection>> ListAsync(this IConnectionsOperations operations, string resourceGroupName, ODataQuery<Connection> odataQuery = default(ODataQuery<Connection>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='connectionName'>
            /// The connection name.
            /// </param>
            public static Connection Get(this IConnectionsOperations operations, string resourceGroupName, string connectionName)
            {
                return operations.GetAsync(resourceGroupName, connectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='connectionName'>
            /// The connection name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Connection> GetAsync(this IConnectionsOperations operations, string resourceGroupName, string connectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, connectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='connectionName'>
            /// The connection name.
            /// </param>
            /// <param name='connection'>
            /// The connection.
            /// </param>
            public static Connection CreateOrUpdate(this IConnectionsOperations operations, string resourceGroupName, string connectionName, Connection connection)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, connectionName, connection).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='connectionName'>
            /// The connection name.
            /// </param>
            /// <param name='connection'>
            /// The connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Connection> CreateOrUpdateAsync(this IConnectionsOperations operations, string resourceGroupName, string connectionName, Connection connection, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, connectionName, connection, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='connectionName'>
            /// The connection name.
            /// </param>
            public static void Delete(this IConnectionsOperations operations, string resourceGroupName, string connectionName)
            {
                operations.DeleteAsync(resourceGroupName, connectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='connectionName'>
            /// The connection name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IConnectionsOperations operations, string resourceGroupName, string connectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, connectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists consent links of a connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='connectionName'>
            /// The connection name.
            /// </param>
            /// <param name='content'>
            /// The content.
            /// </param>
            public static ConsentLinkPayload ListConsentLinks(this IConnectionsOperations operations, string resourceGroupName, string connectionName, ConsentLinkInput content)
            {
                return operations.ListConsentLinksAsync(resourceGroupName, connectionName, content).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists consent links of a connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='connectionName'>
            /// The connection name.
            /// </param>
            /// <param name='content'>
            /// The content.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConsentLinkPayload> ListConsentLinksAsync(this IConnectionsOperations operations, string resourceGroupName, string connectionName, ConsentLinkInput content, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConsentLinksWithHttpMessagesAsync(resourceGroupName, connectionName, content, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Confirms consent code of a connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='connectionName'>
            /// The connection name.
            /// </param>
            /// <param name='content'>
            /// The content.
            /// </param>
            public static Connection ConfirmConsentCode(this IConnectionsOperations operations, string resourceGroupName, string connectionName, ConfirmConsentCodeInput content)
            {
                return operations.ConfirmConsentCodeAsync(resourceGroupName, connectionName, content).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Confirms consent code of a connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='connectionName'>
            /// The connection name.
            /// </param>
            /// <param name='content'>
            /// The content.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Connection> ConfirmConsentCodeAsync(this IConnectionsOperations operations, string resourceGroupName, string connectionName, ConfirmConsentCodeInput content, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConfirmConsentCodeWithHttpMessagesAsync(resourceGroupName, connectionName, content, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists connection keys.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='connectionName'>
            /// The connection name.
            /// </param>
            /// <param name='content'>
            /// The content.
            /// </param>
            public static ConnectionSecrets ListConnectionKeys(this IConnectionsOperations operations, string resourceGroupName, string connectionName, ListConnectionKeysInput content)
            {
                return operations.ListConnectionKeysAsync(resourceGroupName, connectionName, content).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists connection keys.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='connectionName'>
            /// The connection name.
            /// </param>
            /// <param name='content'>
            /// The content.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionSecrets> ListConnectionKeysAsync(this IConnectionsOperations operations, string resourceGroupName, string connectionName, ListConnectionKeysInput content, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConnectionKeysWithHttpMessagesAsync(resourceGroupName, connectionName, content, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Connections
            /// </summary>
            /// <remarks>
            /// Gets a list of connections.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Connection> ListNext(this IConnectionsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Connections
            /// </summary>
            /// <remarks>
            /// Gets a list of connections.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Connection>> ListNextAsync(this IConnectionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
