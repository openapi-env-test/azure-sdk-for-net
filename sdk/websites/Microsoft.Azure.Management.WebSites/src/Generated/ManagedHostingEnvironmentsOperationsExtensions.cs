// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ManagedHostingEnvironmentsOperations.
    /// </summary>
    public static partial class ManagedHostingEnvironmentsOperationsExtensions
    {
            /// <summary>
            /// Get properties of a managed hosting environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of managed hosting environment
            /// </param>
            public static ManagedHostingEnvironment GetManagedHostingEnvironment(this IManagedHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetManagedHostingEnvironmentAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get properties of a managed hosting environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of managed hosting environment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagedHostingEnvironment> GetManagedHostingEnvironmentAsync(this IManagedHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetManagedHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a managed hosting environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of managed hosting environment
            /// </param>
            /// <param name='managedHostingEnvironmentEnvelope'>
            /// Properties of managed hosting environment
            /// </param>
            public static HostingEnvironment CreateOrUpdateManagedHostingEnvironment(this IManagedHostingEnvironmentsOperations operations, string resourceGroupName, string name, HostingEnvironment managedHostingEnvironmentEnvelope)
            {
                return operations.CreateOrUpdateManagedHostingEnvironmentAsync(resourceGroupName, name, managedHostingEnvironmentEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a managed hosting environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of managed hosting environment
            /// </param>
            /// <param name='managedHostingEnvironmentEnvelope'>
            /// Properties of managed hosting environment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostingEnvironment> CreateOrUpdateManagedHostingEnvironmentAsync(this IManagedHostingEnvironmentsOperations operations, string resourceGroupName, string name, HostingEnvironment managedHostingEnvironmentEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateManagedHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, name, managedHostingEnvironmentEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a managed hosting environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of managed hosting environment
            /// </param>
            /// <param name='forceDelete'>
            /// Delete even if the managed hosting environment contains resources
            /// </param>
            public static object DeleteManagedHostingEnvironment(this IManagedHostingEnvironmentsOperations operations, string resourceGroupName, string name, bool? forceDelete = default(bool?))
            {
                return operations.DeleteManagedHostingEnvironmentAsync(resourceGroupName, name, forceDelete).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a managed hosting environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of managed hosting environment
            /// </param>
            /// <param name='forceDelete'>
            /// Delete even if the managed hosting environment contains resources
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteManagedHostingEnvironmentAsync(this IManagedHostingEnvironmentsOperations operations, string resourceGroupName, string name, bool? forceDelete = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteManagedHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, name, forceDelete, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all managed hosting environments in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            public static IPage<HostingEnvironment> GetManagedHostingEnvironments(this IManagedHostingEnvironmentsOperations operations, string resourceGroupName)
            {
                return operations.GetManagedHostingEnvironmentsAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all managed hosting environments in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HostingEnvironment>> GetManagedHostingEnvironmentsAsync(this IManagedHostingEnvironmentsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetManagedHostingEnvironmentsWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get list of ip addresses assigned to a managed hosting environment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of managed hosting environment
            /// </param>
            public static AddressResponse GetManagedHostingEnvironmentVips(this IManagedHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetManagedHostingEnvironmentVipsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get list of ip addresses assigned to a managed hosting environment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of managed hosting environment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddressResponse> GetManagedHostingEnvironmentVipsAsync(this IManagedHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetManagedHostingEnvironmentVipsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get status of an operation on a managed hosting environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of managed hosting environment
            /// </param>
            /// <param name='operationId'>
            /// operation identifier GUID
            /// </param>
            public static object GetManagedHostingEnvironmentOperation(this IManagedHostingEnvironmentsOperations operations, string resourceGroupName, string name, string operationId)
            {
                return operations.GetManagedHostingEnvironmentOperationAsync(resourceGroupName, name, operationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get status of an operation on a managed hosting environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of managed hosting environment
            /// </param>
            /// <param name='operationId'>
            /// operation identifier GUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetManagedHostingEnvironmentOperationAsync(this IManagedHostingEnvironmentsOperations operations, string resourceGroupName, string name, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetManagedHostingEnvironmentOperationWithHttpMessagesAsync(resourceGroupName, name, operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all sites on the managed hosting environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of managed hosting environment
            /// </param>
            /// <param name='propertiesToInclude'>
            /// Comma separated list of site properties to include
            /// </param>
            public static IPage<Site> GetManagedHostingEnvironmentSites(this IManagedHostingEnvironmentsOperations operations, string resourceGroupName, string name, string propertiesToInclude = default(string))
            {
                return operations.GetManagedHostingEnvironmentSitesAsync(resourceGroupName, name, propertiesToInclude).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all sites on the managed hosting environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of managed hosting environment
            /// </param>
            /// <param name='propertiesToInclude'>
            /// Comma separated list of site properties to include
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> GetManagedHostingEnvironmentSitesAsync(this IManagedHostingEnvironmentsOperations operations, string resourceGroupName, string name, string propertiesToInclude = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetManagedHostingEnvironmentSitesWithHttpMessagesAsync(resourceGroupName, name, propertiesToInclude, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all serverfarms (App Service Plans) on the managed hosting environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of managed hosting environment
            /// </param>
            public static IPage<ServerFarmWithRichSku> GetManagedHostingEnvironmentWebHostingPlans(this IManagedHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetManagedHostingEnvironmentWebHostingPlansAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all serverfarms (App Service Plans) on the managed hosting environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of managed hosting environment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ServerFarmWithRichSku>> GetManagedHostingEnvironmentWebHostingPlansAsync(this IManagedHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetManagedHostingEnvironmentWebHostingPlansWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all serverfarms (App Service Plans) on the managed hosting environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of managed hosting environment
            /// </param>
            public static IPage<ServerFarmWithRichSku> GetManagedHostingEnvironmentServerFarms(this IManagedHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetManagedHostingEnvironmentServerFarmsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all serverfarms (App Service Plans) on the managed hosting environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of managed hosting environment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ServerFarmWithRichSku>> GetManagedHostingEnvironmentServerFarmsAsync(this IManagedHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetManagedHostingEnvironmentServerFarmsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a managed hosting environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of managed hosting environment
            /// </param>
            /// <param name='managedHostingEnvironmentEnvelope'>
            /// Properties of managed hosting environment
            /// </param>
            public static HostingEnvironment BeginCreateOrUpdateManagedHostingEnvironment(this IManagedHostingEnvironmentsOperations operations, string resourceGroupName, string name, HostingEnvironment managedHostingEnvironmentEnvelope)
            {
                return operations.BeginCreateOrUpdateManagedHostingEnvironmentAsync(resourceGroupName, name, managedHostingEnvironmentEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a managed hosting environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of managed hosting environment
            /// </param>
            /// <param name='managedHostingEnvironmentEnvelope'>
            /// Properties of managed hosting environment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostingEnvironment> BeginCreateOrUpdateManagedHostingEnvironmentAsync(this IManagedHostingEnvironmentsOperations operations, string resourceGroupName, string name, HostingEnvironment managedHostingEnvironmentEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateManagedHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, name, managedHostingEnvironmentEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a managed hosting environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of managed hosting environment
            /// </param>
            /// <param name='forceDelete'>
            /// Delete even if the managed hosting environment contains resources
            /// </param>
            public static object BeginDeleteManagedHostingEnvironment(this IManagedHostingEnvironmentsOperations operations, string resourceGroupName, string name, bool? forceDelete = default(bool?))
            {
                return operations.BeginDeleteManagedHostingEnvironmentAsync(resourceGroupName, name, forceDelete).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a managed hosting environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of managed hosting environment
            /// </param>
            /// <param name='forceDelete'>
            /// Delete even if the managed hosting environment contains resources
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BeginDeleteManagedHostingEnvironmentAsync(this IManagedHostingEnvironmentsOperations operations, string resourceGroupName, string name, bool? forceDelete = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteManagedHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, name, forceDelete, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all managed hosting environments in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<HostingEnvironment> GetManagedHostingEnvironmentsNext(this IManagedHostingEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.GetManagedHostingEnvironmentsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all managed hosting environments in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HostingEnvironment>> GetManagedHostingEnvironmentsNextAsync(this IManagedHostingEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetManagedHostingEnvironmentsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all sites on the managed hosting environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Site> GetManagedHostingEnvironmentSitesNext(this IManagedHostingEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.GetManagedHostingEnvironmentSitesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all sites on the managed hosting environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> GetManagedHostingEnvironmentSitesNextAsync(this IManagedHostingEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetManagedHostingEnvironmentSitesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all serverfarms (App Service Plans) on the managed hosting environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ServerFarmWithRichSku> GetManagedHostingEnvironmentWebHostingPlansNext(this IManagedHostingEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.GetManagedHostingEnvironmentWebHostingPlansNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all serverfarms (App Service Plans) on the managed hosting environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ServerFarmWithRichSku>> GetManagedHostingEnvironmentWebHostingPlansNextAsync(this IManagedHostingEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetManagedHostingEnvironmentWebHostingPlansNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all serverfarms (App Service Plans) on the managed hosting environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ServerFarmWithRichSku> GetManagedHostingEnvironmentServerFarmsNext(this IManagedHostingEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.GetManagedHostingEnvironmentServerFarmsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all serverfarms (App Service Plans) on the managed hosting environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ServerFarmWithRichSku>> GetManagedHostingEnvironmentServerFarmsNextAsync(this IManagedHostingEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetManagedHostingEnvironmentServerFarmsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
