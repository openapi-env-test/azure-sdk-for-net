// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for GlobalModelOperations.
    /// </summary>
    public static partial class GlobalModelOperationsExtensions
    {
            /// <summary>
            /// Gets publishing credentials for the subscription owner
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static User GetSubscriptionPublishingCredentials(this IGlobalModelOperations operations)
            {
                return operations.GetSubscriptionPublishingCredentialsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets publishing credentials for the subscription owner
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> GetSubscriptionPublishingCredentialsAsync(this IGlobalModelOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionPublishingCredentialsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates publishing credentials for the subscription owner
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestMessage'>
            /// requestMessage with new publishing credentials
            /// </param>
            public static User UpdateSubscriptionPublishingCredentials(this IGlobalModelOperations operations, User requestMessage)
            {
                return operations.UpdateSubscriptionPublishingCredentialsAsync(requestMessage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates publishing credentials for the subscription owner
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestMessage'>
            /// requestMessage with new publishing credentials
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> UpdateSubscriptionPublishingCredentialsAsync(this IGlobalModelOperations operations, User requestMessage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSubscriptionPublishingCredentialsWithHttpMessagesAsync(requestMessage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets list of available geo regions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sku'>
            /// Filter only to regions that support this sku
            /// </param>
            /// <param name='linuxWorkersEnabled'>
            /// Filter only to regions that support linux workers
            /// </param>
            public static IPage<GeoRegion> GetSubscriptionGeoRegions(this IGlobalModelOperations operations, string sku = default(string), bool? linuxWorkersEnabled = default(bool?))
            {
                return operations.GetSubscriptionGeoRegionsAsync(sku, linuxWorkersEnabled).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets list of available geo regions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sku'>
            /// Filter only to regions that support this sku
            /// </param>
            /// <param name='linuxWorkersEnabled'>
            /// Filter only to regions that support linux workers
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<GeoRegion>> GetSubscriptionGeoRegionsAsync(this IGlobalModelOperations operations, string sku = default(string), bool? linuxWorkersEnabled = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionGeoRegionsWithHttpMessagesAsync(sku, linuxWorkersEnabled, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all certificates for a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<Certificate> GetAllCertificates(this IGlobalModelOperations operations)
            {
                return operations.GetAllCertificatesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all certificates for a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Certificate>> GetAllCertificatesAsync(this IGlobalModelOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllCertificatesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all App Service Plans for a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='detailed'>
            /// False to return a subset of App Service Plan properties, true to return all
            /// of the properties.
            /// Retrieval of all properties may increase the API latency.
            /// </param>
            public static IPage<ServerFarmWithRichSku> GetAllServerFarms(this IGlobalModelOperations operations, bool? detailed = default(bool?))
            {
                return operations.GetAllServerFarmsAsync(detailed).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all App Service Plans for a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='detailed'>
            /// False to return a subset of App Service Plan properties, true to return all
            /// of the properties.
            /// Retrieval of all properties may increase the API latency.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ServerFarmWithRichSku>> GetAllServerFarmsAsync(this IGlobalModelOperations operations, bool? detailed = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllServerFarmsWithHttpMessagesAsync(detailed, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all Web Apps for a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<Site> GetAllSites(this IGlobalModelOperations operations)
            {
                return operations.GetAllSitesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all Web Apps for a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> GetAllSitesAsync(this IGlobalModelOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllSitesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all hostingEnvironments (App Service Environment) for a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<HostingEnvironment> GetAllHostingEnvironments(this IGlobalModelOperations operations)
            {
                return operations.GetAllHostingEnvironmentsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all hostingEnvironments (App Service Environment) for a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HostingEnvironment>> GetAllHostingEnvironmentsAsync(this IGlobalModelOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllHostingEnvironmentsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all managed hosting environments for a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<ManagedHostingEnvironment> GetAllManagedHostingEnvironments(this IGlobalModelOperations operations)
            {
                return operations.GetAllManagedHostingEnvironmentsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all managed hosting environments for a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ManagedHostingEnvironment>> GetAllManagedHostingEnvironmentsAsync(this IGlobalModelOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllManagedHostingEnvironmentsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all mobile services for a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<ClassicMobileService> GetAllClassicMobileServices(this IGlobalModelOperations operations)
            {
                return operations.GetAllClassicMobileServicesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all mobile services for a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ClassicMobileService>> GetAllClassicMobileServicesAsync(this IGlobalModelOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllClassicMobileServicesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List premier add on offers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object ListPremierAddOnOffers(this IGlobalModelOperations operations)
            {
                return operations.ListPremierAddOnOffersAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List premier add on offers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ListPremierAddOnOffersAsync(this IGlobalModelOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPremierAddOnOffersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Whether hosting environment name is available
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Hosting environment name
            /// </param>
            public static object IsHostingEnvironmentNameAvailable(this IGlobalModelOperations operations, string name)
            {
                return operations.IsHostingEnvironmentNameAvailableAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Whether hosting environment name is available
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Hosting environment name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsHostingEnvironmentNameAvailableAsync(this IGlobalModelOperations operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsHostingEnvironmentNameAvailableWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Whether hosting environment name is available
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Hosting environment name
            /// </param>
            public static object IsHostingEnvironmentWithLegacyNameAvailable(this IGlobalModelOperations operations, string name)
            {
                return operations.IsHostingEnvironmentWithLegacyNameAvailableAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Whether hosting environment name is available
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Hosting environment name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsHostingEnvironmentWithLegacyNameAvailableAsync(this IGlobalModelOperations operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsHostingEnvironmentWithLegacyNameAvailableWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check if resource name is available
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Name availability request
            /// </param>
            public static ResourceNameAvailability CheckNameAvailability(this IGlobalModelOperations operations, ResourceNameAvailabilityRequest request)
            {
                return operations.CheckNameAvailabilityAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if resource name is available
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Name availability request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceNameAvailability> CheckNameAvailabilityAsync(this IGlobalModelOperations operations, ResourceNameAvailabilityRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckNameAvailabilityWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets list of available geo regions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<GeoRegion> GetSubscriptionGeoRegionsNext(this IGlobalModelOperations operations, string nextPageLink)
            {
                return operations.GetSubscriptionGeoRegionsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets list of available geo regions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<GeoRegion>> GetSubscriptionGeoRegionsNextAsync(this IGlobalModelOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionGeoRegionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all certificates for a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Certificate> GetAllCertificatesNext(this IGlobalModelOperations operations, string nextPageLink)
            {
                return operations.GetAllCertificatesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all certificates for a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Certificate>> GetAllCertificatesNextAsync(this IGlobalModelOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllCertificatesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all App Service Plans for a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ServerFarmWithRichSku> GetAllServerFarmsNext(this IGlobalModelOperations operations, string nextPageLink)
            {
                return operations.GetAllServerFarmsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all App Service Plans for a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ServerFarmWithRichSku>> GetAllServerFarmsNextAsync(this IGlobalModelOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllServerFarmsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all Web Apps for a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Site> GetAllSitesNext(this IGlobalModelOperations operations, string nextPageLink)
            {
                return operations.GetAllSitesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all Web Apps for a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> GetAllSitesNextAsync(this IGlobalModelOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllSitesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all hostingEnvironments (App Service Environment) for a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<HostingEnvironment> GetAllHostingEnvironmentsNext(this IGlobalModelOperations operations, string nextPageLink)
            {
                return operations.GetAllHostingEnvironmentsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all hostingEnvironments (App Service Environment) for a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HostingEnvironment>> GetAllHostingEnvironmentsNextAsync(this IGlobalModelOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllHostingEnvironmentsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all managed hosting environments for a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ManagedHostingEnvironment> GetAllManagedHostingEnvironmentsNext(this IGlobalModelOperations operations, string nextPageLink)
            {
                return operations.GetAllManagedHostingEnvironmentsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all managed hosting environments for a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ManagedHostingEnvironment>> GetAllManagedHostingEnvironmentsNextAsync(this IGlobalModelOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllManagedHostingEnvironmentsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all mobile services for a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ClassicMobileService> GetAllClassicMobileServicesNext(this IGlobalModelOperations operations, string nextPageLink)
            {
                return operations.GetAllClassicMobileServicesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all mobile services for a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ClassicMobileService>> GetAllClassicMobileServicesNextAsync(this IGlobalModelOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllClassicMobileServicesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
