// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ServerFarmsOperations.
    /// </summary>
    public static partial class ServerFarmsOperationsExtensions
    {
            /// <summary>
            /// Gets collection of App Service Plans in a resource group for a given
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            public static IPage<ServerFarmWithRichSku> GetServerFarms(this IServerFarmsOperations operations, string resourceGroupName)
            {
                return operations.GetServerFarmsAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets collection of App Service Plans in a resource group for a given
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ServerFarmWithRichSku>> GetServerFarmsAsync(this IServerFarmsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetServerFarmsWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets specified App Service Plan in a resource group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            public static ServerFarmWithRichSku GetServerFarm(this IServerFarmsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetServerFarmAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets specified App Service Plan in a resource group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerFarmWithRichSku> GetServerFarmAsync(this IServerFarmsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetServerFarmWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an App Service Plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='serverFarmEnvelope'>
            /// Details of App Service Plan
            /// </param>
            /// <param name='allowPendingState'>
            /// OBSOLETE: If true, allow pending state for App Service Plan
            /// </param>
            public static ServerFarmWithRichSku CreateOrUpdateServerFarm(this IServerFarmsOperations operations, string resourceGroupName, string name, ServerFarmWithRichSku serverFarmEnvelope, bool? allowPendingState = default(bool?))
            {
                return operations.CreateOrUpdateServerFarmAsync(resourceGroupName, name, serverFarmEnvelope, allowPendingState).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an App Service Plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='serverFarmEnvelope'>
            /// Details of App Service Plan
            /// </param>
            /// <param name='allowPendingState'>
            /// OBSOLETE: If true, allow pending state for App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerFarmWithRichSku> CreateOrUpdateServerFarmAsync(this IServerFarmsOperations operations, string resourceGroupName, string name, ServerFarmWithRichSku serverFarmEnvelope, bool? allowPendingState = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateServerFarmWithHttpMessagesAsync(resourceGroupName, name, serverFarmEnvelope, allowPendingState, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a App Service Plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            public static object DeleteServerFarm(this IServerFarmsOperations operations, string resourceGroupName, string name)
            {
                return operations.DeleteServerFarmAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a App Service Plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteServerFarmAsync(this IServerFarmsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteServerFarmWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Queries for App Service Plan metrics
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='details'>
            /// If true, metrics are broken down per App Service Plan instance
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static IPage<ResourceMetric> GetServerFarmMetrics(this IServerFarmsOperations operations, string resourceGroupName, string name, bool? details = default(bool?), string filter = default(string))
            {
                return operations.GetServerFarmMetricsAsync(resourceGroupName, name, details, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries for App Service Plan metrics
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='details'>
            /// If true, metrics are broken down per App Service Plan instance
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> GetServerFarmMetricsAsync(this IServerFarmsOperations operations, string resourceGroupName, string name, bool? details = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetServerFarmMetricsWithHttpMessagesAsync(resourceGroupName, name, details, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of metrics that can be queried for an App Service Plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            public static IPage<MetricDefinition> GetServerFarmMetricDefintions(this IServerFarmsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetServerFarmMetricDefintionsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of metrics that can be queried for an App Service Plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MetricDefinition>> GetServerFarmMetricDefintionsAsync(this IServerFarmsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetServerFarmMetricDefintionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets list of VNets associated with App Service Plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            public static IList<VnetInfo> GetVnetsForServerFarm(this IServerFarmsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetVnetsForServerFarmAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets list of VNets associated with App Service Plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<VnetInfo>> GetVnetsForServerFarmAsync(this IServerFarmsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVnetsForServerFarmWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a vnet associated with an App Service Plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            public static VnetInfo GetVnetFromServerFarm(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName)
            {
                return operations.GetVnetFromServerFarmAsync(resourceGroupName, name, vnetName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a vnet associated with an App Service Plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfo> GetVnetFromServerFarmAsync(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVnetFromServerFarmWithHttpMessagesAsync(resourceGroupName, name, vnetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of all routes associated with a vnet, in an app service plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            public static IList<VnetRoute> GetRoutesForVnet(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName)
            {
                return operations.GetRoutesForVnetAsync(resourceGroupName, name, vnetName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of all routes associated with a vnet, in an app service plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<VnetRoute>> GetRoutesForVnetAsync(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRoutesForVnetWithHttpMessagesAsync(resourceGroupName, name, vnetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a specific route associated with a vnet, in an app service plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            public static IList<VnetRoute> GetRouteForVnet(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string routeName)
            {
                return operations.GetRouteForVnetAsync(resourceGroupName, name, vnetName, routeName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a specific route associated with a vnet, in an app service plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<VnetRoute>> GetRouteForVnetAsync(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string routeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRouteForVnetWithHttpMessagesAsync(resourceGroupName, name, vnetName, routeName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new route or updates an existing route for a vnet in an app
            /// service plan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            /// <param name='route'>
            /// The route object
            /// </param>
            public static VnetRoute CreateOrUpdateVnetRoute(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string routeName, VnetRoute route)
            {
                return operations.CreateOrUpdateVnetRouteAsync(resourceGroupName, name, vnetName, routeName, route).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new route or updates an existing route for a vnet in an app
            /// service plan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            /// <param name='route'>
            /// The route object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetRoute> CreateOrUpdateVnetRouteAsync(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string routeName, VnetRoute route, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateVnetRouteWithHttpMessagesAsync(resourceGroupName, name, vnetName, routeName, route, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing route for a vnet in an app service plan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            public static object DeleteVnetRoute(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string routeName)
            {
                return operations.DeleteVnetRouteAsync(resourceGroupName, name, vnetName, routeName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing route for a vnet in an app service plan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteVnetRouteAsync(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string routeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteVnetRouteWithHttpMessagesAsync(resourceGroupName, name, vnetName, routeName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new route or updates an existing route for a vnet in an app
            /// service plan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            /// <param name='route'>
            /// The route object
            /// </param>
            public static VnetRoute UpdateVnetRoute(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string routeName, VnetRoute route)
            {
                return operations.UpdateVnetRouteAsync(resourceGroupName, name, vnetName, routeName, route).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new route or updates an existing route for a vnet in an app
            /// service plan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            /// <param name='route'>
            /// The route object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetRoute> UpdateVnetRouteAsync(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string routeName, VnetRoute route, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVnetRouteWithHttpMessagesAsync(resourceGroupName, name, vnetName, routeName, route, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the vnet gateway.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of the virtual network
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Only the 'primary' gateway is supported.
            /// </param>
            public static VnetGateway GetServerFarmVnetGateway(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName)
            {
                return operations.GetServerFarmVnetGatewayAsync(resourceGroupName, name, vnetName, gatewayName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the vnet gateway.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of the virtual network
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Only the 'primary' gateway is supported.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetGateway> GetServerFarmVnetGatewayAsync(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetServerFarmVnetGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the vnet gateway
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group
            /// </param>
            /// <param name='name'>
            /// The name of the App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// The name of the virtual network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. Only 'primary' is supported.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The gateway entity.
            /// </param>
            public static VnetGateway UpdateServerFarmVnetGateway(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope)
            {
                return operations.UpdateServerFarmVnetGatewayAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the vnet gateway
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group
            /// </param>
            /// <param name='name'>
            /// The name of the App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// The name of the virtual network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. Only 'primary' is supported.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The gateway entity.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetGateway> UpdateServerFarmVnetGatewayAsync(this IServerFarmsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateServerFarmVnetGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets list of Apps associated with an App Service Plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='skipToken'>
            /// Skip to of web apps in a list. If specified, the resulting list will
            /// contain web apps starting from (including) the skipToken. Else, the
            /// resulting list contains web apps from the start of the list
            /// </param>
            /// <param name='filter'>
            /// Supported filter: $filter=state eq running. Returns only web apps that are
            /// currently running
            /// </param>
            /// <param name='top'>
            /// List page size. If specified, results are paged.
            /// </param>
            public static IPage<Site> GetServerFarmSites(this IServerFarmsOperations operations, string resourceGroupName, string name, string skipToken = default(string), string filter = default(string), string top = default(string))
            {
                return operations.GetServerFarmSitesAsync(resourceGroupName, name, skipToken, filter, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets list of Apps associated with an App Service Plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='skipToken'>
            /// Skip to of web apps in a list. If specified, the resulting list will
            /// contain web apps starting from (including) the skipToken. Else, the
            /// resulting list contains web apps from the start of the list
            /// </param>
            /// <param name='filter'>
            /// Supported filter: $filter=state eq running. Returns only web apps that are
            /// currently running
            /// </param>
            /// <param name='top'>
            /// List page size. If specified, results are paged.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> GetServerFarmSitesAsync(this IServerFarmsOperations operations, string resourceGroupName, string name, string skipToken = default(string), string filter = default(string), string top = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetServerFarmSitesWithHttpMessagesAsync(resourceGroupName, name, skipToken, filter, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Submit a reboot request for a worker machine in the specified server farm
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of server farm
            /// </param>
            /// <param name='workerName'>
            /// Name of worker machine, typically starts with RD
            /// </param>
            public static object RebootWorkerForServerFarm(this IServerFarmsOperations operations, string resourceGroupName, string name, string workerName)
            {
                return operations.RebootWorkerForServerFarmAsync(resourceGroupName, name, workerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Submit a reboot request for a worker machine in the specified server farm
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of server farm
            /// </param>
            /// <param name='workerName'>
            /// Name of worker machine, typically starts with RD
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RebootWorkerForServerFarmAsync(this IServerFarmsOperations operations, string resourceGroupName, string name, string workerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RebootWorkerForServerFarmWithHttpMessagesAsync(resourceGroupName, name, workerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restarts web apps in a specified App Service Plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='softRestart'>
            /// Soft restart applies the configuration settings and restarts the apps if
            /// necessary. Hard restart always restarts and reprovisions the apps
            /// </param>
            public static object RestartSitesForServerFarm(this IServerFarmsOperations operations, string resourceGroupName, string name, bool? softRestart = default(bool?))
            {
                return operations.RestartSitesForServerFarmAsync(resourceGroupName, name, softRestart).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restarts web apps in a specified App Service Plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='softRestart'>
            /// Soft restart applies the configuration settings and restarts the apps if
            /// necessary. Hard restart always restarts and reprovisions the apps
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RestartSitesForServerFarmAsync(this IServerFarmsOperations operations, string resourceGroupName, string name, bool? softRestart = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RestartSitesForServerFarmWithHttpMessagesAsync(resourceGroupName, name, softRestart, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a server farm operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of server farm
            /// </param>
            /// <param name='operationId'>
            /// Id of Server farm operation"&amp;gt;
            /// </param>
            public static ServerFarmWithRichSku GetServerFarmOperation(this IServerFarmsOperations operations, string resourceGroupName, string name, string operationId)
            {
                return operations.GetServerFarmOperationAsync(resourceGroupName, name, operationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a server farm operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of server farm
            /// </param>
            /// <param name='operationId'>
            /// Id of Server farm operation"&amp;gt;
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerFarmWithRichSku> GetServerFarmOperationAsync(this IServerFarmsOperations operations, string resourceGroupName, string name, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetServerFarmOperationWithHttpMessagesAsync(resourceGroupName, name, operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an App Service Plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='serverFarmEnvelope'>
            /// Details of App Service Plan
            /// </param>
            /// <param name='allowPendingState'>
            /// OBSOLETE: If true, allow pending state for App Service Plan
            /// </param>
            public static ServerFarmWithRichSku BeginCreateOrUpdateServerFarm(this IServerFarmsOperations operations, string resourceGroupName, string name, ServerFarmWithRichSku serverFarmEnvelope, bool? allowPendingState = default(bool?))
            {
                return operations.BeginCreateOrUpdateServerFarmAsync(resourceGroupName, name, serverFarmEnvelope, allowPendingState).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an App Service Plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='serverFarmEnvelope'>
            /// Details of App Service Plan
            /// </param>
            /// <param name='allowPendingState'>
            /// OBSOLETE: If true, allow pending state for App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerFarmWithRichSku> BeginCreateOrUpdateServerFarmAsync(this IServerFarmsOperations operations, string resourceGroupName, string name, ServerFarmWithRichSku serverFarmEnvelope, bool? allowPendingState = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateServerFarmWithHttpMessagesAsync(resourceGroupName, name, serverFarmEnvelope, allowPendingState, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets collection of App Service Plans in a resource group for a given
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ServerFarmWithRichSku> GetServerFarmsNext(this IServerFarmsOperations operations, string nextPageLink)
            {
                return operations.GetServerFarmsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets collection of App Service Plans in a resource group for a given
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ServerFarmWithRichSku>> GetServerFarmsNextAsync(this IServerFarmsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetServerFarmsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Queries for App Service Plan metrics
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ResourceMetric> GetServerFarmMetricsNext(this IServerFarmsOperations operations, string nextPageLink)
            {
                return operations.GetServerFarmMetricsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries for App Service Plan metrics
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> GetServerFarmMetricsNextAsync(this IServerFarmsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetServerFarmMetricsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of metrics that can be queried for an App Service Plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<MetricDefinition> GetServerFarmMetricDefintionsNext(this IServerFarmsOperations operations, string nextPageLink)
            {
                return operations.GetServerFarmMetricDefintionsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of metrics that can be queried for an App Service Plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MetricDefinition>> GetServerFarmMetricDefintionsNextAsync(this IServerFarmsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetServerFarmMetricDefintionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets list of Apps associated with an App Service Plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Site> GetServerFarmSitesNext(this IServerFarmsOperations operations, string nextPageLink)
            {
                return operations.GetServerFarmSitesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets list of Apps associated with an App Service Plan
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> GetServerFarmSitesNextAsync(this IServerFarmsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetServerFarmSitesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
