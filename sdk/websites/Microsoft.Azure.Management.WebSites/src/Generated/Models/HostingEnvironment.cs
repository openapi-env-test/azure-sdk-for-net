// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Description of an hostingEnvironment (App Service Environment)
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class HostingEnvironment : Resource
    {
        /// <summary>
        /// Initializes a new instance of the HostingEnvironment class.
        /// </summary>
        public HostingEnvironment()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HostingEnvironment class.
        /// </summary>
        /// <param name="location">Resource Location</param>
        /// <param name="status">Current status of the hostingEnvironment (App
        /// Service Environment). Possible values include: 'Preparing',
        /// 'Ready', 'Scaling', 'Deleting'</param>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource Name</param>
        /// <param name="kind">Kind of resource</param>
        /// <param name="type">Resource type</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="hostingEnvironmentName">Name of the hostingEnvironment
        /// (App Service Environment)</param>
        /// <param name="hostingEnvironmentLocation">Location of the
        /// hostingEnvironment (App Service Environment), e.g. "West
        /// US"</param>
        /// <param name="provisioningState">Provisioning state of the
        /// hostingEnvironment (App Service Environment). Possible values
        /// include: 'Succeeded', 'Failed', 'Canceled', 'InProgress',
        /// 'Deleting'</param>
        /// <param name="vnetName">Name of the hostingEnvironment's (App
        /// Service Environment) virtual network</param>
        /// <param name="vnetResourceGroupName">Resource group of the
        /// hostingEnvironment's (App Service Environment) virtual
        /// network</param>
        /// <param name="vnetSubnetName">Subnet of the hostingEnvironment's
        /// (App Service Environment) virtual network</param>
        /// <param name="virtualNetwork">Description of the
        /// hostingEnvironment's (App Service Environment) virtual
        /// network</param>
        /// <param name="internalLoadBalancingMode">Specifies which endpoints
        /// to serve internally in the hostingEnvironment's (App Service
        /// Environment) VNET. Possible values include: 'None', 'Web',
        /// 'Publishing'</param>
        /// <param name="multiSize">Front-end VM size, e.g. "Medium",
        /// "Large"</param>
        /// <param name="multiRoleCount">Number of front-end instances</param>
        /// <param name="workerPools">Description of worker pools with worker
        /// size ids, VM sizes, and number of workers in each pool</param>
        /// <param name="ipsslAddressCount">Number of IP SSL addresses reserved
        /// for this hostingEnvironment (App Service Environment)</param>
        /// <param name="databaseEdition">Edition of the metadata database for
        /// the hostingEnvironment (App Service Environment) e.g.
        /// "Standard"</param>
        /// <param name="databaseServiceObjective">Service objective of the
        /// metadata database for the hostingEnvironment (App Service
        /// Environment) e.g. "S0"</param>
        /// <param name="upgradeDomains">Number of upgrade domains of this
        /// hostingEnvironment (App Service Environment)</param>
        /// <param name="subscriptionId">Subscription of the hostingEnvironment
        /// (App Service Environment)</param>
        /// <param name="dnsSuffix">DNS suffix of the hostingEnvironment (App
        /// Service Environment)</param>
        /// <param name="lastAction">Last deployment action on this
        /// hostingEnvironment (App Service Environment)</param>
        /// <param name="lastActionResult">Result of the last deployment action
        /// on this hostingEnvironment (App Service Environment)</param>
        /// <param name="allowedMultiSizes">List of comma separated strings
        /// describing which VM sizes are allowed for front-ends</param>
        /// <param name="allowedWorkerSizes">List of comma separated strings
        /// describing which VM sizes are allowed for workers</param>
        /// <param name="maximumNumberOfMachines">Maximum number of VMs in this
        /// hostingEnvironment (App Service Environment)</param>
        /// <param name="vipMappings">Description of IP SSL mapping for this
        /// hostingEnvironment (App Service Environment)</param>
        /// <param name="environmentCapacities">Current total, used, and
        /// available worker capacities</param>
        /// <param name="networkAccessControlList">Access control list for
        /// controlling traffic to the hostingEnvironment (App Service
        /// Environment)</param>
        /// <param name="environmentIsHealthy">True/false indicating whether
        /// the hostingEnvironment (App Service Environment) is healthy</param>
        /// <param name="environmentStatus">Detailed message about with results
        /// of the last check of the hostingEnvironment (App Service
        /// Environment)</param>
        /// <param name="resourceGroup">Resource group of the
        /// hostingEnvironment (App Service Environment)</param>
        /// <param name="apiManagementAccountId">Api Management Account
        /// associated with this Hosting Environment</param>
        /// <param name="suspended">True/false indicating whether the
        /// hostingEnvironment is suspended. The environment can be suspended
        /// e.g. when the management endpoint is no longer available
        /// (most likely because NSG blocked the incoming traffic)</param>
        /// <param name="clusterSettings">Custom settings for changing the
        /// behavior of the hosting environment</param>
        public HostingEnvironment(string location, HostingEnvironmentStatus status, string id = default(string), string name = default(string), string kind = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string hostingEnvironmentName = default(string), string hostingEnvironmentLocation = default(string), ProvisioningState? provisioningState = default(ProvisioningState?), string vnetName = default(string), string vnetResourceGroupName = default(string), string vnetSubnetName = default(string), VirtualNetworkProfile virtualNetwork = default(VirtualNetworkProfile), InternalLoadBalancingMode? internalLoadBalancingMode = default(InternalLoadBalancingMode?), string multiSize = default(string), int? multiRoleCount = default(int?), IList<WorkerPool> workerPools = default(IList<WorkerPool>), int? ipsslAddressCount = default(int?), string databaseEdition = default(string), string databaseServiceObjective = default(string), int? upgradeDomains = default(int?), string subscriptionId = default(string), string dnsSuffix = default(string), string lastAction = default(string), string lastActionResult = default(string), string allowedMultiSizes = default(string), string allowedWorkerSizes = default(string), int? maximumNumberOfMachines = default(int?), IList<VirtualIPMapping> vipMappings = default(IList<VirtualIPMapping>), IList<StampCapacity> environmentCapacities = default(IList<StampCapacity>), IList<NetworkAccessControlEntry> networkAccessControlList = default(IList<NetworkAccessControlEntry>), bool? environmentIsHealthy = default(bool?), string environmentStatus = default(string), string resourceGroup = default(string), string apiManagementAccountId = default(string), bool? suspended = default(bool?), IList<NameValuePair> clusterSettings = default(IList<NameValuePair>))
            : base(location, id, name, kind, type, tags)
        {
            HostingEnvironmentName = hostingEnvironmentName;
            HostingEnvironmentLocation = hostingEnvironmentLocation;
            ProvisioningState = provisioningState;
            Status = status;
            VnetName = vnetName;
            VnetResourceGroupName = vnetResourceGroupName;
            VnetSubnetName = vnetSubnetName;
            VirtualNetwork = virtualNetwork;
            InternalLoadBalancingMode = internalLoadBalancingMode;
            MultiSize = multiSize;
            MultiRoleCount = multiRoleCount;
            WorkerPools = workerPools;
            IpsslAddressCount = ipsslAddressCount;
            DatabaseEdition = databaseEdition;
            DatabaseServiceObjective = databaseServiceObjective;
            UpgradeDomains = upgradeDomains;
            SubscriptionId = subscriptionId;
            DnsSuffix = dnsSuffix;
            LastAction = lastAction;
            LastActionResult = lastActionResult;
            AllowedMultiSizes = allowedMultiSizes;
            AllowedWorkerSizes = allowedWorkerSizes;
            MaximumNumberOfMachines = maximumNumberOfMachines;
            VipMappings = vipMappings;
            EnvironmentCapacities = environmentCapacities;
            NetworkAccessControlList = networkAccessControlList;
            EnvironmentIsHealthy = environmentIsHealthy;
            EnvironmentStatus = environmentStatus;
            ResourceGroup = resourceGroup;
            ApiManagementAccountId = apiManagementAccountId;
            Suspended = suspended;
            ClusterSettings = clusterSettings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the hostingEnvironment (App Service
        /// Environment)
        /// </summary>
        [JsonProperty(PropertyName = "properties.name")]
        public string HostingEnvironmentName { get; set; }

        /// <summary>
        /// Gets or sets location of the hostingEnvironment (App Service
        /// Environment), e.g. "West US"
        /// </summary>
        [JsonProperty(PropertyName = "properties.location")]
        public string HostingEnvironmentLocation { get; set; }

        /// <summary>
        /// Gets or sets provisioning state of the hostingEnvironment (App
        /// Service Environment). Possible values include: 'Succeeded',
        /// 'Failed', 'Canceled', 'InProgress', 'Deleting'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// Gets or sets current status of the hostingEnvironment (App Service
        /// Environment). Possible values include: 'Preparing', 'Ready',
        /// 'Scaling', 'Deleting'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public HostingEnvironmentStatus Status { get; set; }

        /// <summary>
        /// Gets or sets name of the hostingEnvironment's (App Service
        /// Environment) virtual network
        /// </summary>
        [JsonProperty(PropertyName = "properties.vnetName")]
        public string VnetName { get; set; }

        /// <summary>
        /// Gets or sets resource group of the hostingEnvironment's (App
        /// Service Environment) virtual network
        /// </summary>
        [JsonProperty(PropertyName = "properties.vnetResourceGroupName")]
        public string VnetResourceGroupName { get; set; }

        /// <summary>
        /// Gets or sets subnet of the hostingEnvironment's (App Service
        /// Environment) virtual network
        /// </summary>
        [JsonProperty(PropertyName = "properties.vnetSubnetName")]
        public string VnetSubnetName { get; set; }

        /// <summary>
        /// Gets or sets description of the hostingEnvironment's (App Service
        /// Environment) virtual network
        /// </summary>
        [JsonProperty(PropertyName = "properties.virtualNetwork")]
        public VirtualNetworkProfile VirtualNetwork { get; set; }

        /// <summary>
        /// Gets or sets specifies which endpoints to serve internally in the
        /// hostingEnvironment's (App Service Environment) VNET. Possible
        /// values include: 'None', 'Web', 'Publishing'
        /// </summary>
        [JsonProperty(PropertyName = "properties.internalLoadBalancingMode")]
        public InternalLoadBalancingMode? InternalLoadBalancingMode { get; set; }

        /// <summary>
        /// Gets or sets front-end VM size, e.g. "Medium", "Large"
        /// </summary>
        [JsonProperty(PropertyName = "properties.multiSize")]
        public string MultiSize { get; set; }

        /// <summary>
        /// Gets or sets number of front-end instances
        /// </summary>
        [JsonProperty(PropertyName = "properties.multiRoleCount")]
        public int? MultiRoleCount { get; set; }

        /// <summary>
        /// Gets or sets description of worker pools with worker size ids, VM
        /// sizes, and number of workers in each pool
        /// </summary>
        [JsonProperty(PropertyName = "properties.workerPools")]
        public IList<WorkerPool> WorkerPools { get; set; }

        /// <summary>
        /// Gets or sets number of IP SSL addresses reserved for this
        /// hostingEnvironment (App Service Environment)
        /// </summary>
        [JsonProperty(PropertyName = "properties.ipsslAddressCount")]
        public int? IpsslAddressCount { get; set; }

        /// <summary>
        /// Gets or sets edition of the metadata database for the
        /// hostingEnvironment (App Service Environment) e.g. "Standard"
        /// </summary>
        [JsonProperty(PropertyName = "properties.databaseEdition")]
        public string DatabaseEdition { get; set; }

        /// <summary>
        /// Gets or sets service objective of the metadata database for the
        /// hostingEnvironment (App Service Environment) e.g. "S0"
        /// </summary>
        [JsonProperty(PropertyName = "properties.databaseServiceObjective")]
        public string DatabaseServiceObjective { get; set; }

        /// <summary>
        /// Gets or sets number of upgrade domains of this hostingEnvironment
        /// (App Service Environment)
        /// </summary>
        [JsonProperty(PropertyName = "properties.upgradeDomains")]
        public int? UpgradeDomains { get; set; }

        /// <summary>
        /// Gets or sets subscription of the hostingEnvironment (App Service
        /// Environment)
        /// </summary>
        [JsonProperty(PropertyName = "properties.subscriptionId")]
        public string SubscriptionId { get; set; }

        /// <summary>
        /// Gets or sets DNS suffix of the hostingEnvironment (App Service
        /// Environment)
        /// </summary>
        [JsonProperty(PropertyName = "properties.dnsSuffix")]
        public string DnsSuffix { get; set; }

        /// <summary>
        /// Gets or sets last deployment action on this hostingEnvironment (App
        /// Service Environment)
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastAction")]
        public string LastAction { get; set; }

        /// <summary>
        /// Gets or sets result of the last deployment action on this
        /// hostingEnvironment (App Service Environment)
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastActionResult")]
        public string LastActionResult { get; set; }

        /// <summary>
        /// Gets or sets list of comma separated strings describing which VM
        /// sizes are allowed for front-ends
        /// </summary>
        [JsonProperty(PropertyName = "properties.allowedMultiSizes")]
        public string AllowedMultiSizes { get; set; }

        /// <summary>
        /// Gets or sets list of comma separated strings describing which VM
        /// sizes are allowed for workers
        /// </summary>
        [JsonProperty(PropertyName = "properties.allowedWorkerSizes")]
        public string AllowedWorkerSizes { get; set; }

        /// <summary>
        /// Gets or sets maximum number of VMs in this hostingEnvironment (App
        /// Service Environment)
        /// </summary>
        [JsonProperty(PropertyName = "properties.maximumNumberOfMachines")]
        public int? MaximumNumberOfMachines { get; set; }

        /// <summary>
        /// Gets or sets description of IP SSL mapping for this
        /// hostingEnvironment (App Service Environment)
        /// </summary>
        [JsonProperty(PropertyName = "properties.vipMappings")]
        public IList<VirtualIPMapping> VipMappings { get; set; }

        /// <summary>
        /// Gets or sets current total, used, and available worker capacities
        /// </summary>
        [JsonProperty(PropertyName = "properties.environmentCapacities")]
        public IList<StampCapacity> EnvironmentCapacities { get; set; }

        /// <summary>
        /// Gets or sets access control list for controlling traffic to the
        /// hostingEnvironment (App Service Environment)
        /// </summary>
        [JsonProperty(PropertyName = "properties.networkAccessControlList")]
        public IList<NetworkAccessControlEntry> NetworkAccessControlList { get; set; }

        /// <summary>
        /// Gets or sets true/false indicating whether the hostingEnvironment
        /// (App Service Environment) is healthy
        /// </summary>
        [JsonProperty(PropertyName = "properties.environmentIsHealthy")]
        public bool? EnvironmentIsHealthy { get; set; }

        /// <summary>
        /// Gets or sets detailed message about with results of the last check
        /// of the hostingEnvironment (App Service Environment)
        /// </summary>
        [JsonProperty(PropertyName = "properties.environmentStatus")]
        public string EnvironmentStatus { get; set; }

        /// <summary>
        /// Gets or sets resource group of the hostingEnvironment (App Service
        /// Environment)
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceGroup")]
        public string ResourceGroup { get; set; }

        /// <summary>
        /// Gets or sets api Management Account associated with this Hosting
        /// Environment
        /// </summary>
        [JsonProperty(PropertyName = "properties.apiManagementAccountId")]
        public string ApiManagementAccountId { get; set; }

        /// <summary>
        /// Gets or sets true/false indicating whether the hostingEnvironment
        /// is suspended. The environment can be suspended e.g. when the
        /// management endpoint is no longer available
        /// (most likely because NSG blocked the incoming traffic)
        /// </summary>
        [JsonProperty(PropertyName = "properties.suspended")]
        public bool? Suspended { get; set; }

        /// <summary>
        /// Gets or sets custom settings for changing the behavior of the
        /// hosting environment
        /// </summary>
        [JsonProperty(PropertyName = "properties.clusterSettings")]
        public IList<NameValuePair> ClusterSettings { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (WorkerPools != null)
            {
                foreach (var element in WorkerPools)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
