// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Certificate Details
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class CertificateDetails : Resource
    {
        /// <summary>
        /// Initializes a new instance of the CertificateDetails class.
        /// </summary>
        public CertificateDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CertificateDetails class.
        /// </summary>
        /// <param name="location">Resource Location</param>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource Name</param>
        /// <param name="kind">Kind of resource</param>
        /// <param name="type">Resource type</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="version">Version</param>
        /// <param name="serialNumber">Serial Number</param>
        /// <param name="thumbprint">Thumbprint</param>
        /// <param name="subject">Subject</param>
        /// <param name="notBefore">Valid from</param>
        /// <param name="notAfter">Valid to</param>
        /// <param name="signatureAlgorithm">Signature Algorithm</param>
        /// <param name="issuer">Issuer</param>
        /// <param name="rawData">Raw certificate data</param>
        public CertificateDetails(string location, string id = default(string), string name = default(string), string kind = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), int? version = default(int?), string serialNumber = default(string), string thumbprint = default(string), string subject = default(string), System.DateTime? notBefore = default(System.DateTime?), System.DateTime? notAfter = default(System.DateTime?), string signatureAlgorithm = default(string), string issuer = default(string), string rawData = default(string))
            : base(location, id, name, kind, type, tags)
        {
            Version = version;
            SerialNumber = serialNumber;
            Thumbprint = thumbprint;
            Subject = subject;
            NotBefore = notBefore;
            NotAfter = notAfter;
            SignatureAlgorithm = signatureAlgorithm;
            Issuer = issuer;
            RawData = rawData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets version
        /// </summary>
        [JsonProperty(PropertyName = "properties.version")]
        public int? Version { get; set; }

        /// <summary>
        /// Gets or sets serial Number
        /// </summary>
        [JsonProperty(PropertyName = "properties.serialNumber")]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or sets thumbprint
        /// </summary>
        [JsonProperty(PropertyName = "properties.thumbprint")]
        public string Thumbprint { get; set; }

        /// <summary>
        /// Gets or sets subject
        /// </summary>
        [JsonProperty(PropertyName = "properties.subject")]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or sets valid from
        /// </summary>
        [JsonProperty(PropertyName = "properties.notBefore")]
        public System.DateTime? NotBefore { get; set; }

        /// <summary>
        /// Gets or sets valid to
        /// </summary>
        [JsonProperty(PropertyName = "properties.notAfter")]
        public System.DateTime? NotAfter { get; set; }

        /// <summary>
        /// Gets or sets signature Algorithm
        /// </summary>
        [JsonProperty(PropertyName = "properties.signatureAlgorithm")]
        public string SignatureAlgorithm { get; set; }

        /// <summary>
        /// Gets or sets issuer
        /// </summary>
        [JsonProperty(PropertyName = "properties.issuer")]
        public string Issuer { get; set; }

        /// <summary>
        /// Gets or sets raw certificate data
        /// </summary>
        [JsonProperty(PropertyName = "properties.rawData")]
        public string RawData { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
