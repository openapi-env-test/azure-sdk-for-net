// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Certificate signing request object
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Csr : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Csr class.
        /// </summary>
        public Csr()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Csr class.
        /// </summary>
        /// <param name="location">Resource Location</param>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource Name</param>
        /// <param name="kind">Kind of resource</param>
        /// <param name="type">Resource type</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="csrName">Name used to locate CSR object</param>
        /// <param name="distinguishedName">Distinguished name of certificate
        /// to be created</param>
        /// <param name="csrString">Actual CSR string created</param>
        /// <param name="pfxBlob">PFX certificate of created
        /// certificate</param>
        /// <param name="password">PFX password</param>
        /// <param name="publicKeyHash">Hash of the certificates public
        /// key</param>
        /// <param name="hostingEnvironment">Hosting environment</param>
        public Csr(string location, string id = default(string), string name = default(string), string kind = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string csrName = default(string), string distinguishedName = default(string), string csrString = default(string), string pfxBlob = default(string), string password = default(string), string publicKeyHash = default(string), string hostingEnvironment = default(string))
            : base(location, id, name, kind, type, tags)
        {
            CsrName = csrName;
            DistinguishedName = distinguishedName;
            CsrString = csrString;
            PfxBlob = pfxBlob;
            Password = password;
            PublicKeyHash = publicKeyHash;
            HostingEnvironment = hostingEnvironment;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name used to locate CSR object
        /// </summary>
        [JsonProperty(PropertyName = "properties.name")]
        public string CsrName { get; set; }

        /// <summary>
        /// Gets or sets distinguished name of certificate to be created
        /// </summary>
        [JsonProperty(PropertyName = "properties.distinguishedName")]
        public string DistinguishedName { get; set; }

        /// <summary>
        /// Gets or sets actual CSR string created
        /// </summary>
        [JsonProperty(PropertyName = "properties.csrString")]
        public string CsrString { get; set; }

        /// <summary>
        /// Gets or sets PFX certificate of created certificate
        /// </summary>
        [JsonProperty(PropertyName = "properties.pfxBlob")]
        public string PfxBlob { get; set; }

        /// <summary>
        /// Gets or sets PFX password
        /// </summary>
        [JsonProperty(PropertyName = "properties.password")]
        public string Password { get; set; }

        /// <summary>
        /// Gets or sets hash of the certificates public key
        /// </summary>
        [JsonProperty(PropertyName = "properties.publicKeyHash")]
        public string PublicKeyHash { get; set; }

        /// <summary>
        /// Gets or sets hosting environment
        /// </summary>
        [JsonProperty(PropertyName = "properties.hostingEnvironment")]
        public string HostingEnvironment { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
