// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Back end service per ASE
    /// </summary>
    public partial class HostingEnvironmentServiceDescriptions
    {
        /// <summary>
        /// Initializes a new instance of the
        /// HostingEnvironmentServiceDescriptions class.
        /// </summary>
        public HostingEnvironmentServiceDescriptions()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// HostingEnvironmentServiceDescriptions class.
        /// </summary>
        /// <param name="hostingEnvironmentId">Hosting environment Id</param>
        /// <param name="hostId">Host Id</param>
        /// <param name="serviceUrl">service url to use</param>
        /// <param name="useInternalRouting">When the backend url is in same
        /// ASE, for performance reason this flag can be set to true
        /// If WebApp.DisableHostNames is also set it improves the security by
        /// making the back end accessible only
        /// via API calls
        /// Note: calls will fail if this option is used but back end is not on
        /// the same ASE</param>
        public HostingEnvironmentServiceDescriptions(string hostingEnvironmentId = default(string), string hostId = default(string), string serviceUrl = default(string), bool? useInternalRouting = default(bool?))
        {
            HostingEnvironmentId = hostingEnvironmentId;
            HostId = hostId;
            ServiceUrl = serviceUrl;
            UseInternalRouting = useInternalRouting;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets hosting environment Id
        /// </summary>
        [JsonProperty(PropertyName = "hostingEnvironmentId")]
        public string HostingEnvironmentId { get; set; }

        /// <summary>
        /// Gets or sets host Id
        /// </summary>
        [JsonProperty(PropertyName = "hostId")]
        public string HostId { get; set; }

        /// <summary>
        /// Gets or sets service url to use
        /// </summary>
        [JsonProperty(PropertyName = "serviceUrl")]
        public string ServiceUrl { get; set; }

        /// <summary>
        /// Gets or sets when the backend url is in same ASE, for performance
        /// reason this flag can be set to true
        /// If WebApp.DisableHostNames is also set it improves the security by
        /// making the back end accessible only
        /// via API calls
        /// Note: calls will fail if this option is used but back end is not on
        /// the same ASE
        /// </summary>
        [JsonProperty(PropertyName = "useInternalRouting")]
        public bool? UseInternalRouting { get; set; }

    }
}
