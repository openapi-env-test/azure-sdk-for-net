// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for DatabaseServerType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum DatabaseServerType
    {
        [EnumMember(Value = "MySql")]
        MySql,
        [EnumMember(Value = "SQLServer")]
        SQLServer,
        [EnumMember(Value = "SQLAzure")]
        SQLAzure,
        [EnumMember(Value = "Custom")]
        Custom
    }
    internal static class DatabaseServerTypeEnumExtension
    {
        internal static string ToSerializedValue(this DatabaseServerType? value)
        {
            return value == null ? null : ((DatabaseServerType)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this DatabaseServerType value)
        {
            switch( value )
            {
                case DatabaseServerType.MySql:
                    return "MySql";
                case DatabaseServerType.SQLServer:
                    return "SQLServer";
                case DatabaseServerType.SQLAzure:
                    return "SQLAzure";
                case DatabaseServerType.Custom:
                    return "Custom";
            }
            return null;
        }

        internal static DatabaseServerType? ParseDatabaseServerType(this string value)
        {
            switch( value )
            {
                case "MySql":
                    return DatabaseServerType.MySql;
                case "SQLServer":
                    return DatabaseServerType.SQLServer;
                case "SQLAzure":
                    return DatabaseServerType.SQLAzure;
                case "Custom":
                    return DatabaseServerType.Custom;
            }
            return null;
        }
    }
}
