// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Object that represents a SSL-enabled host name.
    /// </summary>
    public partial class HostNameSslState
    {
        /// <summary>
        /// Initializes a new instance of the HostNameSslState class.
        /// </summary>
        public HostNameSslState()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HostNameSslState class.
        /// </summary>
        /// <param name="sslState">SSL type. Possible values include:
        /// 'Disabled', 'SniEnabled', 'IpBasedEnabled'</param>
        /// <param name="name">Host name</param>
        /// <param name="virtualIP">Virtual IP address assigned to the host
        /// name if IP based SSL is enabled</param>
        /// <param name="thumbprint">SSL cert thumbprint</param>
        /// <param name="toUpdate">Set this flag to update existing host
        /// name</param>
        public HostNameSslState(SslState sslState, string name = default(string), string virtualIP = default(string), string thumbprint = default(string), bool? toUpdate = default(bool?))
        {
            Name = name;
            SslState = sslState;
            VirtualIP = virtualIP;
            Thumbprint = thumbprint;
            ToUpdate = toUpdate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets host name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets SSL type. Possible values include: 'Disabled',
        /// 'SniEnabled', 'IpBasedEnabled'
        /// </summary>
        [JsonProperty(PropertyName = "sslState")]
        public SslState SslState { get; set; }

        /// <summary>
        /// Gets or sets virtual IP address assigned to the host name if IP
        /// based SSL is enabled
        /// </summary>
        [JsonProperty(PropertyName = "virtualIP")]
        public string VirtualIP { get; set; }

        /// <summary>
        /// Gets or sets SSL cert thumbprint
        /// </summary>
        [JsonProperty(PropertyName = "thumbprint")]
        public string Thumbprint { get; set; }

        /// <summary>
        /// Gets or sets set this flag to update existing host name
        /// </summary>
        [JsonProperty(PropertyName = "toUpdate")]
        public bool? ToUpdate { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
