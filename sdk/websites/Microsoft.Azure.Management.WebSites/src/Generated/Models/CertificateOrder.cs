// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Certificate purchase order
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class CertificateOrder : Resource
    {
        /// <summary>
        /// Initializes a new instance of the CertificateOrder class.
        /// </summary>
        public CertificateOrder()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CertificateOrder class.
        /// </summary>
        /// <param name="location">Resource Location</param>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource Name</param>
        /// <param name="kind">Kind of resource</param>
        /// <param name="type">Resource type</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="certificates">State of the Key Vault secret</param>
        /// <param name="distinguishedName">Certificate distinguished
        /// name</param>
        /// <param name="domainVerificationToken">Domain Verification
        /// Token</param>
        /// <param name="validityInYears">Duration in years (must be between 1
        /// and 3)</param>
        /// <param name="keySize">Certificate Key Size</param>
        /// <param name="productType">Certificate product type. Possible values
        /// include: 'StandardDomainValidatedSsl',
        /// 'StandardDomainValidatedWildCardSsl'</param>
        /// <param name="autoRenew">Auto renew</param>
        /// <param name="provisioningState">Status of certificate order.
        /// Possible values include: 'Succeeded', 'Failed', 'Canceled',
        /// 'InProgress', 'Deleting'</param>
        /// <param name="status">Current order status. Possible values include:
        /// 'Pendingissuance', 'Issued', 'Revoked', 'Canceled', 'Denied',
        /// 'Pendingrevocation', 'PendingRekey', 'Unused', 'Expired',
        /// 'NotSubmitted'</param>
        /// <param name="signedCertificate">Signed certificate</param>
        /// <param name="csr">Last CSR that was created for this order</param>
        /// <param name="intermediate">Intermediate certificate</param>
        /// <param name="root">Root certificate</param>
        /// <param name="serialNumber">Current serial number of the
        /// certificate</param>
        /// <param name="lastCertificateIssuanceTime">Certificate last issuance
        /// time</param>
        /// <param name="expirationTime">Certificate expiration time</param>
        public CertificateOrder(string location, string id = default(string), string name = default(string), string kind = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), IDictionary<string, CertificateOrderCertificate> certificates = default(IDictionary<string, CertificateOrderCertificate>), string distinguishedName = default(string), string domainVerificationToken = default(string), int? validityInYears = default(int?), int? keySize = default(int?), CertificateProductType? productType = default(CertificateProductType?), bool? autoRenew = default(bool?), ProvisioningState? provisioningState = default(ProvisioningState?), CertificateOrderStatus? status = default(CertificateOrderStatus?), CertificateDetails signedCertificate = default(CertificateDetails), string csr = default(string), CertificateDetails intermediate = default(CertificateDetails), CertificateDetails root = default(CertificateDetails), string serialNumber = default(string), System.DateTime? lastCertificateIssuanceTime = default(System.DateTime?), System.DateTime? expirationTime = default(System.DateTime?))
            : base(location, id, name, kind, type, tags)
        {
            Certificates = certificates;
            DistinguishedName = distinguishedName;
            DomainVerificationToken = domainVerificationToken;
            ValidityInYears = validityInYears;
            KeySize = keySize;
            ProductType = productType;
            AutoRenew = autoRenew;
            ProvisioningState = provisioningState;
            Status = status;
            SignedCertificate = signedCertificate;
            Csr = csr;
            Intermediate = intermediate;
            Root = root;
            SerialNumber = serialNumber;
            LastCertificateIssuanceTime = lastCertificateIssuanceTime;
            ExpirationTime = expirationTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets state of the Key Vault secret
        /// </summary>
        [JsonProperty(PropertyName = "properties.certificates")]
        public IDictionary<string, CertificateOrderCertificate> Certificates { get; set; }

        /// <summary>
        /// Gets or sets certificate distinguished name
        /// </summary>
        [JsonProperty(PropertyName = "properties.distinguishedName")]
        public string DistinguishedName { get; set; }

        /// <summary>
        /// Gets or sets domain Verification Token
        /// </summary>
        [JsonProperty(PropertyName = "properties.domainVerificationToken")]
        public string DomainVerificationToken { get; set; }

        /// <summary>
        /// Gets or sets duration in years (must be between 1 and 3)
        /// </summary>
        [JsonProperty(PropertyName = "properties.validityInYears")]
        public int? ValidityInYears { get; set; }

        /// <summary>
        /// Gets or sets certificate Key Size
        /// </summary>
        [JsonProperty(PropertyName = "properties.keySize")]
        public int? KeySize { get; set; }

        /// <summary>
        /// Gets or sets certificate product type. Possible values include:
        /// 'StandardDomainValidatedSsl', 'StandardDomainValidatedWildCardSsl'
        /// </summary>
        [JsonProperty(PropertyName = "properties.productType")]
        public CertificateProductType? ProductType { get; set; }

        /// <summary>
        /// Gets or sets auto renew
        /// </summary>
        [JsonProperty(PropertyName = "properties.autoRenew")]
        public bool? AutoRenew { get; set; }

        /// <summary>
        /// Gets or sets status of certificate order. Possible values include:
        /// 'Succeeded', 'Failed', 'Canceled', 'InProgress', 'Deleting'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// Gets or sets current order status. Possible values include:
        /// 'Pendingissuance', 'Issued', 'Revoked', 'Canceled', 'Denied',
        /// 'Pendingrevocation', 'PendingRekey', 'Unused', 'Expired',
        /// 'NotSubmitted'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public CertificateOrderStatus? Status { get; set; }

        /// <summary>
        /// Gets or sets signed certificate
        /// </summary>
        [JsonProperty(PropertyName = "properties.signedCertificate")]
        public CertificateDetails SignedCertificate { get; set; }

        /// <summary>
        /// Gets or sets last CSR that was created for this order
        /// </summary>
        [JsonProperty(PropertyName = "properties.csr")]
        public string Csr { get; set; }

        /// <summary>
        /// Gets or sets intermediate certificate
        /// </summary>
        [JsonProperty(PropertyName = "properties.intermediate")]
        public CertificateDetails Intermediate { get; set; }

        /// <summary>
        /// Gets or sets root certificate
        /// </summary>
        [JsonProperty(PropertyName = "properties.root")]
        public CertificateDetails Root { get; set; }

        /// <summary>
        /// Gets or sets current serial number of the certificate
        /// </summary>
        [JsonProperty(PropertyName = "properties.serialNumber")]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or sets certificate last issuance time
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastCertificateIssuanceTime")]
        public System.DateTime? LastCertificateIssuanceTime { get; set; }

        /// <summary>
        /// Gets or sets certificate expiration time
        /// </summary>
        [JsonProperty(PropertyName = "properties.expirationTime")]
        public System.DateTime? ExpirationTime { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Certificates != null)
            {
                foreach (var valueElement in Certificates.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
            if (SignedCertificate != null)
            {
                SignedCertificate.Validate();
            }
            if (Intermediate != null)
            {
                Intermediate.Validate();
            }
            if (Root != null)
            {
                Root.Validate();
            }
        }
    }
}
