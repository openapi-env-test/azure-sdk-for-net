// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Class representing metadata for the metrics
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class MetricDefinition : Resource
    {
        /// <summary>
        /// Initializes a new instance of the MetricDefinition class.
        /// </summary>
        public MetricDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MetricDefinition class.
        /// </summary>
        /// <param name="location">Resource Location</param>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource Name</param>
        /// <param name="kind">Kind of resource</param>
        /// <param name="type">Resource type</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="metricDefinitionName">Name of the metric</param>
        /// <param name="unit">Unit of the metric</param>
        /// <param name="primaryAggregationType">Primary aggregation
        /// type</param>
        /// <param name="metricAvailabilities">List of time grains supported
        /// for the metric together with retention period</param>
        /// <param name="displayName">Friendly name shown in the UI</param>
        public MetricDefinition(string location, string id = default(string), string name = default(string), string kind = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string metricDefinitionName = default(string), string unit = default(string), string primaryAggregationType = default(string), IList<MetricAvailabilily> metricAvailabilities = default(IList<MetricAvailabilily>), string displayName = default(string))
            : base(location, id, name, kind, type, tags)
        {
            MetricDefinitionName = metricDefinitionName;
            Unit = unit;
            PrimaryAggregationType = primaryAggregationType;
            MetricAvailabilities = metricAvailabilities;
            DisplayName = displayName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the metric
        /// </summary>
        [JsonProperty(PropertyName = "properties.name")]
        public string MetricDefinitionName { get; set; }

        /// <summary>
        /// Gets or sets unit of the metric
        /// </summary>
        [JsonProperty(PropertyName = "properties.unit")]
        public string Unit { get; set; }

        /// <summary>
        /// Gets or sets primary aggregation type
        /// </summary>
        [JsonProperty(PropertyName = "properties.primaryAggregationType")]
        public string PrimaryAggregationType { get; set; }

        /// <summary>
        /// Gets or sets list of time grains supported for the metric together
        /// with retention period
        /// </summary>
        [JsonProperty(PropertyName = "properties.metricAvailabilities")]
        public IList<MetricAvailabilily> MetricAvailabilities { get; set; }

        /// <summary>
        /// Gets or sets friendly name shown in the UI
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
