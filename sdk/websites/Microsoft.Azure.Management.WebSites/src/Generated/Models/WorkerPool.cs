// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Worker pool of a hostingEnvironment (App Service Environment)
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class WorkerPool : Resource
    {
        /// <summary>
        /// Initializes a new instance of the WorkerPool class.
        /// </summary>
        public WorkerPool()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WorkerPool class.
        /// </summary>
        /// <param name="location">Resource Location</param>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource Name</param>
        /// <param name="kind">Kind of resource</param>
        /// <param name="type">Resource type</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="workerSizeId">Worker size id for referencing this
        /// worker pool</param>
        /// <param name="computeMode">Shared or dedicated web app hosting.
        /// Possible values include: 'Shared', 'Dedicated', 'Dynamic'</param>
        /// <param name="workerSize">VM size of the worker pool
        /// instances</param>
        /// <param name="workerCount">Number of instances in the worker
        /// pool</param>
        /// <param name="instanceNames">Names of all instances in the worker
        /// pool (read only)</param>
        public WorkerPool(string location, string id = default(string), string name = default(string), string kind = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), int? workerSizeId = default(int?), ComputeModeOptions? computeMode = default(ComputeModeOptions?), string workerSize = default(string), int? workerCount = default(int?), IList<string> instanceNames = default(IList<string>), SkuDescription sku = default(SkuDescription))
            : base(location, id, name, kind, type, tags)
        {
            WorkerSizeId = workerSizeId;
            ComputeMode = computeMode;
            WorkerSize = workerSize;
            WorkerCount = workerCount;
            InstanceNames = instanceNames;
            Sku = sku;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets worker size id for referencing this worker pool
        /// </summary>
        [JsonProperty(PropertyName = "properties.workerSizeId")]
        public int? WorkerSizeId { get; set; }

        /// <summary>
        /// Gets or sets shared or dedicated web app hosting. Possible values
        /// include: 'Shared', 'Dedicated', 'Dynamic'
        /// </summary>
        [JsonProperty(PropertyName = "properties.computeMode")]
        public ComputeModeOptions? ComputeMode { get; set; }

        /// <summary>
        /// Gets or sets VM size of the worker pool instances
        /// </summary>
        [JsonProperty(PropertyName = "properties.workerSize")]
        public string WorkerSize { get; set; }

        /// <summary>
        /// Gets or sets number of instances in the worker pool
        /// </summary>
        [JsonProperty(PropertyName = "properties.workerCount")]
        public int? WorkerCount { get; set; }

        /// <summary>
        /// Gets or sets names of all instances in the worker pool (read only)
        /// </summary>
        [JsonProperty(PropertyName = "properties.instanceNames")]
        public IList<string> InstanceNames { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public SkuDescription Sku { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
