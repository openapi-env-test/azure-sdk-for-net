// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// API Connection
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Connection : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Connection class.
        /// </summary>
        public Connection()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Connection class.
        /// </summary>
        /// <param name="location">Resource Location</param>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource Name</param>
        /// <param name="kind">Kind of resource</param>
        /// <param name="type">Resource type</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="connectionName">connection name</param>
        /// <param name="displayName">display name</param>
        /// <param name="statuses">Status of the connection</param>
        /// <param name="customParameterValues">Custom login setting
        /// values.</param>
        /// <param name="parameterValues">Tokens/Claim</param>
        /// <param name="nonSecretParameterValues">Tokens/Claim</param>
        /// <param name="firstExpirationTime">Time in UTC when the first
        /// expiration of OAuth tokens</param>
        /// <param name="keywords">List of Keywords that tag the acl</param>
        /// <param name="createdTime">Timestamp of the connection
        /// creation</param>
        /// <param name="changedTime">Timestamp of last connection
        /// change.</param>
        /// <param name="api">expanded connection provider name</param>
        public Connection(string location, string id = default(string), string name = default(string), string kind = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string connectionName = default(string), string displayName = default(string), IList<ConnectionStatus> statuses = default(IList<ConnectionStatus>), IDictionary<string, ParameterCustomLoginSettingValues> customParameterValues = default(IDictionary<string, ParameterCustomLoginSettingValues>), string tenantId = default(string), IDictionary<string, object> parameterValues = default(IDictionary<string, object>), IDictionary<string, object> nonSecretParameterValues = default(IDictionary<string, object>), object metadata = default(object), System.DateTime? firstExpirationTime = default(System.DateTime?), IList<string> keywords = default(IList<string>), System.DateTime? createdTime = default(System.DateTime?), System.DateTime? changedTime = default(System.DateTime?), ExpandedParentApiEntity api = default(ExpandedParentApiEntity))
            : base(location, id, name, kind, type, tags)
        {
            ConnectionName = connectionName;
            DisplayName = displayName;
            Statuses = statuses;
            CustomParameterValues = customParameterValues;
            TenantId = tenantId;
            ParameterValues = parameterValues;
            NonSecretParameterValues = nonSecretParameterValues;
            Metadata = metadata;
            FirstExpirationTime = firstExpirationTime;
            Keywords = keywords;
            CreatedTime = createdTime;
            ChangedTime = changedTime;
            Api = api;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets connection name
        /// </summary>
        [JsonProperty(PropertyName = "properties.name")]
        public string ConnectionName { get; set; }

        /// <summary>
        /// Gets or sets display name
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets status of the connection
        /// </summary>
        [JsonProperty(PropertyName = "properties.statuses")]
        public IList<ConnectionStatus> Statuses { get; set; }

        /// <summary>
        /// Gets or sets custom login setting values.
        /// </summary>
        [JsonProperty(PropertyName = "properties.customParameterValues")]
        public IDictionary<string, ParameterCustomLoginSettingValues> CustomParameterValues { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.tenantId")]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or sets tokens/Claim
        /// </summary>
        [JsonProperty(PropertyName = "properties.parameterValues")]
        public IDictionary<string, object> ParameterValues { get; set; }

        /// <summary>
        /// Gets or sets tokens/Claim
        /// </summary>
        [JsonProperty(PropertyName = "properties.nonSecretParameterValues")]
        public IDictionary<string, object> NonSecretParameterValues { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.metadata")]
        public object Metadata { get; set; }

        /// <summary>
        /// Gets or sets time in UTC when the first expiration of OAuth tokens
        /// </summary>
        [JsonProperty(PropertyName = "properties.firstExpirationTime")]
        public System.DateTime? FirstExpirationTime { get; set; }

        /// <summary>
        /// Gets or sets list of Keywords that tag the acl
        /// </summary>
        [JsonProperty(PropertyName = "properties.keywords")]
        public IList<string> Keywords { get; set; }

        /// <summary>
        /// Gets or sets timestamp of the connection creation
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdTime")]
        public System.DateTime? CreatedTime { get; set; }

        /// <summary>
        /// Gets or sets timestamp of last connection change.
        /// </summary>
        [JsonProperty(PropertyName = "properties.changedTime")]
        public System.DateTime? ChangedTime { get; set; }

        /// <summary>
        /// Gets or sets expanded connection provider name
        /// </summary>
        [JsonProperty(PropertyName = "properties.api")]
        public ExpandedParentApiEntity Api { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Statuses != null)
            {
                foreach (var element in Statuses)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (CustomParameterValues != null)
            {
                foreach (var valueElement in CustomParameterValues.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
            if (Api != null)
            {
                Api.Validate();
            }
        }
    }
}
