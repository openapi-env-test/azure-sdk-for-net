// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// General API information
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class GeneralApiInformation : Resource
    {
        /// <summary>
        /// Initializes a new instance of the GeneralApiInformation class.
        /// </summary>
        public GeneralApiInformation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GeneralApiInformation class.
        /// </summary>
        /// <param name="location">Resource Location</param>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource Name</param>
        /// <param name="kind">Kind of resource</param>
        /// <param name="type">Resource type</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="iconUrl">Icon Url</param>
        /// <param name="displayName">Display Name</param>
        /// <param name="description">Description</param>
        /// <param name="termsOfUseUrl">a public accessible url of the Terms Of
        /// Use Url of this API</param>
        /// <param
        /// name="connectionDisplayName">DefaultConnectionNameTemplate</param>
        /// <param name="connectionPortalUrl">ConnectionPortalUrl</param>
        public GeneralApiInformation(string location, string id = default(string), string name = default(string), string kind = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string iconUrl = default(string), string displayName = default(string), string description = default(string), string termsOfUseUrl = default(string), string connectionDisplayName = default(string), object connectionPortalUrl = default(object))
            : base(location, id, name, kind, type, tags)
        {
            IconUrl = iconUrl;
            DisplayName = displayName;
            Description = description;
            TermsOfUseUrl = termsOfUseUrl;
            ConnectionDisplayName = connectionDisplayName;
            ConnectionPortalUrl = connectionPortalUrl;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets icon Url
        /// </summary>
        [JsonProperty(PropertyName = "properties.iconUrl")]
        public string IconUrl { get; set; }

        /// <summary>
        /// Gets or sets display Name
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets description
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets a public accessible url of the Terms Of Use Url of
        /// this API
        /// </summary>
        [JsonProperty(PropertyName = "properties.termsOfUseUrl")]
        public string TermsOfUseUrl { get; set; }

        /// <summary>
        /// Gets or sets defaultConnectionNameTemplate
        /// </summary>
        [JsonProperty(PropertyName = "properties.connectionDisplayName")]
        public string ConnectionDisplayName { get; set; }

        /// <summary>
        /// Gets or sets connectionPortalUrl
        /// </summary>
        [JsonProperty(PropertyName = "properties.connectionPortalUrl")]
        public object ConnectionPortalUrl { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
