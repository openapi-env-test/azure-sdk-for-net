// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// App Service Plan Model
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ServerFarmWithRichSku : Resource
    {
        /// <summary>
        /// Initializes a new instance of the ServerFarmWithRichSku class.
        /// </summary>
        public ServerFarmWithRichSku()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServerFarmWithRichSku class.
        /// </summary>
        /// <param name="location">Resource Location</param>
        /// <param name="status">App Service Plan Status. Possible values
        /// include: 'Ready', 'Pending'</param>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource Name</param>
        /// <param name="kind">Kind of resource</param>
        /// <param name="type">Resource type</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="serverFarmWithRichSkuName">Name for the App Service
        /// Plan</param>
        /// <param name="workerTierName">Target worker tier assigned to the App
        /// Service Plan</param>
        /// <param name="subscription">App Service Plan Subscription</param>
        /// <param name="adminSiteName">App Service Plan administration
        /// site</param>
        /// <param name="hostingEnvironmentProfile">Specification for the
        /// hosting environment (App Service Environment) to use for the App
        /// Service Plan</param>
        /// <param name="maximumNumberOfWorkers">Maximum number of instances
        /// that can be assigned to this App Service Plan</param>
        /// <param name="geoRegion">Geographical location for the App Service
        /// Plan</param>
        /// <param name="perSiteScaling">If True apps assigned to this App
        /// Service Plan can be scaled independently
        /// If False apps assigned to this App Service Plan will scale to all
        /// instances of the plan</param>
        /// <param name="numberOfSites">Number of web apps assigned to this App
        /// Service Plan</param>
        /// <param name="resourceGroup">Resource group of the server
        /// farm</param>
        /// <param name="reserved">Enables creation of a Linux App Service
        /// Plan</param>
        public ServerFarmWithRichSku(string location, StatusOptions status, string id = default(string), string name = default(string), string kind = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string serverFarmWithRichSkuName = default(string), string workerTierName = default(string), string subscription = default(string), string adminSiteName = default(string), HostingEnvironmentProfile hostingEnvironmentProfile = default(HostingEnvironmentProfile), int? maximumNumberOfWorkers = default(int?), string geoRegion = default(string), bool? perSiteScaling = default(bool?), int? numberOfSites = default(int?), string resourceGroup = default(string), bool? reserved = default(bool?), SkuDescription sku = default(SkuDescription))
            : base(location, id, name, kind, type, tags)
        {
            ServerFarmWithRichSkuName = serverFarmWithRichSkuName;
            WorkerTierName = workerTierName;
            Status = status;
            Subscription = subscription;
            AdminSiteName = adminSiteName;
            HostingEnvironmentProfile = hostingEnvironmentProfile;
            MaximumNumberOfWorkers = maximumNumberOfWorkers;
            GeoRegion = geoRegion;
            PerSiteScaling = perSiteScaling;
            NumberOfSites = numberOfSites;
            ResourceGroup = resourceGroup;
            Reserved = reserved;
            Sku = sku;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name for the App Service Plan
        /// </summary>
        [JsonProperty(PropertyName = "properties.name")]
        public string ServerFarmWithRichSkuName { get; set; }

        /// <summary>
        /// Gets or sets target worker tier assigned to the App Service Plan
        /// </summary>
        [JsonProperty(PropertyName = "properties.workerTierName")]
        public string WorkerTierName { get; set; }

        /// <summary>
        /// Gets app Service Plan Status. Possible values include: 'Ready',
        /// 'Pending'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public StatusOptions Status { get; private set; }

        /// <summary>
        /// Gets app Service Plan Subscription
        /// </summary>
        [JsonProperty(PropertyName = "properties.subscription")]
        public string Subscription { get; private set; }

        /// <summary>
        /// Gets or sets app Service Plan administration site
        /// </summary>
        [JsonProperty(PropertyName = "properties.adminSiteName")]
        public string AdminSiteName { get; set; }

        /// <summary>
        /// Gets or sets specification for the hosting environment (App Service
        /// Environment) to use for the App Service Plan
        /// </summary>
        [JsonProperty(PropertyName = "properties.hostingEnvironmentProfile")]
        public HostingEnvironmentProfile HostingEnvironmentProfile { get; set; }

        /// <summary>
        /// Gets or sets maximum number of instances that can be assigned to
        /// this App Service Plan
        /// </summary>
        [JsonProperty(PropertyName = "properties.maximumNumberOfWorkers")]
        public int? MaximumNumberOfWorkers { get; set; }

        /// <summary>
        /// Gets geographical location for the App Service Plan
        /// </summary>
        [JsonProperty(PropertyName = "properties.geoRegion")]
        public string GeoRegion { get; private set; }

        /// <summary>
        /// Gets or sets if True apps assigned to this App Service Plan can be
        /// scaled independently
        /// If False apps assigned to this App Service Plan will scale to all
        /// instances of the plan
        /// </summary>
        [JsonProperty(PropertyName = "properties.perSiteScaling")]
        public bool? PerSiteScaling { get; set; }

        /// <summary>
        /// Gets number of web apps assigned to this App Service Plan
        /// </summary>
        [JsonProperty(PropertyName = "properties.numberOfSites")]
        public int? NumberOfSites { get; private set; }

        /// <summary>
        /// Gets resource group of the server farm
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceGroup")]
        public string ResourceGroup { get; private set; }

        /// <summary>
        /// Gets or sets enables creation of a Linux App Service Plan
        /// </summary>
        [JsonProperty(PropertyName = "properties.reserved")]
        public bool? Reserved { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public SkuDescription Sku { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
