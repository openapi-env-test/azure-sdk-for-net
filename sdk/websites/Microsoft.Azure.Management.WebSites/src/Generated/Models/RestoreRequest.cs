// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Description of a restore request
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class RestoreRequest : Resource
    {
        /// <summary>
        /// Initializes a new instance of the RestoreRequest class.
        /// </summary>
        public RestoreRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RestoreRequest class.
        /// </summary>
        /// <param name="location">Resource Location</param>
        /// <param name="operationType">Operation type. Possible values
        /// include: 'Default', 'Clone', 'Relocation'</param>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource Name</param>
        /// <param name="kind">Kind of resource</param>
        /// <param name="type">Resource type</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="storageAccountUrl">SAS URL to the container</param>
        /// <param name="blobName">Name of a blob which contains the
        /// backup</param>
        /// <param name="overwrite">True if the restore operation can overwrite
        /// target site. "True" needed if trying to restore over an existing
        /// site.</param>
        /// <param name="siteName">Name of a site (Web App)</param>
        /// <param name="databases">Collection of databases which should be
        /// restored. This list has to match the list of databases included in
        /// the backup.</param>
        /// <param name="ignoreConflictingHostNames">Changes a logic when
        /// restoring a site with custom domains. If "true", custom domains are
        /// removed automatically. If "false", custom domains are added to
        /// the site object when it is being restored, but that might fail due
        /// to conflicts during the operation.</param>
        /// <param name="adjustConnectionStrings">Gets or sets a flag showing
        /// if SiteConfig.ConnectionStrings should be set in new site</param>
        /// <param name="hostingEnvironment">App Service Environment name, if
        /// needed (only when restoring a site to an App Service
        /// Environment)</param>
        public RestoreRequest(string location, BackupRestoreOperationType operationType, string id = default(string), string name = default(string), string kind = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string storageAccountUrl = default(string), string blobName = default(string), bool? overwrite = default(bool?), string siteName = default(string), IList<DatabaseBackupSetting> databases = default(IList<DatabaseBackupSetting>), bool? ignoreConflictingHostNames = default(bool?), bool? adjustConnectionStrings = default(bool?), string hostingEnvironment = default(string))
            : base(location, id, name, kind, type, tags)
        {
            StorageAccountUrl = storageAccountUrl;
            BlobName = blobName;
            Overwrite = overwrite;
            SiteName = siteName;
            Databases = databases;
            IgnoreConflictingHostNames = ignoreConflictingHostNames;
            OperationType = operationType;
            AdjustConnectionStrings = adjustConnectionStrings;
            HostingEnvironment = hostingEnvironment;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets SAS URL to the container
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageAccountUrl")]
        public string StorageAccountUrl { get; set; }

        /// <summary>
        /// Gets or sets name of a blob which contains the backup
        /// </summary>
        [JsonProperty(PropertyName = "properties.blobName")]
        public string BlobName { get; set; }

        /// <summary>
        /// Gets or sets true if the restore operation can overwrite target
        /// site. "True" needed if trying to restore over an existing site.
        /// </summary>
        [JsonProperty(PropertyName = "properties.overwrite")]
        public bool? Overwrite { get; set; }

        /// <summary>
        /// Gets or sets name of a site (Web App)
        /// </summary>
        [JsonProperty(PropertyName = "properties.siteName")]
        public string SiteName { get; set; }

        /// <summary>
        /// Gets or sets collection of databases which should be restored. This
        /// list has to match the list of databases included in the backup.
        /// </summary>
        [JsonProperty(PropertyName = "properties.databases")]
        public IList<DatabaseBackupSetting> Databases { get; set; }

        /// <summary>
        /// Gets or sets changes a logic when restoring a site with custom
        /// domains. If "true", custom domains are removed automatically. If
        /// "false", custom domains are added to
        /// the site object when it is being restored, but that might fail due
        /// to conflicts during the operation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.ignoreConflictingHostNames")]
        public bool? IgnoreConflictingHostNames { get; set; }

        /// <summary>
        /// Gets or sets operation type. Possible values include: 'Default',
        /// 'Clone', 'Relocation'
        /// </summary>
        [JsonProperty(PropertyName = "properties.operationType")]
        public BackupRestoreOperationType OperationType { get; set; }

        /// <summary>
        /// Gets or sets a flag showing if SiteConfig.ConnectionStrings should
        /// be set in new site
        /// </summary>
        [JsonProperty(PropertyName = "properties.adjustConnectionStrings")]
        public bool? AdjustConnectionStrings { get; set; }

        /// <summary>
        /// Gets or sets app Service Environment name, if needed (only when
        /// restoring a site to an App Service Environment)
        /// </summary>
        [JsonProperty(PropertyName = "properties.hostingEnvironment")]
        public string HostingEnvironment { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
