// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class ConsentLinkInputParameter
    {
        /// <summary>
        /// Initializes a new instance of the ConsentLinkInputParameter class.
        /// </summary>
        public ConsentLinkInputParameter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConsentLinkInputParameter class.
        /// </summary>
        /// <param name="principalType">Principal type. Possible values
        /// include: 'ActiveDirectory', 'Connection',
        /// 'MicrosoftAccount'</param>
        /// <param name="tenantId">Tenant Id</param>
        /// <param name="objectId">AAD OID (user or group) if the principal
        /// type is ActiveDirectory.
        /// MSA PUID if the principal type is MicrosoftAccount.</param>
        /// <param name="parameterName">Name of the parameter in the connection
        /// provider's oauthSettings</param>
        /// <param name="redirectUrl">Name of the parameter in the connection
        /// provider's oauthSettings</param>
        public ConsentLinkInputParameter(PrincipalType? principalType = default(PrincipalType?), string tenantId = default(string), string objectId = default(string), string parameterName = default(string), string redirectUrl = default(string))
        {
            PrincipalType = principalType;
            TenantId = tenantId;
            ObjectId = objectId;
            ParameterName = parameterName;
            RedirectUrl = redirectUrl;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets principal type. Possible values include:
        /// 'ActiveDirectory', 'Connection', 'MicrosoftAccount'
        /// </summary>
        [JsonProperty(PropertyName = "principalType")]
        public PrincipalType? PrincipalType { get; set; }

        /// <summary>
        /// Gets or sets tenant Id
        /// </summary>
        [JsonProperty(PropertyName = "tenantId")]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or sets AAD OID (user or group) if the principal type is
        /// ActiveDirectory.
        /// MSA PUID if the principal type is MicrosoftAccount.
        /// </summary>
        [JsonProperty(PropertyName = "objectId")]
        public string ObjectId { get; set; }

        /// <summary>
        /// Gets or sets name of the parameter in the connection provider's
        /// oauthSettings
        /// </summary>
        [JsonProperty(PropertyName = "parameterName")]
        public string ParameterName { get; set; }

        /// <summary>
        /// Gets or sets name of the parameter in the connection provider's
        /// oauthSettings
        /// </summary>
        [JsonProperty(PropertyName = "redirectUrl")]
        public string RedirectUrl { get; set; }

    }
}
