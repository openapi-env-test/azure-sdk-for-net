// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// API Management
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ApiEntity : Resource
    {
        /// <summary>
        /// Initializes a new instance of the ApiEntity class.
        /// </summary>
        public ApiEntity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApiEntity class.
        /// </summary>
        /// <param name="location">Resource Location</param>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource Name</param>
        /// <param name="kind">Kind of resource</param>
        /// <param name="type">Resource type</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="apiEntityName">Name of the API
        /// the URL path of this API when exposed via APIM</param>
        /// <param name="generalInformation">the URL path of this API when
        /// exposed via APIM</param>
        /// <param name="path">the URL path of this API when exposed via
        /// APIM</param>
        /// <param name="runtimeUrls">Read only property returning the runtime
        /// endpoints where the API can be called</param>
        /// <param name="protocols">Protocols supported by the front end -
        /// http/https</param>
        /// <param name="policies">API policies</param>
        /// <param name="backendService">Backend service definition</param>
        /// <param name="apiDefinitionUrl">API definition Url - url where the
        /// swagger can be downloaded from</param>
        /// <param name="metadata">Free form object for the data caller wants
        /// to store</param>
        /// <param name="capabilities">Capabilities</param>
        /// <param name="connectionParameters">Connection parameters</param>
        /// <param name="createdTime">Timestamp of the connection
        /// creation</param>
        /// <param name="changedTime">Timestamp of last connection
        /// change.</param>
        public ApiEntity(string location, string id = default(string), string name = default(string), string kind = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string apiEntityName = default(string), GeneralApiInformation generalInformation = default(GeneralApiInformation), string path = default(string), IList<string> runtimeUrls = default(IList<string>), IList<string> protocols = default(IList<string>), ApiPolicies policies = default(ApiPolicies), BackendServiceDefinition backendService = default(BackendServiceDefinition), string apiDefinitionUrl = default(string), object metadata = default(object), IList<string> capabilities = default(IList<string>), IDictionary<string, ConnectionParameter> connectionParameters = default(IDictionary<string, ConnectionParameter>), System.DateTime? createdTime = default(System.DateTime?), System.DateTime? changedTime = default(System.DateTime?))
            : base(location, id, name, kind, type, tags)
        {
            ApiEntityName = apiEntityName;
            GeneralInformation = generalInformation;
            Path = path;
            RuntimeUrls = runtimeUrls;
            Protocols = protocols;
            Policies = policies;
            BackendService = backendService;
            ApiDefinitionUrl = apiDefinitionUrl;
            Metadata = metadata;
            Capabilities = capabilities;
            ConnectionParameters = connectionParameters;
            CreatedTime = createdTime;
            ChangedTime = changedTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the API
        /// the URL path of this API when exposed via APIM
        /// </summary>
        [JsonProperty(PropertyName = "properties.name")]
        public string ApiEntityName { get; set; }

        /// <summary>
        /// Gets or sets the URL path of this API when exposed via APIM
        /// </summary>
        [JsonProperty(PropertyName = "properties.generalInformation")]
        public GeneralApiInformation GeneralInformation { get; set; }

        /// <summary>
        /// Gets or sets the URL path of this API when exposed via APIM
        /// </summary>
        [JsonProperty(PropertyName = "properties.path")]
        public string Path { get; set; }

        /// <summary>
        /// Gets or sets read only property returning the runtime endpoints
        /// where the API can be called
        /// </summary>
        [JsonProperty(PropertyName = "properties.runtimeUrls")]
        public IList<string> RuntimeUrls { get; set; }

        /// <summary>
        /// Gets or sets protocols supported by the front end - http/https
        /// </summary>
        [JsonProperty(PropertyName = "properties.protocols")]
        public IList<string> Protocols { get; set; }

        /// <summary>
        /// Gets or sets API policies
        /// </summary>
        [JsonProperty(PropertyName = "properties.policies")]
        public ApiPolicies Policies { get; set; }

        /// <summary>
        /// Gets or sets backend service definition
        /// </summary>
        [JsonProperty(PropertyName = "properties.backendService")]
        public BackendServiceDefinition BackendService { get; set; }

        /// <summary>
        /// Gets or sets API definition Url - url where the swagger can be
        /// downloaded from
        /// </summary>
        [JsonProperty(PropertyName = "properties.apiDefinitionUrl")]
        public string ApiDefinitionUrl { get; set; }

        /// <summary>
        /// Gets or sets free form object for the data caller wants to store
        /// </summary>
        [JsonProperty(PropertyName = "properties.metadata")]
        public object Metadata { get; set; }

        /// <summary>
        /// Gets or sets capabilities
        /// </summary>
        [JsonProperty(PropertyName = "properties.capabilities")]
        public IList<string> Capabilities { get; set; }

        /// <summary>
        /// Gets or sets connection parameters
        /// </summary>
        [JsonProperty(PropertyName = "properties.connectionParameters")]
        public IDictionary<string, ConnectionParameter> ConnectionParameters { get; set; }

        /// <summary>
        /// Gets or sets timestamp of the connection creation
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdTime")]
        public System.DateTime? CreatedTime { get; set; }

        /// <summary>
        /// Gets or sets timestamp of last connection change.
        /// </summary>
        [JsonProperty(PropertyName = "properties.changedTime")]
        public System.DateTime? ChangedTime { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (GeneralInformation != null)
            {
                GeneralInformation.Validate();
            }
            if (Policies != null)
            {
                Policies.Validate();
            }
            if (BackendService != null)
            {
                BackendService.Validate();
            }
        }
    }
}
