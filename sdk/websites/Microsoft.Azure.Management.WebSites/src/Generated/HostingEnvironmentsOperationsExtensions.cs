// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for HostingEnvironmentsOperations.
    /// </summary>
    public static partial class HostingEnvironmentsOperationsExtensions
    {
            /// <summary>
            /// Get properties of hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static HostingEnvironment GetHostingEnvironment(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetHostingEnvironmentAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get properties of hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostingEnvironment> GetHostingEnvironmentAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='hostingEnvironmentEnvelope'>
            /// Properties of hostingEnvironment (App Service Environment)
            /// </param>
            public static HostingEnvironment CreateOrUpdateHostingEnvironment(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, HostingEnvironment hostingEnvironmentEnvelope)
            {
                return operations.CreateOrUpdateHostingEnvironmentAsync(resourceGroupName, name, hostingEnvironmentEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='hostingEnvironmentEnvelope'>
            /// Properties of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostingEnvironment> CreateOrUpdateHostingEnvironmentAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, HostingEnvironment hostingEnvironmentEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, name, hostingEnvironmentEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='forceDelete'>
            /// Delete even if the hostingEnvironment (App Service Environment) contains
            /// resources
            /// </param>
            public static object DeleteHostingEnvironment(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, bool? forceDelete = default(bool?))
            {
                return operations.DeleteHostingEnvironmentAsync(resourceGroupName, name, forceDelete).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='forceDelete'>
            /// Delete even if the hostingEnvironment (App Service Environment) contains
            /// resources
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteHostingEnvironmentAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, bool? forceDelete = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, name, forceDelete, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get diagnostic information for hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static IList<HostingEnvironmentDiagnostics> GetHostingEnvironmentDiagnostics(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetHostingEnvironmentDiagnosticsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get diagnostic information for hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<HostingEnvironmentDiagnostics>> GetHostingEnvironmentDiagnosticsAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentDiagnosticsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get diagnostic information for hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='diagnosticsName'>
            /// Name of the diagnostics
            /// </param>
            public static HostingEnvironmentDiagnostics GetHostingEnvironmentDiagnosticsItem(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string diagnosticsName)
            {
                return operations.GetHostingEnvironmentDiagnosticsItemAsync(resourceGroupName, name, diagnosticsName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get diagnostic information for hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='diagnosticsName'>
            /// Name of the diagnostics
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostingEnvironmentDiagnostics> GetHostingEnvironmentDiagnosticsItemAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string diagnosticsName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentDiagnosticsItemWithHttpMessagesAsync(resourceGroupName, name, diagnosticsName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get used, available, and total worker capacity for hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static IPage<StampCapacity> GetHostingEnvironmentCapacities(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetHostingEnvironmentCapacitiesAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get used, available, and total worker capacity for hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StampCapacity>> GetHostingEnvironmentCapacitiesAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentCapacitiesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get IP addresses assigned to the hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static AddressResponse GetHostingEnvironmentVips(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetHostingEnvironmentVipsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get IP addresses assigned to the hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddressResponse> GetHostingEnvironmentVipsAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentVipsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all hostingEnvironments (App Service Environments) in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            public static IPage<HostingEnvironment> GetHostingEnvironments(this IHostingEnvironmentsOperations operations, string resourceGroupName)
            {
                return operations.GetHostingEnvironmentsAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all hostingEnvironments (App Service Environments) in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HostingEnvironment>> GetHostingEnvironmentsAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentsWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reboots all machines in a hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static object RebootHostingEnvironment(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.RebootHostingEnvironmentAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reboots all machines in a hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RebootHostingEnvironmentAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RebootHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all currently running operations on the hostingEnvironment (App
            /// Service Environment)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static object GetHostingEnvironmentOperations(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetHostingEnvironmentOperationsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all currently running operations on the hostingEnvironment (App
            /// Service Environment)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetHostingEnvironmentOperationsAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentOperationsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get status of an operation on a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='operationId'>
            /// operation identifier GUID
            /// </param>
            public static object GetHostingEnvironmentOperation(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string operationId)
            {
                return operations.GetHostingEnvironmentOperationAsync(resourceGroupName, name, operationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get status of an operation on a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='operationId'>
            /// operation identifier GUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetHostingEnvironmentOperationAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentOperationWithHttpMessagesAsync(resourceGroupName, name, operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get global metrics of hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='details'>
            /// Include instance details
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static IPage<ResourceMetric> GetHostingEnvironmentMetrics(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, bool? details = default(bool?), string filter = default(string))
            {
                return operations.GetHostingEnvironmentMetricsAsync(resourceGroupName, name, details, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get global metrics of hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='details'>
            /// Include instance details
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> GetHostingEnvironmentMetricsAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, bool? details = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentMetricsWithHttpMessagesAsync(resourceGroupName, name, details, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get global metric definitions of hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static MetricDefinition GetHostingEnvironmentMetricDefinitions(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetHostingEnvironmentMetricDefinitionsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get global metric definitions of hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MetricDefinition> GetHostingEnvironmentMetricDefinitionsAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get global usages of hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static IPage<CsmUsageQuota> GetHostingEnvironmentUsages(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string filter = default(string))
            {
                return operations.GetHostingEnvironmentUsagesAsync(resourceGroupName, name, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get global usages of hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CsmUsageQuota>> GetHostingEnvironmentUsagesAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentUsagesWithHttpMessagesAsync(resourceGroupName, name, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metrics for a multiRole pool of a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='startTime'>
            /// Beginning time of metrics query
            /// </param>
            /// <param name='endTime'>
            /// End time of metrics query
            /// </param>
            /// <param name='timeGrain'>
            /// Time granularity of metrics query
            /// </param>
            /// <param name='details'>
            /// Include instance details
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static IPage<ResourceMetric> GetHostingEnvironmentMultiRoleMetrics(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string startTime = default(string), string endTime = default(string), string timeGrain = default(string), bool? details = default(bool?), string filter = default(string))
            {
                return operations.GetHostingEnvironmentMultiRoleMetricsAsync(resourceGroupName, name, startTime, endTime, timeGrain, details, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metrics for a multiRole pool of a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='startTime'>
            /// Beginning time of metrics query
            /// </param>
            /// <param name='endTime'>
            /// End time of metrics query
            /// </param>
            /// <param name='timeGrain'>
            /// Time granularity of metrics query
            /// </param>
            /// <param name='details'>
            /// Include instance details
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> GetHostingEnvironmentMultiRoleMetricsAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string startTime = default(string), string endTime = default(string), string timeGrain = default(string), bool? details = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentMultiRoleMetricsWithHttpMessagesAsync(resourceGroupName, name, startTime, endTime, timeGrain, details, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metrics for a worker pool of a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='details'>
            /// Include instance details
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static IPage<ResourceMetric> GetHostingEnvironmentWebWorkerMetrics(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, bool? details = default(bool?), string filter = default(string))
            {
                return operations.GetHostingEnvironmentWebWorkerMetricsAsync(resourceGroupName, name, workerPoolName, details, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metrics for a worker pool of a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='details'>
            /// Include instance details
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> GetHostingEnvironmentWebWorkerMetricsAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, bool? details = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentWebWorkerMetricsWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, details, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metric definitions for a multiRole pool of a hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static IPage<MetricDefinition> GetHostingEnvironmentMultiRoleMetricDefinitions(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetHostingEnvironmentMultiRoleMetricDefinitionsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metric definitions for a multiRole pool of a hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MetricDefinition>> GetHostingEnvironmentMultiRoleMetricDefinitionsAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentMultiRoleMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metric definitions for a worker pool of a hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            public static IPage<MetricDefinition> GetHostingEnvironmentWebWorkerMetricDefinitions(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName)
            {
                return operations.GetHostingEnvironmentWebWorkerMetricDefinitionsAsync(resourceGroupName, name, workerPoolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metric definitions for a worker pool of a hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MetricDefinition>> GetHostingEnvironmentWebWorkerMetricDefinitionsAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentWebWorkerMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get usages for a multiRole pool of a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static IPage<Usage> GetHostingEnvironmentMultiRoleUsages(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetHostingEnvironmentMultiRoleUsagesAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get usages for a multiRole pool of a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Usage>> GetHostingEnvironmentMultiRoleUsagesAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentMultiRoleUsagesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get usages for a worker pool of a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            public static IPage<Usage> GetHostingEnvironmentWebWorkerUsages(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName)
            {
                return operations.GetHostingEnvironmentWebWorkerUsagesAsync(resourceGroupName, name, workerPoolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get usages for a worker pool of a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Usage>> GetHostingEnvironmentWebWorkerUsagesAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentWebWorkerUsagesWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all sites on the hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='propertiesToInclude'>
            /// Comma separated list of site properties to include
            /// </param>
            public static IPage<Site> GetHostingEnvironmentSites(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string propertiesToInclude = default(string))
            {
                return operations.GetHostingEnvironmentSitesAsync(resourceGroupName, name, propertiesToInclude).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all sites on the hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='propertiesToInclude'>
            /// Comma separated list of site properties to include
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> GetHostingEnvironmentSitesAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string propertiesToInclude = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentSitesWithHttpMessagesAsync(resourceGroupName, name, propertiesToInclude, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all serverfarms (App Service Plans) on the hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static IPage<ServerFarmWithRichSku> GetHostingEnvironmentWebHostingPlans(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetHostingEnvironmentWebHostingPlansAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all serverfarms (App Service Plans) on the hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ServerFarmWithRichSku>> GetHostingEnvironmentWebHostingPlansAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentWebHostingPlansWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all serverfarms (App Service Plans) on the hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static IPage<ServerFarmWithRichSku> GetHostingEnvironmentServerFarms(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetHostingEnvironmentServerFarmsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all serverfarms (App Service Plans) on the hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ServerFarmWithRichSku>> GetHostingEnvironmentServerFarmsAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentServerFarmsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all multi role pools
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static IPage<WorkerPool> GetMultiRolePools(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetMultiRolePoolsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all multi role pools
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkerPool>> GetMultiRolePoolsAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMultiRolePoolsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get properties of a multiRole pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static WorkerPool GetMultiRolePool(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetMultiRolePoolAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get properties of a multiRole pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPool> GetMultiRolePoolAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMultiRolePoolWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a multiRole pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='multiRolePoolEnvelope'>
            /// Properties of multiRole pool
            /// </param>
            public static WorkerPool CreateOrUpdateMultiRolePool(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, WorkerPool multiRolePoolEnvelope)
            {
                return operations.CreateOrUpdateMultiRolePoolAsync(resourceGroupName, name, multiRolePoolEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a multiRole pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='multiRolePoolEnvelope'>
            /// Properties of multiRole pool
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPool> CreateOrUpdateMultiRolePoolAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, WorkerPool multiRolePoolEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateMultiRolePoolWithHttpMessagesAsync(resourceGroupName, name, multiRolePoolEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get available skus for scaling a multiRole pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static IPage<SkuInfo> GetMultiRolePoolSkus(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetMultiRolePoolSkusAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get available skus for scaling a multiRole pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SkuInfo>> GetMultiRolePoolSkusAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMultiRolePoolSkusWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all worker pools
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static IPage<WorkerPool> GetWorkerPools(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.GetWorkerPoolsAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all worker pools
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkerPool>> GetWorkerPoolsAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkerPoolsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get properties of a worker pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            public static WorkerPool GetWorkerPool(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName)
            {
                return operations.GetWorkerPoolAsync(resourceGroupName, name, workerPoolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get properties of a worker pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPool> GetWorkerPoolAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkerPoolWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a worker pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='workerPoolEnvelope'>
            /// Properties of worker pool
            /// </param>
            public static WorkerPool CreateOrUpdateWorkerPool(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, WorkerPool workerPoolEnvelope)
            {
                return operations.CreateOrUpdateWorkerPoolAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a worker pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='workerPoolEnvelope'>
            /// Properties of worker pool
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPool> CreateOrUpdateWorkerPoolAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, WorkerPool workerPoolEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWorkerPoolWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get available skus for scaling a worker pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            public static IPage<SkuInfo> GetWorkerPoolSkus(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName)
            {
                return operations.GetWorkerPoolSkusAsync(resourceGroupName, name, workerPoolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get available skus for scaling a worker pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SkuInfo>> GetWorkerPoolSkusAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkerPoolSkusWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metrics for a specific instance of a worker pool of a
            /// hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='instance'>
            /// Name of instance in the worker pool
            /// </param>
            /// <param name='details'>
            /// Include instance details
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static object GetWorkerPoolInstanceMetrics(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, string instance, bool? details = default(bool?), string filter = default(string))
            {
                return operations.GetWorkerPoolInstanceMetricsAsync(resourceGroupName, name, workerPoolName, instance, details, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metrics for a specific instance of a worker pool of a
            /// hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='instance'>
            /// Name of instance in the worker pool
            /// </param>
            /// <param name='details'>
            /// Include instance details
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetWorkerPoolInstanceMetricsAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, string instance, bool? details = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkerPoolInstanceMetricsWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, instance, details, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metric definitions for a specific instance of a worker pool of a
            /// hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='instance'>
            /// Name of instance in the worker pool
            /// </param>
            public static object GetWorkerPoolInstanceMetricDefinitions(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, string instance)
            {
                return operations.GetWorkerPoolInstanceMetricDefinitionsAsync(resourceGroupName, name, workerPoolName, instance).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metric definitions for a specific instance of a worker pool of a
            /// hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='instance'>
            /// Name of instance in the worker pool
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetWorkerPoolInstanceMetricDefinitionsAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, string instance, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkerPoolInstanceMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, instance, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metrics for a specific instance of a multiRole pool of a
            /// hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='instance'>
            /// Name of instance in the multiRole pool
            /// </param>
            /// <param name='details'>
            /// Include instance details
            /// </param>
            public static object GetMultiRolePoolInstanceMetrics(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string instance, bool? details = default(bool?))
            {
                return operations.GetMultiRolePoolInstanceMetricsAsync(resourceGroupName, name, instance, details).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metrics for a specific instance of a multiRole pool of a
            /// hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='instance'>
            /// Name of instance in the multiRole pool
            /// </param>
            /// <param name='details'>
            /// Include instance details
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetMultiRolePoolInstanceMetricsAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string instance, bool? details = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMultiRolePoolInstanceMetricsWithHttpMessagesAsync(resourceGroupName, name, instance, details, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metric definitions for a specific instance of a multiRole pool of a
            /// hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='instance'>
            /// Name of instance in the multiRole pool&amp;gt;
            /// </param>
            public static object GetMultiRolePoolInstanceMetricDefinitions(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string instance)
            {
                return operations.GetMultiRolePoolInstanceMetricDefinitionsAsync(resourceGroupName, name, instance).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metric definitions for a specific instance of a multiRole pool of a
            /// hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='instance'>
            /// Name of instance in the multiRole pool&amp;gt;
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetMultiRolePoolInstanceMetricDefinitionsAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string instance, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMultiRolePoolInstanceMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, instance, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Suspends the hostingEnvironment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static IPage<Site> SuspendHostingEnvironment(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.SuspendHostingEnvironmentAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Suspends the hostingEnvironment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> SuspendHostingEnvironmentAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SuspendHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resumes the hostingEnvironment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static IPage<Site> ResumeHostingEnvironment(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.ResumeHostingEnvironmentAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resumes the hostingEnvironment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> ResumeHostingEnvironmentAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResumeHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='hostingEnvironmentEnvelope'>
            /// Properties of hostingEnvironment (App Service Environment)
            /// </param>
            public static HostingEnvironment BeginCreateOrUpdateHostingEnvironment(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, HostingEnvironment hostingEnvironmentEnvelope)
            {
                return operations.BeginCreateOrUpdateHostingEnvironmentAsync(resourceGroupName, name, hostingEnvironmentEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='hostingEnvironmentEnvelope'>
            /// Properties of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostingEnvironment> BeginCreateOrUpdateHostingEnvironmentAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, HostingEnvironment hostingEnvironmentEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, name, hostingEnvironmentEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='forceDelete'>
            /// Delete even if the hostingEnvironment (App Service Environment) contains
            /// resources
            /// </param>
            public static object BeginDeleteHostingEnvironment(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, bool? forceDelete = default(bool?))
            {
                return operations.BeginDeleteHostingEnvironmentAsync(resourceGroupName, name, forceDelete).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='forceDelete'>
            /// Delete even if the hostingEnvironment (App Service Environment) contains
            /// resources
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BeginDeleteHostingEnvironmentAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, bool? forceDelete = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, name, forceDelete, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a multiRole pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='multiRolePoolEnvelope'>
            /// Properties of multiRole pool
            /// </param>
            public static WorkerPool BeginCreateOrUpdateMultiRolePool(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, WorkerPool multiRolePoolEnvelope)
            {
                return operations.BeginCreateOrUpdateMultiRolePoolAsync(resourceGroupName, name, multiRolePoolEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a multiRole pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='multiRolePoolEnvelope'>
            /// Properties of multiRole pool
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPool> BeginCreateOrUpdateMultiRolePoolAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, WorkerPool multiRolePoolEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateMultiRolePoolWithHttpMessagesAsync(resourceGroupName, name, multiRolePoolEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a worker pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='workerPoolEnvelope'>
            /// Properties of worker pool
            /// </param>
            public static WorkerPool BeginCreateOrUpdateWorkerPool(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, WorkerPool workerPoolEnvelope)
            {
                return operations.BeginCreateOrUpdateWorkerPoolAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a worker pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='workerPoolEnvelope'>
            /// Properties of worker pool
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPool> BeginCreateOrUpdateWorkerPoolAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, WorkerPool workerPoolEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWorkerPoolWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Suspends the hostingEnvironment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static IPage<Site> BeginSuspendHostingEnvironment(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.BeginSuspendHostingEnvironmentAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Suspends the hostingEnvironment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> BeginSuspendHostingEnvironmentAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginSuspendHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resumes the hostingEnvironment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static IPage<Site> BeginResumeHostingEnvironment(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return operations.BeginResumeHostingEnvironmentAsync(resourceGroupName, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resumes the hostingEnvironment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> BeginResumeHostingEnvironmentAsync(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginResumeHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get used, available, and total worker capacity for hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<StampCapacity> GetHostingEnvironmentCapacitiesNext(this IHostingEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.GetHostingEnvironmentCapacitiesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get used, available, and total worker capacity for hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StampCapacity>> GetHostingEnvironmentCapacitiesNextAsync(this IHostingEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentCapacitiesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all hostingEnvironments (App Service Environments) in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<HostingEnvironment> GetHostingEnvironmentsNext(this IHostingEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.GetHostingEnvironmentsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all hostingEnvironments (App Service Environments) in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HostingEnvironment>> GetHostingEnvironmentsNextAsync(this IHostingEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get global metrics of hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ResourceMetric> GetHostingEnvironmentMetricsNext(this IHostingEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.GetHostingEnvironmentMetricsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get global metrics of hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> GetHostingEnvironmentMetricsNextAsync(this IHostingEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentMetricsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get global usages of hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<CsmUsageQuota> GetHostingEnvironmentUsagesNext(this IHostingEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.GetHostingEnvironmentUsagesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get global usages of hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CsmUsageQuota>> GetHostingEnvironmentUsagesNextAsync(this IHostingEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentUsagesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metrics for a multiRole pool of a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ResourceMetric> GetHostingEnvironmentMultiRoleMetricsNext(this IHostingEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.GetHostingEnvironmentMultiRoleMetricsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metrics for a multiRole pool of a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> GetHostingEnvironmentMultiRoleMetricsNextAsync(this IHostingEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentMultiRoleMetricsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metrics for a worker pool of a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ResourceMetric> GetHostingEnvironmentWebWorkerMetricsNext(this IHostingEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.GetHostingEnvironmentWebWorkerMetricsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metrics for a worker pool of a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> GetHostingEnvironmentWebWorkerMetricsNextAsync(this IHostingEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentWebWorkerMetricsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metric definitions for a multiRole pool of a hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<MetricDefinition> GetHostingEnvironmentMultiRoleMetricDefinitionsNext(this IHostingEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.GetHostingEnvironmentMultiRoleMetricDefinitionsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metric definitions for a multiRole pool of a hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MetricDefinition>> GetHostingEnvironmentMultiRoleMetricDefinitionsNextAsync(this IHostingEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentMultiRoleMetricDefinitionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metric definitions for a worker pool of a hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<MetricDefinition> GetHostingEnvironmentWebWorkerMetricDefinitionsNext(this IHostingEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.GetHostingEnvironmentWebWorkerMetricDefinitionsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metric definitions for a worker pool of a hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MetricDefinition>> GetHostingEnvironmentWebWorkerMetricDefinitionsNextAsync(this IHostingEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentWebWorkerMetricDefinitionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get usages for a multiRole pool of a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Usage> GetHostingEnvironmentMultiRoleUsagesNext(this IHostingEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.GetHostingEnvironmentMultiRoleUsagesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get usages for a multiRole pool of a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Usage>> GetHostingEnvironmentMultiRoleUsagesNextAsync(this IHostingEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentMultiRoleUsagesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get usages for a worker pool of a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Usage> GetHostingEnvironmentWebWorkerUsagesNext(this IHostingEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.GetHostingEnvironmentWebWorkerUsagesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get usages for a worker pool of a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Usage>> GetHostingEnvironmentWebWorkerUsagesNextAsync(this IHostingEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentWebWorkerUsagesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all sites on the hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Site> GetHostingEnvironmentSitesNext(this IHostingEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.GetHostingEnvironmentSitesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all sites on the hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> GetHostingEnvironmentSitesNextAsync(this IHostingEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentSitesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all serverfarms (App Service Plans) on the hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ServerFarmWithRichSku> GetHostingEnvironmentWebHostingPlansNext(this IHostingEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.GetHostingEnvironmentWebHostingPlansNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all serverfarms (App Service Plans) on the hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ServerFarmWithRichSku>> GetHostingEnvironmentWebHostingPlansNextAsync(this IHostingEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentWebHostingPlansNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all serverfarms (App Service Plans) on the hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ServerFarmWithRichSku> GetHostingEnvironmentServerFarmsNext(this IHostingEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.GetHostingEnvironmentServerFarmsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all serverfarms (App Service Plans) on the hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ServerFarmWithRichSku>> GetHostingEnvironmentServerFarmsNextAsync(this IHostingEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentServerFarmsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all multi role pools
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<WorkerPool> GetMultiRolePoolsNext(this IHostingEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.GetMultiRolePoolsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all multi role pools
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkerPool>> GetMultiRolePoolsNextAsync(this IHostingEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMultiRolePoolsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get available skus for scaling a multiRole pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SkuInfo> GetMultiRolePoolSkusNext(this IHostingEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.GetMultiRolePoolSkusNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get available skus for scaling a multiRole pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SkuInfo>> GetMultiRolePoolSkusNextAsync(this IHostingEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMultiRolePoolSkusNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all worker pools
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<WorkerPool> GetWorkerPoolsNext(this IHostingEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.GetWorkerPoolsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all worker pools
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkerPool>> GetWorkerPoolsNextAsync(this IHostingEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkerPoolsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get available skus for scaling a worker pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SkuInfo> GetWorkerPoolSkusNext(this IHostingEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.GetWorkerPoolSkusNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get available skus for scaling a worker pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SkuInfo>> GetWorkerPoolSkusNextAsync(this IHostingEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkerPoolSkusNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Suspends the hostingEnvironment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Site> SuspendHostingEnvironmentNext(this IHostingEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.SuspendHostingEnvironmentNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Suspends the hostingEnvironment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> SuspendHostingEnvironmentNextAsync(this IHostingEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SuspendHostingEnvironmentNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resumes the hostingEnvironment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Site> ResumeHostingEnvironmentNext(this IHostingEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.ResumeHostingEnvironmentNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resumes the hostingEnvironment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> ResumeHostingEnvironmentNextAsync(this IHostingEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResumeHostingEnvironmentNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Suspends the hostingEnvironment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Site> BeginSuspendHostingEnvironmentNext(this IHostingEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.BeginSuspendHostingEnvironmentNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Suspends the hostingEnvironment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> BeginSuspendHostingEnvironmentNextAsync(this IHostingEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginSuspendHostingEnvironmentNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resumes the hostingEnvironment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Site> BeginResumeHostingEnvironmentNext(this IHostingEnvironmentsOperations operations, string nextPageLink)
            {
                return operations.BeginResumeHostingEnvironmentNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resumes the hostingEnvironment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> BeginResumeHostingEnvironmentNextAsync(this IHostingEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginResumeHostingEnvironmentNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
