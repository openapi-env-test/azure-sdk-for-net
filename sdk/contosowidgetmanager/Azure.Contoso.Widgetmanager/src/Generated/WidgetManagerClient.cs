// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Contoso.Widgetmanager
{
    // Data plane generated client.
    /// <summary> The WidgetManager service client. </summary>
    public partial class WidgetManagerClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of WidgetManagerClient. </summary>
        public WidgetManagerClient() : this(new WidgetManagerClientOptions())
        {
        }

        /// <summary> Initializes a new instance of WidgetManagerClient. </summary>
        /// <param name="options"> The options for configuring the client. </param>
        public WidgetManagerClient(WidgetManagerClientOptions options)
        {
            options ??= new WidgetManagerClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _apiVersion = options.Version;
        }

        /// <summary> Fetch a Widget by name. </summary>
        /// <param name="widgetName"> The widget name. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="widgetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="widgetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/WidgetManagerClient.xml" path="doc/members/member[@name='GetWidgetAsync(String,RequestContext)']/*" />
        public virtual async Task<Response> GetWidgetAsync(string widgetName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(widgetName, nameof(widgetName));

            using var scope = ClientDiagnostics.CreateScope("WidgetManagerClient.GetWidget");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetWidgetRequest(widgetName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Fetch a Widget by name. </summary>
        /// <param name="widgetName"> The widget name. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="widgetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="widgetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/WidgetManagerClient.xml" path="doc/members/member[@name='GetWidget(String,RequestContext)']/*" />
        public virtual Response GetWidget(string widgetName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(widgetName, nameof(widgetName));

            using var scope = ClientDiagnostics.CreateScope("WidgetManagerClient.GetWidget");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetWidgetRequest(widgetName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List Widget resources. </summary>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="select"> Select the specified fields to be included in the response. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/WidgetManagerClient.xml" path="doc/members/member[@name='GetWidgetsAsync(Int32,Int32,Int32,IEnumerable,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetWidgetsAsync(int? maxCount = null, int? skip = null, int? maxpagesize = null, IEnumerable<string> select = null, RequestContext context = null)
        {
            return GetWidgetsImplementationAsync("WidgetManagerClient.GetWidgets", maxCount, skip, maxpagesize, select, context);
        }

        private AsyncPageable<BinaryData> GetWidgetsImplementationAsync(string diagnosticsScopeName, int? maxCount, int? skip, int? maxpagesize, IEnumerable<string> select, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetWidgetsRequest(maxCount, skip, maxpagesize, select, context)
                        : CreateGetWidgetsNextPageRequest(nextLink, maxCount, skip, maxpagesize, select, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> List Widget resources. </summary>
        /// <param name="maxCount"> The number of result items to return. </param>
        /// <param name="skip"> The number of result items to skip. </param>
        /// <param name="maxpagesize"> The maximum number of result items per page. </param>
        /// <param name="select"> Select the specified fields to be included in the response. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/WidgetManagerClient.xml" path="doc/members/member[@name='GetWidgets(Int32,Int32,Int32,IEnumerable,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetWidgets(int? maxCount = null, int? skip = null, int? maxpagesize = null, IEnumerable<string> select = null, RequestContext context = null)
        {
            return GetWidgetsImplementation("WidgetManagerClient.GetWidgets", maxCount, skip, maxpagesize, select, context);
        }

        private Pageable<BinaryData> GetWidgetsImplementation(string diagnosticsScopeName, int? maxCount, int? skip, int? maxpagesize, IEnumerable<string> select, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetWidgetsRequest(maxCount, skip, maxpagesize, select, context)
                        : CreateGetWidgetsNextPageRequest(nextLink, maxCount, skip, maxpagesize, select, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Creates or updates a Widget asynchronously. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="widgetName"> The widget name. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="widgetName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="widgetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <include file="Docs/WidgetManagerClient.xml" path="doc/members/member[@name='CreateOrUpdateWidgetAsync(WaitUntil,String,RequestContent,RequestContext)']/*" />
        public virtual async Task<Operation<BinaryData>> CreateOrUpdateWidgetAsync(WaitUntil waitUntil, string widgetName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(widgetName, nameof(widgetName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("WidgetManagerClient.CreateOrUpdateWidget");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateWidgetRequest(widgetName, content, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "WidgetManagerClient.CreateOrUpdateWidget", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a Widget asynchronously. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="widgetName"> The widget name. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="widgetName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="widgetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <include file="Docs/WidgetManagerClient.xml" path="doc/members/member[@name='CreateOrUpdateWidget(WaitUntil,String,RequestContent,RequestContext)']/*" />
        public virtual Operation<BinaryData> CreateOrUpdateWidget(WaitUntil waitUntil, string widgetName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(widgetName, nameof(widgetName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("WidgetManagerClient.CreateOrUpdateWidget");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateWidgetRequest(widgetName, content, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "WidgetManagerClient.CreateOrUpdateWidget", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a Widget asynchronously. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="widgetName"> The widget name. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="widgetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="widgetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <include file="Docs/WidgetManagerClient.xml" path="doc/members/member[@name='DeleteWidgetAsync(WaitUntil,String,RequestContext)']/*" />
        public virtual async Task<Operation<BinaryData>> DeleteWidgetAsync(WaitUntil waitUntil, string widgetName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(widgetName, nameof(widgetName));

            using var scope = ClientDiagnostics.CreateScope("WidgetManagerClient.DeleteWidget");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteWidgetRequest(widgetName, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "WidgetManagerClient.DeleteWidget", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a Widget asynchronously. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="widgetName"> The widget name. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="widgetName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="widgetName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <include file="Docs/WidgetManagerClient.xml" path="doc/members/member[@name='DeleteWidget(WaitUntil,String,RequestContext)']/*" />
        public virtual Operation<BinaryData> DeleteWidget(WaitUntil waitUntil, string widgetName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(widgetName, nameof(widgetName));

            using var scope = ClientDiagnostics.CreateScope("WidgetManagerClient.DeleteWidget");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteWidgetRequest(widgetName, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "WidgetManagerClient.DeleteWidget", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetWidgetRequest(string widgetName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/widgets/", false);
            uri.AppendPath(widgetName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateWidgetRequest(string widgetName, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/widgets/", false);
            uri.AppendPath(widgetName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/merge-patch+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteWidgetRequest(string widgetName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/widgets/", false);
            uri.AppendPath(widgetName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetWidgetsRequest(int? maxCount, int? skip, int? maxpagesize, IEnumerable<string> select, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/widgets", false);
            if (maxCount != null)
            {
                uri.AppendQuery("top", maxCount.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, true);
            }
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, true);
            }
            if (select != null)
            {
                uri.AppendQuery("select", select, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetWidgetsNextPageRequest(string nextLink, int? maxCount, int? skip, int? maxpagesize, IEnumerable<string> select, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
    }
}
