// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Releaseplannertest
{
    /// <summary>
    /// A class representing a collection of <see cref="ReleaseplannertestPrivateLinkResource" /> and their operations.
    /// Each <see cref="ReleaseplannertestPrivateLinkResource" /> in the collection will belong to the same instance of <see cref="FarmBeatResource" />.
    /// To get a <see cref="ReleaseplannertestPrivateLinkResourceCollection" /> instance call the GetReleaseplannertestPrivateLinkResources method from an instance of <see cref="FarmBeatResource" />.
    /// </summary>
    public partial class ReleaseplannertestPrivateLinkResourceCollection : ArmCollection, IEnumerable<ReleaseplannertestPrivateLinkResource>, IAsyncEnumerable<ReleaseplannertestPrivateLinkResource>
    {
        private readonly ClientDiagnostics _releaseplannertestPrivateLinkResourcePrivateLinkResourcesClientDiagnostics;
        private readonly PrivateLinkResourcesRestOperations _releaseplannertestPrivateLinkResourcePrivateLinkResourcesRestClient;

        /// <summary> Initializes a new instance of the <see cref="ReleaseplannertestPrivateLinkResourceCollection"/> class for mocking. </summary>
        protected ReleaseplannertestPrivateLinkResourceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ReleaseplannertestPrivateLinkResourceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal ReleaseplannertestPrivateLinkResourceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _releaseplannertestPrivateLinkResourcePrivateLinkResourcesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Releaseplannertest", ReleaseplannertestPrivateLinkResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ReleaseplannertestPrivateLinkResource.ResourceType, out string releaseplannertestPrivateLinkResourcePrivateLinkResourcesApiVersion);
            _releaseplannertestPrivateLinkResourcePrivateLinkResourcesRestClient = new PrivateLinkResourcesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, releaseplannertestPrivateLinkResourcePrivateLinkResourcesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != FarmBeatResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, FarmBeatResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get Private link resource object.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/privateLinkResources/{subResourceName}
        /// Operation Id: PrivateLinkResources_Get
        /// </summary>
        /// <param name="subResourceName"> Sub resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="subResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subResourceName"/> is null. </exception>
        public virtual async Task<Response<ReleaseplannertestPrivateLinkResource>> GetAsync(string subResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subResourceName, nameof(subResourceName));

            using var scope = _releaseplannertestPrivateLinkResourcePrivateLinkResourcesClientDiagnostics.CreateScope("ReleaseplannertestPrivateLinkResourceCollection.Get");
            scope.Start();
            try
            {
                var response = await _releaseplannertestPrivateLinkResourcePrivateLinkResourcesRestClient.GetAsync(Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name, subResourceName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ReleaseplannertestPrivateLinkResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Private link resource object.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/privateLinkResources/{subResourceName}
        /// Operation Id: PrivateLinkResources_Get
        /// </summary>
        /// <param name="subResourceName"> Sub resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="subResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subResourceName"/> is null. </exception>
        public virtual Response<ReleaseplannertestPrivateLinkResource> Get(string subResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subResourceName, nameof(subResourceName));

            using var scope = _releaseplannertestPrivateLinkResourcePrivateLinkResourcesClientDiagnostics.CreateScope("ReleaseplannertestPrivateLinkResourceCollection.Get");
            scope.Start();
            try
            {
                var response = _releaseplannertestPrivateLinkResourcePrivateLinkResourcesRestClient.Get(Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name, subResourceName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ReleaseplannertestPrivateLinkResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get list of Private link resources.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/privateLinkResources
        /// Operation Id: PrivateLinkResources_ListByResource
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ReleaseplannertestPrivateLinkResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ReleaseplannertestPrivateLinkResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ReleaseplannertestPrivateLinkResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _releaseplannertestPrivateLinkResourcePrivateLinkResourcesClientDiagnostics.CreateScope("ReleaseplannertestPrivateLinkResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _releaseplannertestPrivateLinkResourcePrivateLinkResourcesRestClient.ListByResourceAsync(Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ReleaseplannertestPrivateLinkResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Get list of Private link resources.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/privateLinkResources
        /// Operation Id: PrivateLinkResources_ListByResource
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ReleaseplannertestPrivateLinkResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ReleaseplannertestPrivateLinkResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<ReleaseplannertestPrivateLinkResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _releaseplannertestPrivateLinkResourcePrivateLinkResourcesClientDiagnostics.CreateScope("ReleaseplannertestPrivateLinkResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _releaseplannertestPrivateLinkResourcePrivateLinkResourcesRestClient.ListByResource(Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ReleaseplannertestPrivateLinkResource(Client, value)), null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/privateLinkResources/{subResourceName}
        /// Operation Id: PrivateLinkResources_Get
        /// </summary>
        /// <param name="subResourceName"> Sub resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="subResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subResourceName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string subResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subResourceName, nameof(subResourceName));

            using var scope = _releaseplannertestPrivateLinkResourcePrivateLinkResourcesClientDiagnostics.CreateScope("ReleaseplannertestPrivateLinkResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _releaseplannertestPrivateLinkResourcePrivateLinkResourcesRestClient.GetAsync(Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name, subResourceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/privateLinkResources/{subResourceName}
        /// Operation Id: PrivateLinkResources_Get
        /// </summary>
        /// <param name="subResourceName"> Sub resource name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="subResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="subResourceName"/> is null. </exception>
        public virtual Response<bool> Exists(string subResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subResourceName, nameof(subResourceName));

            using var scope = _releaseplannertestPrivateLinkResourcePrivateLinkResourcesClientDiagnostics.CreateScope("ReleaseplannertestPrivateLinkResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = _releaseplannertestPrivateLinkResourcePrivateLinkResourcesRestClient.Get(Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name, subResourceName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ReleaseplannertestPrivateLinkResource> IEnumerable<ReleaseplannertestPrivateLinkResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ReleaseplannertestPrivateLinkResource> IAsyncEnumerable<ReleaseplannertestPrivateLinkResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
