// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Releaseplannertest.Models
{
    public partial class FarmBeatsSolutionProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(MarketplaceOfferDetails))
            {
                writer.WritePropertyName("marketplaceOfferDetails");
                writer.WriteObjectValue(MarketplaceOfferDetails);
            }
            writer.WriteEndObject();
        }

        internal static FarmBeatsSolutionProperties DeserializeFarmBeatsSolutionProperties(JsonElement element)
        {
            Optional<string> partnerId = default;
            Optional<string> partnerTenantId = default;
            Optional<IReadOnlyList<string>> dataAccessScopes = default;
            Optional<MarketplaceOfferDetails> marketplaceOfferDetails = default;
            Optional<IReadOnlyList<ResourceParameter>> inputParametersValidationScopes = default;
            Optional<IReadOnlyDictionary<string, BinaryData>> openApiSpecsDictionary = default;
            Optional<IReadOnlyDictionary<string, SolutionEvaluatedOutput>> evaluatedOutputsDictionary = default;
            Optional<Guid> accessFBApplicationId = default;
            Optional<Guid> saaSApplicationId = default;
            Optional<IReadOnlyList<string>> actionIds = default;
            Optional<string> roleId = default;
            Optional<string> roleName = default;
            Optional<string> accessFBApplicationName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("partnerId"))
                {
                    partnerId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("partnerTenantId"))
                {
                    partnerTenantId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dataAccessScopes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    dataAccessScopes = array;
                    continue;
                }
                if (property.NameEquals("marketplaceOfferDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    marketplaceOfferDetails = MarketplaceOfferDetails.DeserializeMarketplaceOfferDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("inputParametersValidationScopes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ResourceParameter> array = new List<ResourceParameter>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ResourceParameter.DeserializeResourceParameter(item));
                    }
                    inputParametersValidationScopes = array;
                    continue;
                }
                if (property.NameEquals("openApiSpecsDictionary"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                    }
                    openApiSpecsDictionary = dictionary;
                    continue;
                }
                if (property.NameEquals("evaluatedOutputsDictionary"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, SolutionEvaluatedOutput> dictionary = new Dictionary<string, SolutionEvaluatedOutput>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, SolutionEvaluatedOutput.DeserializeSolutionEvaluatedOutput(property0.Value));
                    }
                    evaluatedOutputsDictionary = dictionary;
                    continue;
                }
                if (property.NameEquals("accessFBApplicationId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    accessFBApplicationId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("saaSApplicationId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    saaSApplicationId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("actionIds"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    actionIds = array;
                    continue;
                }
                if (property.NameEquals("roleId"))
                {
                    roleId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("roleName"))
                {
                    roleName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("accessFBApplicationName"))
                {
                    accessFBApplicationName = property.Value.GetString();
                    continue;
                }
            }
            return new FarmBeatsSolutionProperties(partnerId.Value, partnerTenantId.Value, Optional.ToList(dataAccessScopes), marketplaceOfferDetails.Value, Optional.ToList(inputParametersValidationScopes), Optional.ToDictionary(openApiSpecsDictionary), Optional.ToDictionary(evaluatedOutputsDictionary), Optional.ToNullable(accessFBApplicationId), Optional.ToNullable(saaSApplicationId), Optional.ToList(actionIds), roleId.Value, roleName.Value, accessFBApplicationName.Value);
        }
    }
}
