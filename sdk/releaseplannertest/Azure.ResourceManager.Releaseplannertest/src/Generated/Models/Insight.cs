// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Releaseplannertest.Models
{
    /// <summary> The Insight. </summary>
    public partial class Insight : ResourceData
    {
        /// <summary> Initializes a new instance of Insight. </summary>
        internal Insight()
        {
            Measures = new ChangeTrackingDictionary<string, Measure>();
            Properties = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of Insight. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="farmerId"></param>
        /// <param name="modelId"></param>
        /// <param name="resourceId"></param>
        /// <param name="modelVersion"></param>
        /// <param name="insightStartOn"></param>
        /// <param name="insightEndOn"></param>
        /// <param name="measures"> Dictionary of &lt;Measure&gt;. </param>
        /// <param name="status"></param>
        /// <param name="createdOn"></param>
        /// <param name="modifiedOn"></param>
        /// <param name="eTag"></param>
        /// <param name="description"></param>
        /// <param name="properties"> Dictionary of &lt;any&gt;. </param>
        internal Insight(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string farmerId, string modelId, string resourceId, string modelVersion, DateTimeOffset? insightStartOn, DateTimeOffset? insightEndOn, IReadOnlyDictionary<string, Measure> measures, string status, DateTimeOffset? createdOn, DateTimeOffset? modifiedOn, ETag? eTag, string description, IReadOnlyDictionary<string, BinaryData> properties) : base(id, name, resourceType, systemData)
        {
            FarmerId = farmerId;
            ModelId = modelId;
            ResourceId = resourceId;
            ModelVersion = modelVersion;
            InsightStartOn = insightStartOn;
            InsightEndOn = insightEndOn;
            Measures = measures;
            Status = status;
            CreatedOn = createdOn;
            ModifiedOn = modifiedOn;
            ETag = eTag;
            Description = description;
            Properties = properties;
        }

        /// <summary> Gets the farmer id. </summary>
        public string FarmerId { get; }
        /// <summary> Gets the model id. </summary>
        public string ModelId { get; }
        /// <summary> Gets the resource id. </summary>
        public string ResourceId { get; }
        /// <summary> Gets the model version. </summary>
        public string ModelVersion { get; }
        /// <summary> Gets the insight start on. </summary>
        public DateTimeOffset? InsightStartOn { get; }
        /// <summary> Gets the insight end on. </summary>
        public DateTimeOffset? InsightEndOn { get; }
        /// <summary> Dictionary of &lt;Measure&gt;. </summary>
        public IReadOnlyDictionary<string, Measure> Measures { get; }
        /// <summary> Gets the status. </summary>
        public string Status { get; }
        /// <summary> Gets the created on. </summary>
        public DateTimeOffset? CreatedOn { get; }
        /// <summary> Gets the modified on. </summary>
        public DateTimeOffset? ModifiedOn { get; }
        /// <summary> Gets the e tag. </summary>
        public ETag? ETag { get; }
        /// <summary> Gets the description. </summary>
        public string Description { get; }
        /// <summary>
        /// Dictionary of &lt;any&gt;
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyDictionary<string, BinaryData> Properties { get; }
    }
}
