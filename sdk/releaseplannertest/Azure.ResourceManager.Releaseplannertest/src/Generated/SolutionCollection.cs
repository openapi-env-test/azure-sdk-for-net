// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Releaseplannertest.Models;

namespace Azure.ResourceManager.Releaseplannertest
{
    /// <summary>
    /// A class representing a collection of <see cref="SolutionResource" /> and their operations.
    /// Each <see cref="SolutionResource" /> in the collection will belong to the same instance of <see cref="FarmBeatResource" />.
    /// To get a <see cref="SolutionCollection" /> instance call the GetSolutions method from an instance of <see cref="FarmBeatResource" />.
    /// </summary>
    public partial class SolutionCollection : ArmCollection, IEnumerable<SolutionResource>, IAsyncEnumerable<SolutionResource>
    {
        private readonly ClientDiagnostics _solutionClientDiagnostics;
        private readonly SolutionsRestOperations _solutionRestClient;

        /// <summary> Initializes a new instance of the <see cref="SolutionCollection"/> class for mocking. </summary>
        protected SolutionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SolutionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal SolutionCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _solutionClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Releaseplannertest", SolutionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(SolutionResource.ResourceType, out string solutionApiVersion);
            _solutionRestClient = new SolutionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, solutionApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != FarmBeatResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, FarmBeatResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Install Or Update Solution.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/solutions/{solutionId}
        /// Operation Id: Solutions_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="solutionId"> Solution Id of the solution. </param>
        /// <param name="content"> Solution resource request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionId"/> or <paramref name="content"/> is null. </exception>
        public virtual async Task<ArmOperation<SolutionResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string solutionId, SolutionCreateOrUpdateContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionId, nameof(solutionId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _solutionClientDiagnostics.CreateScope("SolutionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _solutionRestClient.CreateOrUpdateAsync(Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name, solutionId, content, cancellationToken).ConfigureAwait(false);
                var operation = new ReleaseplannertestArmOperation<SolutionResource>(Response.FromValue(new SolutionResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Install Or Update Solution.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/solutions/{solutionId}
        /// Operation Id: Solutions_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="solutionId"> Solution Id of the solution. </param>
        /// <param name="content"> Solution resource request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionId"/> or <paramref name="content"/> is null. </exception>
        public virtual ArmOperation<SolutionResource> CreateOrUpdate(WaitUntil waitUntil, string solutionId, SolutionCreateOrUpdateContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionId, nameof(solutionId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _solutionClientDiagnostics.CreateScope("SolutionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _solutionRestClient.CreateOrUpdate(Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name, solutionId, content, cancellationToken);
                var operation = new ReleaseplannertestArmOperation<SolutionResource>(Response.FromValue(new SolutionResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get installed Solution details by Solution id.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/solutions/{solutionId}
        /// Operation Id: Solutions_Get
        /// </summary>
        /// <param name="solutionId"> Solution Id of the solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionId"/> is null. </exception>
        public virtual async Task<Response<SolutionResource>> GetAsync(string solutionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionId, nameof(solutionId));

            using var scope = _solutionClientDiagnostics.CreateScope("SolutionCollection.Get");
            scope.Start();
            try
            {
                var response = await _solutionRestClient.GetAsync(Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name, solutionId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SolutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get installed Solution details by Solution id.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/solutions/{solutionId}
        /// Operation Id: Solutions_Get
        /// </summary>
        /// <param name="solutionId"> Solution Id of the solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionId"/> is null. </exception>
        public virtual Response<SolutionResource> Get(string solutionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionId, nameof(solutionId));

            using var scope = _solutionClientDiagnostics.CreateScope("SolutionCollection.Get");
            scope.Start();
            try
            {
                var response = _solutionRestClient.Get(Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name, solutionId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SolutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get installed Solutions details.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/solutions
        /// Operation Id: Solutions_List
        /// </summary>
        /// <param name="solutionIds"> Installed Solution ids. </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SolutionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SolutionResource> GetAllAsync(IEnumerable<string> solutionIds = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<SolutionResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _solutionClientDiagnostics.CreateScope("SolutionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _solutionRestClient.ListAsync(Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name, solutionIds, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, pageSizeHint, skipToken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SolutionResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _solutionClientDiagnostics.CreateScope("SolutionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _solutionRestClient.ListNextPageAsync(nextLink, Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name, solutionIds, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, pageSizeHint, skipToken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get installed Solutions details.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/solutions
        /// Operation Id: Solutions_List
        /// </summary>
        /// <param name="solutionIds"> Installed Solution ids. </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SolutionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SolutionResource> GetAll(IEnumerable<string> solutionIds = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            Page<SolutionResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _solutionClientDiagnostics.CreateScope("SolutionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _solutionRestClient.List(Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name, solutionIds, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, pageSizeHint, skipToken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SolutionResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _solutionClientDiagnostics.CreateScope("SolutionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _solutionRestClient.ListNextPage(nextLink, Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name, solutionIds, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, pageSizeHint, skipToken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/solutions/{solutionId}
        /// Operation Id: Solutions_Get
        /// </summary>
        /// <param name="solutionId"> Solution Id of the solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string solutionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionId, nameof(solutionId));

            using var scope = _solutionClientDiagnostics.CreateScope("SolutionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _solutionRestClient.GetAsync(Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name, solutionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/solutions/{solutionId}
        /// Operation Id: Solutions_Get
        /// </summary>
        /// <param name="solutionId"> Solution Id of the solution. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionId"/> is null. </exception>
        public virtual Response<bool> Exists(string solutionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionId, nameof(solutionId));

            using var scope = _solutionClientDiagnostics.CreateScope("SolutionCollection.Exists");
            scope.Start();
            try
            {
                var response = _solutionRestClient.Get(Guid.Parse(Id.Parent.Parent.Name), Id.Parent.Name, Id.Name, solutionId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<SolutionResource> IEnumerable<SolutionResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<SolutionResource> IAsyncEnumerable<SolutionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
