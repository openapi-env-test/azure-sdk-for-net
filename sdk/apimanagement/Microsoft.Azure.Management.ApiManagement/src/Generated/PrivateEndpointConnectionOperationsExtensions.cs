// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PrivateEndpointConnectionOperations.
    /// </summary>
    public static partial class PrivateEndpointConnectionOperationsExtensions
    {
            /// <summary>
            /// Lists all private endpoint connections of the API Management service
            /// instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            public static IPage<RemotePrivateEndpointConnectionWrapper> ListByService(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string serviceName)
            {
                return operations.ListByServiceAsync(resourceGroupName, serviceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all private endpoint connections of the API Management service
            /// instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RemotePrivateEndpointConnectionWrapper>> ListByServiceAsync(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string serviceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByServiceWithHttpMessagesAsync(resourceGroupName, serviceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the details of the Private Endpoint Connection specified by its
            /// identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='privateEndpointConnectionName'>
            /// Name of the private endpoint connection.
            /// </param>
            public static RemotePrivateEndpointConnectionWrapper GetByName(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string serviceName, string privateEndpointConnectionName)
            {
                return operations.GetByNameAsync(resourceGroupName, serviceName, privateEndpointConnectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the details of the Private Endpoint Connection specified by its
            /// identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='privateEndpointConnectionName'>
            /// Name of the private endpoint connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RemotePrivateEndpointConnectionWrapper> GetByNameAsync(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string serviceName, string privateEndpointConnectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByNameWithHttpMessagesAsync(resourceGroupName, serviceName, privateEndpointConnectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new Private Endpoint Connection or updates an existing one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='privateEndpointConnectionName'>
            /// Name of the private endpoint connection.
            /// </param>
            /// <param name='privateEndpointConnectionRequest'>
            /// </param>
            public static PrivateEndpointConnectionRequestResponse CreateOrUpdate(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string serviceName, string privateEndpointConnectionName, PrivateEndpointConnectionRequest privateEndpointConnectionRequest)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, serviceName, privateEndpointConnectionName, privateEndpointConnectionRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new Private Endpoint Connection or updates an existing one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='privateEndpointConnectionName'>
            /// Name of the private endpoint connection.
            /// </param>
            /// <param name='privateEndpointConnectionRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PrivateEndpointConnectionRequestResponse> CreateOrUpdateAsync(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string serviceName, string privateEndpointConnectionName, PrivateEndpointConnectionRequest privateEndpointConnectionRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serviceName, privateEndpointConnectionName, privateEndpointConnectionRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified Private Endpoint Connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='privateEndpointConnectionName'>
            /// Name of the private endpoint connection.
            /// </param>
            public static void Delete(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string serviceName, string privateEndpointConnectionName)
            {
                operations.DeleteAsync(resourceGroupName, serviceName, privateEndpointConnectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified Private Endpoint Connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='privateEndpointConnectionName'>
            /// Name of the private endpoint connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string serviceName, string privateEndpointConnectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, serviceName, privateEndpointConnectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Description for Gets the private link resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            public static PrivateLinkGroupResources ListPrivateLinkResources(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string serviceName)
            {
                return operations.ListPrivateLinkResourcesAsync(resourceGroupName, serviceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Description for Gets the private link resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PrivateLinkGroupResources> ListPrivateLinkResourcesAsync(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string serviceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPrivateLinkResourcesWithHttpMessagesAsync(resourceGroupName, serviceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Description for Gets the private link resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='privateLinkSubResourceName'>
            /// Name of the private link resource.
            /// </param>
            public static PrivateLinkGroupResource GetPrivateLinkResource(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string serviceName, string privateLinkSubResourceName)
            {
                return operations.GetPrivateLinkResourceAsync(resourceGroupName, serviceName, privateLinkSubResourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Description for Gets the private link resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='privateLinkSubResourceName'>
            /// Name of the private link resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PrivateLinkGroupResource> GetPrivateLinkResourceAsync(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string serviceName, string privateLinkSubResourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPrivateLinkResourceWithHttpMessagesAsync(resourceGroupName, serviceName, privateLinkSubResourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new Private Endpoint Connection or updates an existing one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='privateEndpointConnectionName'>
            /// Name of the private endpoint connection.
            /// </param>
            /// <param name='privateEndpointConnectionRequest'>
            /// </param>
            public static PrivateEndpointConnectionRequestResponse BeginCreateOrUpdate(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string serviceName, string privateEndpointConnectionName, PrivateEndpointConnectionRequest privateEndpointConnectionRequest)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, serviceName, privateEndpointConnectionName, privateEndpointConnectionRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new Private Endpoint Connection or updates an existing one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='privateEndpointConnectionName'>
            /// Name of the private endpoint connection.
            /// </param>
            /// <param name='privateEndpointConnectionRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PrivateEndpointConnectionRequestResponse> BeginCreateOrUpdateAsync(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string serviceName, string privateEndpointConnectionName, PrivateEndpointConnectionRequest privateEndpointConnectionRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serviceName, privateEndpointConnectionName, privateEndpointConnectionRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified Private Endpoint Connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='privateEndpointConnectionName'>
            /// Name of the private endpoint connection.
            /// </param>
            public static void BeginDelete(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string serviceName, string privateEndpointConnectionName)
            {
                operations.BeginDeleteAsync(resourceGroupName, serviceName, privateEndpointConnectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified Private Endpoint Connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='privateEndpointConnectionName'>
            /// Name of the private endpoint connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string serviceName, string privateEndpointConnectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, serviceName, privateEndpointConnectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all private endpoint connections of the API Management service
            /// instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RemotePrivateEndpointConnectionWrapper> ListByServiceNext(this IPrivateEndpointConnectionOperations operations, string nextPageLink)
            {
                return operations.ListByServiceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all private endpoint connections of the API Management service
            /// instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RemotePrivateEndpointConnectionWrapper>> ListByServiceNextAsync(this IPrivateEndpointConnectionOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByServiceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
