// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.ApiManagement.Models
{
    /// <summary> The trip conditions of the circuit breaker. </summary>
    public partial class CircuitBreakerFailureCondition
    {
        /// <summary> Initializes a new instance of <see cref="CircuitBreakerFailureCondition"/>. </summary>
        public CircuitBreakerFailureCondition()
        {
            StatusCodeRanges = new ChangeTrackingList<FailureStatusCodeRange>();
            ErrorReasons = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="CircuitBreakerFailureCondition"/>. </summary>
        /// <param name="count"> The threshold for opening the circuit. </param>
        /// <param name="percentage"> The threshold for opening the circuit. </param>
        /// <param name="interval"> The interval during which the failures are counted. </param>
        /// <param name="statusCodeRanges"> The status code ranges which are considered as failure. </param>
        /// <param name="errorReasons"> The error reasons which are considered as failure. </param>
        internal CircuitBreakerFailureCondition(long? count, long? percentage, TimeSpan? interval, IList<FailureStatusCodeRange> statusCodeRanges, IList<string> errorReasons)
        {
            Count = count;
            Percentage = percentage;
            Interval = interval;
            StatusCodeRanges = statusCodeRanges;
            ErrorReasons = errorReasons;
        }

        /// <summary> The threshold for opening the circuit. </summary>
        public long? Count { get; set; }
        /// <summary> The threshold for opening the circuit. </summary>
        public long? Percentage { get; set; }
        /// <summary> The interval during which the failures are counted. </summary>
        public TimeSpan? Interval { get; set; }
        /// <summary> The status code ranges which are considered as failure. </summary>
        public IList<FailureStatusCodeRange> StatusCodeRanges { get; }
        /// <summary> The error reasons which are considered as failure. </summary>
        public IList<string> ErrorReasons { get; }
    }
}
