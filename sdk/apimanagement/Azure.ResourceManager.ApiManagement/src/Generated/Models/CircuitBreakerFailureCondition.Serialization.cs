// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ApiManagement.Models
{
    public partial class CircuitBreakerFailureCondition : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Count))
            {
                writer.WritePropertyName("count"u8);
                writer.WriteNumberValue(Count.Value);
            }
            if (Optional.IsDefined(Percentage))
            {
                writer.WritePropertyName("percentage"u8);
                writer.WriteNumberValue(Percentage.Value);
            }
            if (Optional.IsDefined(Interval))
            {
                writer.WritePropertyName("interval"u8);
                writer.WriteStringValue(Interval.Value, "P");
            }
            if (Optional.IsCollectionDefined(StatusCodeRanges))
            {
                writer.WritePropertyName("statusCodeRanges"u8);
                writer.WriteStartArray();
                foreach (var item in StatusCodeRanges)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ErrorReasons))
            {
                writer.WritePropertyName("errorReasons"u8);
                writer.WriteStartArray();
                foreach (var item in ErrorReasons)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static CircuitBreakerFailureCondition DeserializeCircuitBreakerFailureCondition(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<long> count = default;
            Optional<long> percentage = default;
            Optional<TimeSpan> interval = default;
            Optional<IList<FailureStatusCodeRange>> statusCodeRanges = default;
            Optional<IList<string>> errorReasons = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("count"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    count = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("percentage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    percentage = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("interval"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    interval = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("statusCodeRanges"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FailureStatusCodeRange> array = new List<FailureStatusCodeRange>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FailureStatusCodeRange.DeserializeFailureStatusCodeRange(item));
                    }
                    statusCodeRanges = array;
                    continue;
                }
                if (property.NameEquals("errorReasons"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    errorReasons = array;
                    continue;
                }
            }
            return new CircuitBreakerFailureCondition(Optional.ToNullable(count), Optional.ToNullable(percentage), Optional.ToNullable(interval), Optional.ToList(statusCodeRanges), Optional.ToList(errorReasons));
        }
    }
}
