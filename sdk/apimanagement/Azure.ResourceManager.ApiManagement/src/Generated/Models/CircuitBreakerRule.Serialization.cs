// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ApiManagement.Models
{
    public partial class CircuitBreakerRule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(FailureCondition))
            {
                writer.WritePropertyName("failureCondition"u8);
                writer.WriteObjectValue(FailureCondition);
            }
            if (Optional.IsDefined(TripDuration))
            {
                writer.WritePropertyName("tripDuration"u8);
                writer.WriteStringValue(TripDuration.Value, "P");
            }
            writer.WriteEndObject();
        }

        internal static CircuitBreakerRule DeserializeCircuitBreakerRule(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> name = default;
            Optional<CircuitBreakerFailureCondition> failureCondition = default;
            Optional<TimeSpan> tripDuration = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("failureCondition"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    failureCondition = CircuitBreakerFailureCondition.DeserializeCircuitBreakerFailureCondition(property.Value);
                    continue;
                }
                if (property.NameEquals("tripDuration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    tripDuration = property.Value.GetTimeSpan("P");
                    continue;
                }
            }
            return new CircuitBreakerRule(name.Value, failureCondition.Value, Optional.ToNullable(tripDuration));
        }
    }
}
