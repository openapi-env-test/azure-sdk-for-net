// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Security.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Security Assignment on a resource group over a given scope
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Assignment : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the Assignment class.
        /// </summary>
        public Assignment()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Assignment class.
        /// </summary>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="location">Location where the resource is
        /// stored</param>
        /// <param name="kind">Kind of the resource</param>
        /// <param name="etag">Entity tag is used for comparing two or more
        /// entities from the same requested resource.</param>
        /// <param name="tags">A list of key value pairs that describe the
        /// resource.</param>
        /// <param name="displayName">display name of the
        /// standardAssignment</param>
        /// <param name="description">description of the
        /// standardAssignment</param>
        /// <param name="assignedStandard">Standard item with key as applied to
        /// this standard assignment over the given scope</param>
        /// <param name="assignedComponent">Component item with key as applied
        /// to this standard assignment over the given scope</param>
        /// <param name="scope">Scope to which the standardAssignment applies -
        /// can be a subscription path or a resource group under that
        /// subscription</param>
        /// <param name="effect">expected effect of this assignment
        /// (Disable/Exempt/etc)</param>
        /// <param name="expiresOn">Expiration date of this assignment as a
        /// full ISO date</param>
        /// <param name="additionalData">Additional data about the
        /// assignment</param>
        /// <param name="metadata">The assignment metadata. Metadata is an open
        /// ended object and is typically a collection of key value
        /// pairs.</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        public Assignment(string id = default(string), string name = default(string), string type = default(string), string location = default(string), string kind = default(string), string etag = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string displayName = default(string), string description = default(string), AssignedStandardItem assignedStandard = default(AssignedStandardItem), AssignedComponentItem assignedComponent = default(AssignedComponentItem), string scope = default(string), string effect = default(string), System.DateTime? expiresOn = default(System.DateTime?), AssignmentPropertiesAdditionalData additionalData = default(AssignmentPropertiesAdditionalData), object metadata = default(object), SystemData systemData = default(SystemData))
            : base(id, name, type, location, kind, etag, tags)
        {
            DisplayName = displayName;
            Description = description;
            AssignedStandard = assignedStandard;
            AssignedComponent = assignedComponent;
            Scope = scope;
            Effect = effect;
            ExpiresOn = expiresOn;
            AdditionalData = additionalData;
            Metadata = metadata;
            SystemData = systemData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets display name of the standardAssignment
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets description of the standardAssignment
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets standard item with key as applied to this standard
        /// assignment over the given scope
        /// </summary>
        [JsonProperty(PropertyName = "properties.assignedStandard")]
        public AssignedStandardItem AssignedStandard { get; set; }

        /// <summary>
        /// Gets or sets component item with key as applied to this standard
        /// assignment over the given scope
        /// </summary>
        [JsonProperty(PropertyName = "properties.assignedComponent")]
        public AssignedComponentItem AssignedComponent { get; set; }

        /// <summary>
        /// Gets or sets scope to which the standardAssignment applies - can be
        /// a subscription path or a resource group under that subscription
        /// </summary>
        [JsonProperty(PropertyName = "properties.scope")]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or sets expected effect of this assignment
        /// (Disable/Exempt/etc)
        /// </summary>
        [JsonProperty(PropertyName = "properties.effect")]
        public string Effect { get; set; }

        /// <summary>
        /// Gets or sets expiration date of this assignment as a full ISO date
        /// </summary>
        [JsonProperty(PropertyName = "properties.expiresOn")]
        public System.DateTime? ExpiresOn { get; set; }

        /// <summary>
        /// Gets or sets additional data about the assignment
        /// </summary>
        [JsonProperty(PropertyName = "properties.additionalData")]
        public AssignmentPropertiesAdditionalData AdditionalData { get; set; }

        /// <summary>
        /// Gets or sets the assignment metadata. Metadata is an open ended
        /// object and is typically a collection of key value pairs.
        /// </summary>
        [JsonProperty(PropertyName = "properties.metadata")]
        public object Metadata { get; set; }

        /// <summary>
        /// Gets azure Resource Manager metadata containing createdBy and
        /// modifiedBy information.
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; private set; }

    }
}
