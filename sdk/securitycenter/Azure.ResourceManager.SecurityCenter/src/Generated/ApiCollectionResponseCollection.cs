// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.SecurityCenter
{
    /// <summary>
    /// A class representing a collection of <see cref="ApiCollectionResponseResource" /> and their operations.
    /// Each <see cref="ApiCollectionResponseResource" /> in the collection will belong to the same instance of <see cref="ResourceGroupResource" />.
    /// To get an <see cref="ApiCollectionResponseCollection" /> instance call the GetApiCollectionResponses method from an instance of <see cref="ResourceGroupResource" />.
    /// </summary>
    public partial class ApiCollectionResponseCollection : ArmCollection, IEnumerable<ApiCollectionResponseResource>, IAsyncEnumerable<ApiCollectionResponseResource>
    {
        private readonly ClientDiagnostics _apiCollectionResponseAPICollectionOnboardingClientDiagnostics;
        private readonly APICollectionOnboardingRestOperations _apiCollectionResponseAPICollectionOnboardingRestClient;
        private readonly ClientDiagnostics _apiCollectionResponseAPICollectionClientDiagnostics;
        private readonly APICollectionRestOperations _apiCollectionResponseAPICollectionRestClient;
        private readonly string _serviceName;

        /// <summary> Initializes a new instance of the <see cref="ApiCollectionResponseCollection"/> class for mocking. </summary>
        protected ApiCollectionResponseCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ApiCollectionResponseCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="serviceName"> The name of the API Management service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serviceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="serviceName"/> is an empty string, and was expected to be non-empty. </exception>
        internal ApiCollectionResponseCollection(ArmClient client, ResourceIdentifier id, string serviceName) : base(client, id)
        {
            _serviceName = serviceName;
            _apiCollectionResponseAPICollectionOnboardingClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ApiCollectionResponseResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ApiCollectionResponseResource.ResourceType, out string apiCollectionResponseAPICollectionOnboardingApiVersion);
            _apiCollectionResponseAPICollectionOnboardingRestClient = new APICollectionOnboardingRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, apiCollectionResponseAPICollectionOnboardingApiVersion);
            _apiCollectionResponseAPICollectionClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.SecurityCenter", ApiCollectionResponseResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ApiCollectionResponseResource.ResourceType, out string apiCollectionResponseAPICollectionApiVersion);
            _apiCollectionResponseAPICollectionRestClient = new APICollectionRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, apiCollectionResponseAPICollectionApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Onboard an Azure API Management API to Defender for APIs. The system will start monitoring the operations within the Azure Management API for intrusive behaviors and provide alerts for attacks that have been detected.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/providers/Microsoft.Security/apiCollections/{apiCollectionId}
        /// Operation Id: APICollectionOnboarding_Create
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="apiCollectionId"> A string representing the apiCollections resource within the Microsoft.Security provider namespace. This string matches the Azure API Management API name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="apiCollectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="apiCollectionId"/> is null. </exception>
        public virtual async Task<ArmOperation<ApiCollectionResponseResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string apiCollectionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(apiCollectionId, nameof(apiCollectionId));

            using var scope = _apiCollectionResponseAPICollectionOnboardingClientDiagnostics.CreateScope("ApiCollectionResponseCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _apiCollectionResponseAPICollectionOnboardingRestClient.CreateAsync(Id.SubscriptionId, Id.ResourceGroupName, _serviceName, apiCollectionId, cancellationToken).ConfigureAwait(false);
                var operation = new SecurityCenterArmOperation<ApiCollectionResponseResource>(Response.FromValue(new ApiCollectionResponseResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Onboard an Azure API Management API to Defender for APIs. The system will start monitoring the operations within the Azure Management API for intrusive behaviors and provide alerts for attacks that have been detected.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/providers/Microsoft.Security/apiCollections/{apiCollectionId}
        /// Operation Id: APICollectionOnboarding_Create
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="apiCollectionId"> A string representing the apiCollections resource within the Microsoft.Security provider namespace. This string matches the Azure API Management API name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="apiCollectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="apiCollectionId"/> is null. </exception>
        public virtual ArmOperation<ApiCollectionResponseResource> CreateOrUpdate(WaitUntil waitUntil, string apiCollectionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(apiCollectionId, nameof(apiCollectionId));

            using var scope = _apiCollectionResponseAPICollectionOnboardingClientDiagnostics.CreateScope("ApiCollectionResponseCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _apiCollectionResponseAPICollectionOnboardingRestClient.Create(Id.SubscriptionId, Id.ResourceGroupName, _serviceName, apiCollectionId, cancellationToken);
                var operation = new SecurityCenterArmOperation<ApiCollectionResponseResource>(Response.FromValue(new ApiCollectionResponseResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets an Azure API Management API if it has been onboarded to Defender for APIs. If an Azure API Management API is onboarded to Defender for APIs, the system will monitor the operations within the Azure API Management API for intrusive behaviors and provide alerts for attacks that have been detected.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/providers/Microsoft.Security/apiCollections/{apiCollectionId}
        /// Operation Id: APICollection_Get
        /// </summary>
        /// <param name="apiCollectionId"> A string representing the apiCollections resource within the Microsoft.Security provider namespace. This string matches the Azure API Management API name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="apiCollectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="apiCollectionId"/> is null. </exception>
        public virtual async Task<Response<ApiCollectionResponseResource>> GetAsync(string apiCollectionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(apiCollectionId, nameof(apiCollectionId));

            using var scope = _apiCollectionResponseAPICollectionClientDiagnostics.CreateScope("ApiCollectionResponseCollection.Get");
            scope.Start();
            try
            {
                var response = await _apiCollectionResponseAPICollectionRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, _serviceName, apiCollectionId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ApiCollectionResponseResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets an Azure API Management API if it has been onboarded to Defender for APIs. If an Azure API Management API is onboarded to Defender for APIs, the system will monitor the operations within the Azure API Management API for intrusive behaviors and provide alerts for attacks that have been detected.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/providers/Microsoft.Security/apiCollections/{apiCollectionId}
        /// Operation Id: APICollection_Get
        /// </summary>
        /// <param name="apiCollectionId"> A string representing the apiCollections resource within the Microsoft.Security provider namespace. This string matches the Azure API Management API name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="apiCollectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="apiCollectionId"/> is null. </exception>
        public virtual Response<ApiCollectionResponseResource> Get(string apiCollectionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(apiCollectionId, nameof(apiCollectionId));

            using var scope = _apiCollectionResponseAPICollectionClientDiagnostics.CreateScope("ApiCollectionResponseCollection.Get");
            scope.Start();
            try
            {
                var response = _apiCollectionResponseAPICollectionRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, _serviceName, apiCollectionId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ApiCollectionResponseResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a list of Azure API Management APIs that have been onboarded to Defender for APIs. If an Azure API Management API is onboarded to Defender for APIs, the system will monitor the operations within the Azure API Management API for intrusive behaviors and provide alerts for attacks that have been detected.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/providers/Microsoft.Security/apiCollections
        /// Operation Id: APICollection_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ApiCollectionResponseResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ApiCollectionResponseResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ApiCollectionResponseResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _apiCollectionResponseAPICollectionClientDiagnostics.CreateScope("ApiCollectionResponseCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _apiCollectionResponseAPICollectionRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, _serviceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ApiCollectionResponseResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ApiCollectionResponseResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _apiCollectionResponseAPICollectionClientDiagnostics.CreateScope("ApiCollectionResponseCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _apiCollectionResponseAPICollectionRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, _serviceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ApiCollectionResponseResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list of Azure API Management APIs that have been onboarded to Defender for APIs. If an Azure API Management API is onboarded to Defender for APIs, the system will monitor the operations within the Azure API Management API for intrusive behaviors and provide alerts for attacks that have been detected.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/providers/Microsoft.Security/apiCollections
        /// Operation Id: APICollection_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ApiCollectionResponseResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ApiCollectionResponseResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<ApiCollectionResponseResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _apiCollectionResponseAPICollectionClientDiagnostics.CreateScope("ApiCollectionResponseCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _apiCollectionResponseAPICollectionRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, _serviceName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ApiCollectionResponseResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ApiCollectionResponseResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _apiCollectionResponseAPICollectionClientDiagnostics.CreateScope("ApiCollectionResponseCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _apiCollectionResponseAPICollectionRestClient.ListNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, _serviceName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ApiCollectionResponseResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/providers/Microsoft.Security/apiCollections/{apiCollectionId}
        /// Operation Id: APICollection_Get
        /// </summary>
        /// <param name="apiCollectionId"> A string representing the apiCollections resource within the Microsoft.Security provider namespace. This string matches the Azure API Management API name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="apiCollectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="apiCollectionId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string apiCollectionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(apiCollectionId, nameof(apiCollectionId));

            using var scope = _apiCollectionResponseAPICollectionClientDiagnostics.CreateScope("ApiCollectionResponseCollection.Exists");
            scope.Start();
            try
            {
                var response = await _apiCollectionResponseAPICollectionRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, _serviceName, apiCollectionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/providers/Microsoft.Security/apiCollections/{apiCollectionId}
        /// Operation Id: APICollection_Get
        /// </summary>
        /// <param name="apiCollectionId"> A string representing the apiCollections resource within the Microsoft.Security provider namespace. This string matches the Azure API Management API name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="apiCollectionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="apiCollectionId"/> is null. </exception>
        public virtual Response<bool> Exists(string apiCollectionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(apiCollectionId, nameof(apiCollectionId));

            using var scope = _apiCollectionResponseAPICollectionClientDiagnostics.CreateScope("ApiCollectionResponseCollection.Exists");
            scope.Start();
            try
            {
                var response = _apiCollectionResponseAPICollectionRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, _serviceName, apiCollectionId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ApiCollectionResponseResource> IEnumerable<ApiCollectionResponseResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ApiCollectionResponseResource> IAsyncEnumerable<ApiCollectionResponseResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
