// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SecurityInsights.Models
{
    public partial class Recommendation
    {
        internal static Recommendation DeserializeRecommendation(JsonElement element)
        {
            Guid id = default;
            Instructions instructions = default;
            Optional<Content> content = default;
            Optional<string> resourceId = default;
            Optional<IReadOnlyDictionary<string, string>> additionalProperties = default;
            string title = default;
            string description = default;
            string recommendationTypeTitle = default;
            string recommendationTypeId = default;
            Category category = default;
            Context context = default;
            Guid workspaceId = default;
            IReadOnlyList<RecommendedAction> actions = default;
            State state = default;
            Priority priority = default;
            DateTimeOffset lastEvaluatedTimeUtc = default;
            Optional<DateTimeOffset?> hideUntilTimeUtc = default;
            Optional<DateTimeOffset?> displayUntilTimeUtc = default;
            Optional<bool> visible = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("instructions"))
                {
                    instructions = Instructions.DeserializeInstructions(property.Value);
                    continue;
                }
                if (property.NameEquals("content"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        content = null;
                        continue;
                    }
                    content = Content.DeserializeContent(property.Value);
                    continue;
                }
                if (property.NameEquals("resourceId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        resourceId = null;
                        continue;
                    }
                    resourceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("additionalProperties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        additionalProperties = null;
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    additionalProperties = dictionary;
                    continue;
                }
                if (property.NameEquals("title"))
                {
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recommendationTypeTitle"))
                {
                    recommendationTypeTitle = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recommendationTypeId"))
                {
                    recommendationTypeId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("category"))
                {
                    category = new Category(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("context"))
                {
                    context = new Context(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("workspaceId"))
                {
                    workspaceId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("actions"))
                {
                    List<RecommendedAction> array = new List<RecommendedAction>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RecommendedAction.DeserializeRecommendedAction(item));
                    }
                    actions = array;
                    continue;
                }
                if (property.NameEquals("state"))
                {
                    state = new State(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("priority"))
                {
                    priority = new Priority(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("lastEvaluatedTimeUtc"))
                {
                    lastEvaluatedTimeUtc = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("hideUntilTimeUtc"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        hideUntilTimeUtc = null;
                        continue;
                    }
                    hideUntilTimeUtc = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("displayUntilTimeUtc"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        displayUntilTimeUtc = null;
                        continue;
                    }
                    displayUntilTimeUtc = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("visible"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    visible = property.Value.GetBoolean();
                    continue;
                }
            }
            return new Recommendation(id, instructions, content.Value, resourceId.Value, Optional.ToDictionary(additionalProperties), title, description, recommendationTypeTitle, recommendationTypeId, category, context, workspaceId, actions, state, priority, lastEvaluatedTimeUtc, Optional.ToNullable(hideUntilTimeUtc), Optional.ToNullable(displayUntilTimeUtc), Optional.ToNullable(visible));
        }
    }
}
