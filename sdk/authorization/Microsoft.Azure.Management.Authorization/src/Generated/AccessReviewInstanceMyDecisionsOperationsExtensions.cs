// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Authorization
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AccessReviewInstanceMyDecisionsOperations.
    /// </summary>
    public static partial class AccessReviewInstanceMyDecisionsOperationsExtensions
    {
            /// <summary>
            /// Get my access review instance decisions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduleDefinitionId'>
            /// The id of the access review schedule definition.
            /// </param>
            /// <param name='id'>
            /// The id of the access review instance.
            /// </param>
            public static IPage<AccessReviewDecision> List(this IAccessReviewInstanceMyDecisionsOperations operations, string scheduleDefinitionId, string id)
            {
                return operations.ListAsync(scheduleDefinitionId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get my access review instance decisions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduleDefinitionId'>
            /// The id of the access review schedule definition.
            /// </param>
            /// <param name='id'>
            /// The id of the access review instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AccessReviewDecision>> ListAsync(this IAccessReviewInstanceMyDecisionsOperations operations, string scheduleDefinitionId, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(scheduleDefinitionId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get my single access review instance decision.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduleDefinitionId'>
            /// The id of the access review schedule definition.
            /// </param>
            /// <param name='id'>
            /// The id of the access review instance.
            /// </param>
            /// <param name='decisionId'>
            /// The id of the decision record.
            /// </param>
            public static AccessReviewDecision GetById(this IAccessReviewInstanceMyDecisionsOperations operations, string scheduleDefinitionId, string id, string decisionId)
            {
                return operations.GetByIdAsync(scheduleDefinitionId, id, decisionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get my single access review instance decision.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduleDefinitionId'>
            /// The id of the access review schedule definition.
            /// </param>
            /// <param name='id'>
            /// The id of the access review instance.
            /// </param>
            /// <param name='decisionId'>
            /// The id of the decision record.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccessReviewDecision> GetByIdAsync(this IAccessReviewInstanceMyDecisionsOperations operations, string scheduleDefinitionId, string id, string decisionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(scheduleDefinitionId, id, decisionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Record a decision.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduleDefinitionId'>
            /// The id of the access review schedule definition.
            /// </param>
            /// <param name='id'>
            /// The id of the access review instance.
            /// </param>
            /// <param name='decisionId'>
            /// The id of the decision record.
            /// </param>
            /// <param name='properties'>
            /// Access review decision properties to patch.
            /// </param>
            public static AccessReviewDecision Patch(this IAccessReviewInstanceMyDecisionsOperations operations, string scheduleDefinitionId, string id, string decisionId, AccessReviewDecisionProperties properties)
            {
                return operations.PatchAsync(scheduleDefinitionId, id, decisionId, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Record a decision.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduleDefinitionId'>
            /// The id of the access review schedule definition.
            /// </param>
            /// <param name='id'>
            /// The id of the access review instance.
            /// </param>
            /// <param name='decisionId'>
            /// The id of the decision record.
            /// </param>
            /// <param name='properties'>
            /// Access review decision properties to patch.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccessReviewDecision> PatchAsync(this IAccessReviewInstanceMyDecisionsOperations operations, string scheduleDefinitionId, string id, string decisionId, AccessReviewDecisionProperties properties, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchWithHttpMessagesAsync(scheduleDefinitionId, id, decisionId, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get my access review instance decisions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AccessReviewDecision> ListNext(this IAccessReviewInstanceMyDecisionsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get my access review instance decisions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AccessReviewDecision>> ListNextAsync(this IAccessReviewInstanceMyDecisionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
