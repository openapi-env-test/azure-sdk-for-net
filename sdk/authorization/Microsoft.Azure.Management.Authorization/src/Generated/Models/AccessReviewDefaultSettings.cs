// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Authorization.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Access Review Default Settings.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class AccessReviewDefaultSettings : IResource
    {
        /// <summary>
        /// Initializes a new instance of the AccessReviewDefaultSettings
        /// class.
        /// </summary>
        public AccessReviewDefaultSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AccessReviewDefaultSettings
        /// class.
        /// </summary>
        /// <param name="id">The access review default settings id. This is
        /// only going to be default</param>
        /// <param name="name">The access review default settings name. This is
        /// always going to be Access Review Default Settings</param>
        /// <param name="type">The resource type.</param>
        /// <param name="mailNotificationsEnabled">Flag to indicate whether
        /// sending mails to reviewers and the review creator is
        /// enabled.</param>
        /// <param name="reminderNotificationsEnabled">Flag to indicate whether
        /// sending reminder emails to reviewers are enabled.</param>
        /// <param name="defaultDecisionEnabled">Flag to indicate whether
        /// reviewers are required to provide a justification when reviewing
        /// access.</param>
        /// <param name="justificationRequiredOnApproval">Flag to indicate
        /// whether the reviewer is required to pass justification when
        /// recording a decision.</param>
        /// <param name="defaultDecision">This specifies the behavior for the
        /// autoReview feature when an access review completes. Possible values
        /// include: 'Approve', 'Deny', 'Recommendation'</param>
        /// <param name="autoApplyDecisionsEnabled">Flag to indicate whether
        /// auto-apply capability, to automatically change the target object
        /// access resource, is enabled. If not enabled, a user must, after the
        /// review completes, apply the access review.</param>
        /// <param name="recommendationsEnabled">Flag to indicate whether
        /// showing recommendations to reviewers is enabled.</param>
        /// <param name="instanceDurationInDays">The duration in days for an
        /// instance.</param>
        /// <param name="type1">The recurrence type : weekly, monthly, etc.
        /// Possible values include: 'weekly', 'absoluteMonthly'</param>
        /// <param name="interval">The interval for recurrence. For a quarterly
        /// review, the interval is 3 for type : absoluteMonthly.</param>
        /// <param name="type2">The recurrence range type. The possible values
        /// are: endDate, noEnd, numbered. Possible values include: 'endDate',
        /// 'noEnd', 'numbered'</param>
        /// <param name="numberOfOccurrences">The number of times to repeat the
        /// access review. Required and must be positive if type is
        /// numbered.</param>
        /// <param name="startDate">The DateTime when the review is scheduled
        /// to be start. This could be a date in the future. Required on
        /// create.</param>
        /// <param name="endDate">The DateTime when the review is scheduled to
        /// end. Required if type is endDate</param>
        public AccessReviewDefaultSettings(string id = default(string), string name = default(string), string type = default(string), bool? mailNotificationsEnabled = default(bool?), bool? reminderNotificationsEnabled = default(bool?), bool? defaultDecisionEnabled = default(bool?), bool? justificationRequiredOnApproval = default(bool?), string defaultDecision = default(string), bool? autoApplyDecisionsEnabled = default(bool?), bool? recommendationsEnabled = default(bool?), int? instanceDurationInDays = default(int?), string type1 = default(string), int? interval = default(int?), string type2 = default(string), int? numberOfOccurrences = default(int?), System.DateTime startDate = default(System.DateTime), System.DateTime endDate = default(System.DateTime))
        {
            Id = id;
            Name = name;
            Type = type;
            MailNotificationsEnabled = mailNotificationsEnabled;
            ReminderNotificationsEnabled = reminderNotificationsEnabled;
            DefaultDecisionEnabled = defaultDecisionEnabled;
            JustificationRequiredOnApproval = justificationRequiredOnApproval;
            DefaultDecision = defaultDecision;
            AutoApplyDecisionsEnabled = autoApplyDecisionsEnabled;
            RecommendationsEnabled = recommendationsEnabled;
            InstanceDurationInDays = instanceDurationInDays;
            Type1 = type1;
            Interval = interval;
            Type2 = type2;
            NumberOfOccurrences = numberOfOccurrences;
            StartDate = startDate;
            EndDate = endDate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the access review default settings id. This is only going to
        /// be default
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets the access review default settings name. This is always going
        /// to be Access Review Default Settings
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets the resource type.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets or sets flag to indicate whether sending mails to reviewers
        /// and the review creator is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.mailNotificationsEnabled")]
        public bool? MailNotificationsEnabled { get; set; }

        /// <summary>
        /// Gets or sets flag to indicate whether sending reminder emails to
        /// reviewers are enabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.reminderNotificationsEnabled")]
        public bool? ReminderNotificationsEnabled { get; set; }

        /// <summary>
        /// Gets or sets flag to indicate whether reviewers are required to
        /// provide a justification when reviewing access.
        /// </summary>
        [JsonProperty(PropertyName = "properties.defaultDecisionEnabled")]
        public bool? DefaultDecisionEnabled { get; set; }

        /// <summary>
        /// Gets or sets flag to indicate whether the reviewer is required to
        /// pass justification when recording a decision.
        /// </summary>
        [JsonProperty(PropertyName = "properties.justificationRequiredOnApproval")]
        public bool? JustificationRequiredOnApproval { get; set; }

        /// <summary>
        /// Gets or sets this specifies the behavior for the autoReview feature
        /// when an access review completes. Possible values include:
        /// 'Approve', 'Deny', 'Recommendation'
        /// </summary>
        [JsonProperty(PropertyName = "properties.defaultDecision")]
        public string DefaultDecision { get; set; }

        /// <summary>
        /// Gets or sets flag to indicate whether auto-apply capability, to
        /// automatically change the target object access resource, is enabled.
        /// If not enabled, a user must, after the review completes, apply the
        /// access review.
        /// </summary>
        [JsonProperty(PropertyName = "properties.autoApplyDecisionsEnabled")]
        public bool? AutoApplyDecisionsEnabled { get; set; }

        /// <summary>
        /// Gets or sets flag to indicate whether showing recommendations to
        /// reviewers is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.recommendationsEnabled")]
        public bool? RecommendationsEnabled { get; set; }

        /// <summary>
        /// Gets or sets the duration in days for an instance.
        /// </summary>
        [JsonProperty(PropertyName = "properties.instanceDurationInDays")]
        public int? InstanceDurationInDays { get; set; }

        /// <summary>
        /// Gets or sets the recurrence type : weekly, monthly, etc. Possible
        /// values include: 'weekly', 'absoluteMonthly'
        /// </summary>
        [JsonProperty(PropertyName = "properties.recurrence.pattern.type")]
        public string Type1 { get; set; }

        /// <summary>
        /// Gets or sets the interval for recurrence. For a quarterly review,
        /// the interval is 3 for type : absoluteMonthly.
        /// </summary>
        [JsonProperty(PropertyName = "properties.recurrence.pattern.interval")]
        public int? Interval { get; set; }

        /// <summary>
        /// Gets or sets the recurrence range type. The possible values are:
        /// endDate, noEnd, numbered. Possible values include: 'endDate',
        /// 'noEnd', 'numbered'
        /// </summary>
        [JsonProperty(PropertyName = "properties.recurrence.range.type")]
        public string Type2 { get; set; }

        /// <summary>
        /// Gets or sets the number of times to repeat the access review.
        /// Required and must be positive if type is numbered.
        /// </summary>
        [JsonProperty(PropertyName = "properties.recurrence.range.numberOfOccurrences")]
        public int? NumberOfOccurrences { get; set; }

        /// <summary>
        /// Gets or sets the DateTime when the review is scheduled to be start.
        /// This could be a date in the future. Required on create.
        /// </summary>
        [JsonProperty(PropertyName = "properties.recurrence.range.startDate")]
        public System.DateTime StartDate { get; set; }

        /// <summary>
        /// Gets or sets the DateTime when the review is scheduled to end.
        /// Required if type is endDate
        /// </summary>
        [JsonProperty(PropertyName = "properties.recurrence.range.endDate")]
        public System.DateTime EndDate { get; set; }

    }
}
