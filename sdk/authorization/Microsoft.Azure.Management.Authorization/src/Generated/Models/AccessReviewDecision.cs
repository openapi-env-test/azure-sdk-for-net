// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Authorization.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Access Review.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class AccessReviewDecision : IResource
    {
        /// <summary>
        /// Initializes a new instance of the AccessReviewDecision class.
        /// </summary>
        public AccessReviewDecision()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AccessReviewDecision class.
        /// </summary>
        /// <param name="id">The access review decision id.</param>
        /// <param name="name">The access review decision name.</param>
        /// <param name="type">The resource type.</param>
        /// <param name="recommendation">The feature- generated recommendation
        /// shown to the reviewer. Possible values include: 'Approve', 'Deny',
        /// 'NoInfoAvailable'</param>
        /// <param name="decision">The decision on the approval step. This
        /// value is initially set to NotReviewed. Approvers can take action of
        /// Approve/Deny. Possible values include: 'Approve', 'Deny',
        /// 'NotReviewed', 'DontKnow', 'NotNotified'</param>
        /// <param name="justification">Justification provided by approvers for
        /// their action</param>
        /// <param name="reviewedDateTime">Date Time when a decision was
        /// taken.</param>
        /// <param name="principalId">The identity id</param>
        /// <param name="principalType">The identity type :
        /// user/servicePrincipal. Possible values include: 'user',
        /// 'servicePrincipal'</param>
        /// <param name="principalName">The identity display name</param>
        /// <param name="userPrincipalName">The user principal name(if
        /// valid)</param>
        /// <param name="applyResult">The outcome of applying the decision.
        /// Possible values include: 'New', 'Applying', 'AppliedSuccessfully',
        /// 'AppliedWithUnknownFailure',
        /// 'AppliedSuccessfullyButObjectNotFound', 'ApplyNotSupported'</param>
        /// <param name="appliedDateTime">The date and time when the review
        /// decision was applied.</param>
        /// <param name="principalId1">The identity id</param>
        /// <param name="principalType1">The identity type :
        /// user/servicePrincipal. Possible values include: 'user',
        /// 'servicePrincipal'</param>
        /// <param name="principalName1">The identity display name</param>
        /// <param name="userPrincipalName1">The user principal name(if
        /// valid)</param>
        public AccessReviewDecision(string id = default(string), string name = default(string), string type = default(string), string recommendation = default(string), string decision = default(string), string justification = default(string), System.DateTime? reviewedDateTime = default(System.DateTime?), string principalId = default(string), string principalType = default(string), string principalName = default(string), string userPrincipalName = default(string), string applyResult = default(string), System.DateTime? appliedDateTime = default(System.DateTime?), string principalId1 = default(string), string principalType1 = default(string), string principalName1 = default(string), string userPrincipalName1 = default(string))
        {
            Id = id;
            Name = name;
            Type = type;
            Recommendation = recommendation;
            Decision = decision;
            Justification = justification;
            ReviewedDateTime = reviewedDateTime;
            PrincipalId = principalId;
            PrincipalType = principalType;
            PrincipalName = principalName;
            UserPrincipalName = userPrincipalName;
            ApplyResult = applyResult;
            AppliedDateTime = appliedDateTime;
            PrincipalId1 = principalId1;
            PrincipalType1 = principalType1;
            PrincipalName1 = principalName1;
            UserPrincipalName1 = userPrincipalName1;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the access review decision id.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets the access review decision name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets the resource type.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets the feature- generated recommendation shown to the reviewer.
        /// Possible values include: 'Approve', 'Deny', 'NoInfoAvailable'
        /// </summary>
        [JsonProperty(PropertyName = "properties.recommendation")]
        public string Recommendation { get; private set; }

        /// <summary>
        /// Gets or sets the decision on the approval step. This value is
        /// initially set to NotReviewed. Approvers can take action of
        /// Approve/Deny. Possible values include: 'Approve', 'Deny',
        /// 'NotReviewed', 'DontKnow', 'NotNotified'
        /// </summary>
        [JsonProperty(PropertyName = "properties.decision")]
        public string Decision { get; set; }

        /// <summary>
        /// Gets or sets justification provided by approvers for their action
        /// </summary>
        [JsonProperty(PropertyName = "properties.justification")]
        public string Justification { get; set; }

        /// <summary>
        /// Gets date Time when a decision was taken.
        /// </summary>
        [JsonProperty(PropertyName = "properties.reviewedDateTime")]
        public System.DateTime? ReviewedDateTime { get; private set; }

        /// <summary>
        /// Gets the identity id
        /// </summary>
        [JsonProperty(PropertyName = "properties.reviewedBy.principalId")]
        public string PrincipalId { get; private set; }

        /// <summary>
        /// Gets the identity type : user/servicePrincipal. Possible values
        /// include: 'user', 'servicePrincipal'
        /// </summary>
        [JsonProperty(PropertyName = "properties.reviewedBy.principalType")]
        public string PrincipalType { get; private set; }

        /// <summary>
        /// Gets the identity display name
        /// </summary>
        [JsonProperty(PropertyName = "properties.reviewedBy.principalName")]
        public string PrincipalName { get; private set; }

        /// <summary>
        /// Gets the user principal name(if valid)
        /// </summary>
        [JsonProperty(PropertyName = "properties.reviewedBy.userPrincipalName")]
        public string UserPrincipalName { get; private set; }

        /// <summary>
        /// Gets the outcome of applying the decision. Possible values include:
        /// 'New', 'Applying', 'AppliedSuccessfully',
        /// 'AppliedWithUnknownFailure',
        /// 'AppliedSuccessfullyButObjectNotFound', 'ApplyNotSupported'
        /// </summary>
        [JsonProperty(PropertyName = "properties.applyResult")]
        public string ApplyResult { get; private set; }

        /// <summary>
        /// Gets the date and time when the review decision was applied.
        /// </summary>
        [JsonProperty(PropertyName = "properties.appliedDateTime")]
        public System.DateTime? AppliedDateTime { get; private set; }

        /// <summary>
        /// Gets the identity id
        /// </summary>
        [JsonProperty(PropertyName = "properties.appliedBy.principalId")]
        public string PrincipalId1 { get; private set; }

        /// <summary>
        /// Gets the identity type : user/servicePrincipal. Possible values
        /// include: 'user', 'servicePrincipal'
        /// </summary>
        [JsonProperty(PropertyName = "properties.appliedBy.principalType")]
        public string PrincipalType1 { get; private set; }

        /// <summary>
        /// Gets the identity display name
        /// </summary>
        [JsonProperty(PropertyName = "properties.appliedBy.principalName")]
        public string PrincipalName1 { get; private set; }

        /// <summary>
        /// Gets the user principal name(if valid)
        /// </summary>
        [JsonProperty(PropertyName = "properties.appliedBy.userPrincipalName")]
        public string UserPrincipalName1 { get; private set; }

    }
}
