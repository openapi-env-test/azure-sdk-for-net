// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Authorization
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AccessReviewScheduleDefinitionsOperations.
    /// </summary>
    public static partial class AccessReviewScheduleDefinitionsOperationsExtensions
    {
            /// <summary>
            /// Get access review schedule definitions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<AccessReviewScheduleDefinition> List(this IAccessReviewScheduleDefinitionsOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get access review schedule definitions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AccessReviewScheduleDefinition>> ListAsync(this IAccessReviewScheduleDefinitionsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get single access review definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduleDefinitionId'>
            /// The id of the access review schedule definition.
            /// </param>
            public static AccessReviewScheduleDefinition GetById(this IAccessReviewScheduleDefinitionsOperations operations, string scheduleDefinitionId)
            {
                return operations.GetByIdAsync(scheduleDefinitionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get single access review definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduleDefinitionId'>
            /// The id of the access review schedule definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccessReviewScheduleDefinition> GetByIdAsync(this IAccessReviewScheduleDefinitionsOperations operations, string scheduleDefinitionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(scheduleDefinitionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete access review schedule definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduleDefinitionId'>
            /// The id of the access review schedule definition.
            /// </param>
            public static void DeleteById(this IAccessReviewScheduleDefinitionsOperations operations, string scheduleDefinitionId)
            {
                operations.DeleteByIdAsync(scheduleDefinitionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete access review schedule definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduleDefinitionId'>
            /// The id of the access review schedule definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteByIdAsync(this IAccessReviewScheduleDefinitionsOperations operations, string scheduleDefinitionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteByIdWithHttpMessagesAsync(scheduleDefinitionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or Update access review schedule definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduleDefinitionId'>
            /// The id of the access review schedule definition.
            /// </param>
            /// <param name='properties'>
            /// Access review schedule definition properties.
            /// </param>
            public static AccessReviewScheduleDefinition CreateOrUpdateById(this IAccessReviewScheduleDefinitionsOperations operations, string scheduleDefinitionId, AccessReviewScheduleDefinitionProperties properties)
            {
                return operations.CreateOrUpdateByIdAsync(scheduleDefinitionId, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or Update access review schedule definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduleDefinitionId'>
            /// The id of the access review schedule definition.
            /// </param>
            /// <param name='properties'>
            /// Access review schedule definition properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccessReviewScheduleDefinition> CreateOrUpdateByIdAsync(this IAccessReviewScheduleDefinitionsOperations operations, string scheduleDefinitionId, AccessReviewScheduleDefinitionProperties properties, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateByIdWithHttpMessagesAsync(scheduleDefinitionId, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stop access review definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduleDefinitionId'>
            /// The id of the access review schedule definition.
            /// </param>
            public static void Stop(this IAccessReviewScheduleDefinitionsOperations operations, string scheduleDefinitionId)
            {
                operations.StopAsync(scheduleDefinitionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop access review definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduleDefinitionId'>
            /// The id of the access review schedule definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopAsync(this IAccessReviewScheduleDefinitionsOperations operations, string scheduleDefinitionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopWithHttpMessagesAsync(scheduleDefinitionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get access review schedule definitions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AccessReviewScheduleDefinition> ListNext(this IAccessReviewScheduleDefinitionsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get access review schedule definitions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AccessReviewScheduleDefinition>> ListNextAsync(this IAccessReviewScheduleDefinitionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
