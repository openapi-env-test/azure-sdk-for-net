// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Authorization
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AccessReviewInstanceOperations.
    /// </summary>
    public static partial class AccessReviewInstanceOperationsExtensions
    {
            /// <summary>
            /// An action to stop an access review instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduleDefinitionId'>
            /// The id of the access review schedule definition.
            /// </param>
            /// <param name='id'>
            /// The id of the access review instance.
            /// </param>
            public static void Stop(this IAccessReviewInstanceOperations operations, string scheduleDefinitionId, string id)
            {
                operations.StopAsync(scheduleDefinitionId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// An action to stop an access review instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduleDefinitionId'>
            /// The id of the access review schedule definition.
            /// </param>
            /// <param name='id'>
            /// The id of the access review instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopAsync(this IAccessReviewInstanceOperations operations, string scheduleDefinitionId, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopWithHttpMessagesAsync(scheduleDefinitionId, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// An action to reset all decisions for an access review instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduleDefinitionId'>
            /// The id of the access review schedule definition.
            /// </param>
            /// <param name='id'>
            /// The id of the access review instance.
            /// </param>
            public static void ResetDecisions(this IAccessReviewInstanceOperations operations, string scheduleDefinitionId, string id)
            {
                operations.ResetDecisionsAsync(scheduleDefinitionId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// An action to reset all decisions for an access review instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduleDefinitionId'>
            /// The id of the access review schedule definition.
            /// </param>
            /// <param name='id'>
            /// The id of the access review instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ResetDecisionsAsync(this IAccessReviewInstanceOperations operations, string scheduleDefinitionId, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ResetDecisionsWithHttpMessagesAsync(scheduleDefinitionId, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// An action to apply all decisions for an access review instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduleDefinitionId'>
            /// The id of the access review schedule definition.
            /// </param>
            /// <param name='id'>
            /// The id of the access review instance.
            /// </param>
            public static void ApplyDecisions(this IAccessReviewInstanceOperations operations, string scheduleDefinitionId, string id)
            {
                operations.ApplyDecisionsAsync(scheduleDefinitionId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// An action to apply all decisions for an access review instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduleDefinitionId'>
            /// The id of the access review schedule definition.
            /// </param>
            /// <param name='id'>
            /// The id of the access review instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApplyDecisionsAsync(this IAccessReviewInstanceOperations operations, string scheduleDefinitionId, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApplyDecisionsWithHttpMessagesAsync(scheduleDefinitionId, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// An action to send reminders for an access review instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduleDefinitionId'>
            /// The id of the access review schedule definition.
            /// </param>
            /// <param name='id'>
            /// The id of the access review instance.
            /// </param>
            public static void SendReminders(this IAccessReviewInstanceOperations operations, string scheduleDefinitionId, string id)
            {
                operations.SendRemindersAsync(scheduleDefinitionId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// An action to send reminders for an access review instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduleDefinitionId'>
            /// The id of the access review schedule definition.
            /// </param>
            /// <param name='id'>
            /// The id of the access review instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SendRemindersAsync(this IAccessReviewInstanceOperations operations, string scheduleDefinitionId, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SendRemindersWithHttpMessagesAsync(scheduleDefinitionId, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// An action to accept recommendations for decision in an access review
            /// instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduleDefinitionId'>
            /// The id of the access review schedule definition.
            /// </param>
            /// <param name='id'>
            /// The id of the access review instance.
            /// </param>
            public static void AcceptRecommendations(this IAccessReviewInstanceOperations operations, string scheduleDefinitionId, string id)
            {
                operations.AcceptRecommendationsAsync(scheduleDefinitionId, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// An action to accept recommendations for decision in an access review
            /// instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scheduleDefinitionId'>
            /// The id of the access review schedule definition.
            /// </param>
            /// <param name='id'>
            /// The id of the access review instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AcceptRecommendationsAsync(this IAccessReviewInstanceOperations operations, string scheduleDefinitionId, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AcceptRecommendationsWithHttpMessagesAsync(scheduleDefinitionId, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
