// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CosmosDB.Models
{
    public partial class SqlDedicatedGatewayServiceResourceProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(SqlDedicatedGatewayEndpoint))
            {
                writer.WritePropertyName("sqlDedicatedGatewayEndpoint");
                writer.WriteStringValue(SqlDedicatedGatewayEndpoint);
            }
            if (Optional.IsDefined(InstanceSize))
            {
                writer.WritePropertyName("instanceSize");
                writer.WriteStringValue(InstanceSize.Value.ToString());
            }
            if (Optional.IsDefined(InstanceCount))
            {
                writer.WritePropertyName("instanceCount");
                writer.WriteNumberValue(InstanceCount.Value);
            }
            writer.WritePropertyName("serviceType");
            writer.WriteStringValue(ServiceType.ToString());
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteObjectValue(item.Value);
            }
            writer.WriteEndObject();
        }

        internal static SqlDedicatedGatewayServiceResourceProperties DeserializeSqlDedicatedGatewayServiceResourceProperties(JsonElement element)
        {
            Optional<string> sqlDedicatedGatewayEndpoint = default;
            Optional<IReadOnlyList<SqlDedicatedGatewayRegionalServiceResource>> locations = default;
            Optional<DateTimeOffset> creationTime = default;
            Optional<ServiceSize> instanceSize = default;
            Optional<int> instanceCount = default;
            ServiceType serviceType = default;
            Optional<ServiceStatus> status = default;
            IDictionary<string, object> additionalProperties = default;
            Dictionary<string, object> additionalPropertiesDictionary = new Dictionary<string, object>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sqlDedicatedGatewayEndpoint"))
                {
                    sqlDedicatedGatewayEndpoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("locations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<SqlDedicatedGatewayRegionalServiceResource> array = new List<SqlDedicatedGatewayRegionalServiceResource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SqlDedicatedGatewayRegionalServiceResource.DeserializeSqlDedicatedGatewayRegionalServiceResource(item));
                    }
                    locations = array;
                    continue;
                }
                if (property.NameEquals("creationTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    creationTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("instanceSize"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    instanceSize = new ServiceSize(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("instanceCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    instanceCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("serviceType"))
                {
                    serviceType = new ServiceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    status = new ServiceStatus(property.Value.GetString());
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, property.Value.GetObject());
            }
            additionalProperties = additionalPropertiesDictionary;
            return new SqlDedicatedGatewayServiceResourceProperties(Optional.ToNullable(creationTime), Optional.ToNullable(instanceSize), Optional.ToNullable(instanceCount), serviceType, Optional.ToNullable(status), additionalProperties, sqlDedicatedGatewayEndpoint.Value, Optional.ToList(locations));
        }
    }
}
