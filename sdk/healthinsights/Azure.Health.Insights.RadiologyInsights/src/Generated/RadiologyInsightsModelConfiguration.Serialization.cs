// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Health.Insights.RadiologyInsights
{
    public partial class RadiologyInsightsModelConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Verbose))
            {
                writer.WritePropertyName("verbose"u8);
                writer.WriteBooleanValue(Verbose.Value);
            }
            if (Optional.IsDefined(IncludeEvidence))
            {
                writer.WritePropertyName("includeEvidence"u8);
                writer.WriteBooleanValue(IncludeEvidence.Value);
            }
            if (Optional.IsCollectionDefined(InferenceTypes))
            {
                writer.WritePropertyName("inferenceTypes"u8);
                writer.WriteStartArray();
                foreach (var item in InferenceTypes)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(InferenceOptions))
            {
                writer.WritePropertyName("inferenceOptions"u8);
                writer.WriteObjectValue(InferenceOptions);
            }
            if (Optional.IsDefined(Locale))
            {
                writer.WritePropertyName("locale"u8);
                writer.WriteStringValue(Locale);
            }
            writer.WriteEndObject();
        }

        internal static RadiologyInsightsModelConfiguration DeserializeRadiologyInsightsModelConfiguration(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<bool> verbose = default;
            Optional<bool> includeEvidence = default;
            Optional<IList<RadiologyInsightsInferenceType>> inferenceTypes = default;
            Optional<RadiologyInsightsInferenceOptions> inferenceOptions = default;
            Optional<string> locale = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("verbose"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    verbose = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("includeEvidence"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    includeEvidence = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("inferenceTypes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<RadiologyInsightsInferenceType> array = new List<RadiologyInsightsInferenceType>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new RadiologyInsightsInferenceType(item.GetString()));
                    }
                    inferenceTypes = array;
                    continue;
                }
                if (property.NameEquals("inferenceOptions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    inferenceOptions = RadiologyInsightsInferenceOptions.DeserializeRadiologyInsightsInferenceOptions(property.Value);
                    continue;
                }
                if (property.NameEquals("locale"u8))
                {
                    locale = property.Value.GetString();
                    continue;
                }
            }
            return new RadiologyInsightsModelConfiguration(Optional.ToNullable(verbose), Optional.ToNullable(includeEvidence), Optional.ToList(inferenceTypes), inferenceOptions.Value, locale.Value);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static RadiologyInsightsModelConfiguration FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeRadiologyInsightsModelConfiguration(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
