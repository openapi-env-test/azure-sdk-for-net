// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Health.Insights.RadiologyInsights
{
    internal partial class ImagingProcedureRecommendation : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(ProcedureCodes))
            {
                writer.WritePropertyName("procedureCodes"u8);
                writer.WriteStartArray();
                foreach (var item in ProcedureCodes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("imagingProcedures"u8);
            writer.WriteStartArray();
            foreach (var item in ImagingProcedures)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("kind"u8);
            writer.WriteStringValue(Kind);
            writer.WriteEndObject();
        }

        internal static ImagingProcedureRecommendation DeserializeImagingProcedureRecommendation(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IList<FhirR4CodeableConcept>> procedureCodes = default;
            IList<ImagingProcedure> imagingProcedures = default;
            string kind = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("procedureCodes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FhirR4CodeableConcept> array = new List<FhirR4CodeableConcept>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FhirR4CodeableConcept.DeserializeFhirR4CodeableConcept(item));
                    }
                    procedureCodes = array;
                    continue;
                }
                if (property.NameEquals("imagingProcedures"u8))
                {
                    List<ImagingProcedure> array = new List<ImagingProcedure>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ImagingProcedure.DeserializeImagingProcedure(item));
                    }
                    imagingProcedures = array;
                    continue;
                }
                if (property.NameEquals("kind"u8))
                {
                    kind = property.Value.GetString();
                    continue;
                }
            }
            return new ImagingProcedureRecommendation(kind, Optional.ToList(procedureCodes), imagingProcedures);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static new ImagingProcedureRecommendation FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeImagingProcedureRecommendation(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal override RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
