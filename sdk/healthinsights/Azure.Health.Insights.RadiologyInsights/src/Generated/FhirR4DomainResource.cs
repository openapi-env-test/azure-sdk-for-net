// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Health.Insights.RadiologyInsights
{
    /// <summary>
    /// A resource with narrative, extensions, and contained resources
    /// Based on [FHIR DomainResource](https://www.hl7.org/fhir/domainresource.html)
    /// Please note <see cref="FhirR4DomainResource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="FhirR4Observation"/>.
    /// </summary>
    internal abstract partial class FhirR4DomainResource
    {
        /// <summary> Initializes a new instance of <see cref="FhirR4DomainResource"/>. </summary>
        protected FhirR4DomainResource()
        {
            Contained = new ChangeTrackingList<IDictionary<string, BinaryData>>();
            Extension = new ChangeTrackingList<FhirR4Extension>();
            ModifierExtension = new ChangeTrackingList<FhirR4Extension>();
        }

        /// <summary> Initializes a new instance of <see cref="FhirR4DomainResource"/>. </summary>
        /// <param name="resourceType"> Discriminator. </param>
        /// <param name="text"> Text summary of the resource, for human interpretation. </param>
        /// <param name="contained"> Contained, inline Resources. </param>
        /// <param name="extension"> Additional Content defined by implementations. </param>
        /// <param name="modifierExtension"> Extensions that cannot be ignored. </param>
        internal FhirR4DomainResource(string resourceType, FhirR4Narrative text, IList<IDictionary<string, BinaryData>> contained, IList<FhirR4Extension> extension, IList<FhirR4Extension> modifierExtension)
        {
            ResourceType = resourceType;
            Text = text;
            Contained = contained;
            Extension = extension;
            ModifierExtension = modifierExtension;
        }

        /// <summary> Discriminator. </summary>
        internal string ResourceType { get; set; }
        /// <summary> Text summary of the resource, for human interpretation. </summary>
        public FhirR4Narrative Text { get; set; }
        /// <summary> Contained, inline Resources. </summary>
        public IList<IDictionary<string, BinaryData>> Contained { get; }
        /// <summary> Additional Content defined by implementations. </summary>
        public IList<FhirR4Extension> Extension { get; }
        /// <summary> Extensions that cannot be ignored. </summary>
        public IList<FhirR4Extension> ModifierExtension { get; }
    }
}
