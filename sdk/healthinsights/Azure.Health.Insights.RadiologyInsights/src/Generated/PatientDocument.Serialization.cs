// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Health.Insights.RadiologyInsights
{
    public partial class PatientDocument : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type.ToString());
            if (Optional.IsDefined(ClinicalType))
            {
                writer.WritePropertyName("clinicalType"u8);
                writer.WriteStringValue(ClinicalType.Value.ToString());
            }
            writer.WritePropertyName("id"u8);
            writer.WriteStringValue(Id);
            if (Optional.IsDefined(Language))
            {
                writer.WritePropertyName("language"u8);
                writer.WriteStringValue(Language);
            }
            if (Optional.IsDefined(CreatedAt))
            {
                writer.WritePropertyName("createdAt"u8);
                writer.WriteStringValue(CreatedAt.Value, "O");
            }
            if (Optional.IsCollectionDefined(Authors))
            {
                writer.WritePropertyName("authors"u8);
                writer.WriteStartArray();
                foreach (var item in Authors)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(SpecialtyType))
            {
                writer.WritePropertyName("specialtyType"u8);
                writer.WriteStringValue(SpecialtyType.Value.ToString());
            }
            if (Optional.IsDefined(AdministrativeMetadata))
            {
                writer.WritePropertyName("administrativeMetadata"u8);
                writer.WriteObjectValue(AdministrativeMetadata);
            }
            writer.WritePropertyName("content"u8);
            writer.WriteObjectValue(Content);
            writer.WriteEndObject();
        }

        internal static PatientDocument DeserializePatientDocument(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            DocumentType type = default;
            Optional<ClinicalDocumentType> clinicalType = default;
            string id = default;
            Optional<string> language = default;
            Optional<DateTimeOffset> createdAt = default;
            Optional<IList<DocumentAuthor>> authors = default;
            Optional<SpecialtyType> specialtyType = default;
            Optional<DocumentAdministrativeMetadata> administrativeMetadata = default;
            DocumentContent content = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"u8))
                {
                    type = new DocumentType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("clinicalType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    clinicalType = new ClinicalDocumentType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("language"u8))
                {
                    language = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("createdAt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createdAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("authors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DocumentAuthor> array = new List<DocumentAuthor>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DocumentAuthor.DeserializeDocumentAuthor(item));
                    }
                    authors = array;
                    continue;
                }
                if (property.NameEquals("specialtyType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    specialtyType = new SpecialtyType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("administrativeMetadata"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    administrativeMetadata = DocumentAdministrativeMetadata.DeserializeDocumentAdministrativeMetadata(property.Value);
                    continue;
                }
                if (property.NameEquals("content"u8))
                {
                    content = DocumentContent.DeserializeDocumentContent(property.Value);
                    continue;
                }
            }
            return new PatientDocument(type, Optional.ToNullable(clinicalType), id, language.Value, Optional.ToNullable(createdAt), Optional.ToList(authors), Optional.ToNullable(specialtyType), administrativeMetadata.Value, content);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static PatientDocument FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializePatientDocument(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
