// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Signall.Models;

namespace Azure.ResourceManager.Signall
{
    public partial class DryrunResourceData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(Parameters))
            {
                writer.WritePropertyName("parameters");
                writer.WriteObjectValue(Parameters);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static DryrunResourceData DeserializeDryrunResourceData(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<DryrunParameters> parameters = default;
            Optional<IReadOnlyList<DryrunPrerequisiteResult>> prerequisiteResults = default;
            Optional<IReadOnlyList<DryrunOperationPreview>> operationPreviews = default;
            Optional<string> provisioningState = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("parameters"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            parameters = DryrunParameters.DeserializeDryrunParameters(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("prerequisiteResults"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<DryrunPrerequisiteResult> array = new List<DryrunPrerequisiteResult>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(DryrunPrerequisiteResult.DeserializeDryrunPrerequisiteResult(item));
                            }
                            prerequisiteResults = array;
                            continue;
                        }
                        if (property0.NameEquals("operationPreviews"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<DryrunOperationPreview> array = new List<DryrunOperationPreview>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(DryrunOperationPreview.DeserializeDryrunOperationPreview(item));
                            }
                            operationPreviews = array;
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"))
                        {
                            provisioningState = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new DryrunResourceData(id, name, type, systemData.Value, parameters.Value, Optional.ToList(prerequisiteResults), Optional.ToList(operationPreviews), provisioningState.Value);
        }
    }
}
