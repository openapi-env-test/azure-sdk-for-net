// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Signall.Models
{
    public partial class AccessKeyInfoBase : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Permissions))
            {
                writer.WritePropertyName("permissions");
                writer.WriteStartArray();
                foreach (var item in Permissions)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("authType");
            writer.WriteStringValue(AuthType.ToString());
            writer.WriteEndObject();
        }

        internal static AccessKeyInfoBase DeserializeAccessKeyInfoBase(JsonElement element)
        {
            Optional<IList<AccessKeyPermission>> permissions = default;
            AuthType authType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("permissions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AccessKeyPermission> array = new List<AccessKeyPermission>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new AccessKeyPermission(item.GetString()));
                    }
                    permissions = array;
                    continue;
                }
                if (property.NameEquals("authType"))
                {
                    authType = new AuthType(property.Value.GetString());
                    continue;
                }
            }
            return new AccessKeyInfoBase(authType, Optional.ToList(permissions));
        }
    }
}
