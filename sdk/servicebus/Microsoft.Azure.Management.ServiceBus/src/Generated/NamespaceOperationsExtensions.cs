// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceBus
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for NamespaceOperations.
    /// </summary>
    public static partial class NamespaceOperationsExtensions
    {
            /// <summary>
            /// Get the status of long-running Namespace operation
            /// <see href="https://msdn.microsoft.com/en-us/library/azure/mt639408.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationName'>
            /// Name of the Location within the Azure.
            /// </param>
            /// <param name='operationResultId'>
            /// Name of the Namespace.
            /// </param>
            public static void Get(this INamespaceOperations operations, string locationName, string operationResultId)
            {
                operations.GetAsync(locationName, operationResultId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the status of long-running Namespace operation
            /// <see href="https://msdn.microsoft.com/en-us/library/azure/mt639408.aspx" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='locationName'>
            /// Name of the Location within the Azure.
            /// </param>
            /// <param name='operationResultId'>
            /// Name of the Namespace.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAsync(this INamespaceOperations operations, string locationName, string operationResultId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetWithHttpMessagesAsync(locationName, operationResultId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
