// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ServiceLinker.Models
{
    public partial class CreateOrUpdateDryrunParameters : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(TargetService))
            {
                writer.WritePropertyName("targetService"u8);
                writer.WriteObjectValue(TargetService);
            }
            if (Optional.IsDefined(AuthInfo))
            {
                writer.WritePropertyName("authInfo"u8);
                writer.WriteObjectValue(AuthInfo);
            }
            if (Optional.IsDefined(ClientType))
            {
                writer.WritePropertyName("clientType"u8);
                writer.WriteStringValue(ClientType.Value.ToString());
            }
            if (Optional.IsDefined(VnetSolution))
            {
                if (VnetSolution != null)
                {
                    writer.WritePropertyName("vNetSolution"u8);
                    writer.WriteObjectValue(VnetSolution);
                }
                else
                {
                    writer.WriteNull("vNetSolution");
                }
            }
            if (Optional.IsDefined(SecretStore))
            {
                if (SecretStore != null)
                {
                    writer.WritePropertyName("secretStore"u8);
                    writer.WriteObjectValue(SecretStore);
                }
                else
                {
                    writer.WriteNull("secretStore");
                }
            }
            if (Optional.IsDefined(Scope))
            {
                if (Scope != null)
                {
                    writer.WritePropertyName("scope"u8);
                    writer.WriteStringValue(Scope);
                }
                else
                {
                    writer.WriteNull("scope");
                }
            }
            if (Optional.IsDefined(PublicNetworkSolution))
            {
                if (PublicNetworkSolution != null)
                {
                    writer.WritePropertyName("publicNetworkSolution"u8);
                    writer.WriteObjectValue(PublicNetworkSolution);
                }
                else
                {
                    writer.WriteNull("publicNetworkSolution");
                }
            }
            if (Optional.IsDefined(ConfigurationInfo))
            {
                if (ConfigurationInfo != null)
                {
                    writer.WritePropertyName("configurationInfo"u8);
                    writer.WriteObjectValue(ConfigurationInfo);
                }
                else
                {
                    writer.WriteNull("configurationInfo");
                }
            }
            writer.WritePropertyName("actionName"u8);
            writer.WriteStringValue(ActionName.ToString());
            writer.WriteEndObject();
        }

        internal static CreateOrUpdateDryrunParameters DeserializeCreateOrUpdateDryrunParameters(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<TargetServiceBaseInfo> targetService = default;
            Optional<AuthBaseInfo> authInfo = default;
            Optional<LinkerClientType> clientType = default;
            Optional<string> provisioningState = default;
            Optional<VnetSolution> vnetSolution = default;
            Optional<LinkerSecretStore> secretStore = default;
            Optional<string> scope = default;
            Optional<PublicNetworkSolution> publicNetworkSolution = default;
            Optional<ConfigurationInfo> configurationInfo = default;
            DryrunActionName actionName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("targetService"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetService = TargetServiceBaseInfo.DeserializeTargetServiceBaseInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("authInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    authInfo = AuthBaseInfo.DeserializeAuthBaseInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("clientType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    clientType = new LinkerClientType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    provisioningState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vNetSolution"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        vnetSolution = null;
                        continue;
                    }
                    vnetSolution = VnetSolution.DeserializeVnetSolution(property.Value);
                    continue;
                }
                if (property.NameEquals("secretStore"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        secretStore = null;
                        continue;
                    }
                    secretStore = LinkerSecretStore.DeserializeLinkerSecretStore(property.Value);
                    continue;
                }
                if (property.NameEquals("scope"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        scope = null;
                        continue;
                    }
                    scope = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("publicNetworkSolution"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        publicNetworkSolution = null;
                        continue;
                    }
                    publicNetworkSolution = PublicNetworkSolution.DeserializePublicNetworkSolution(property.Value);
                    continue;
                }
                if (property.NameEquals("configurationInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        configurationInfo = null;
                        continue;
                    }
                    configurationInfo = ConfigurationInfo.DeserializeConfigurationInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("actionName"u8))
                {
                    actionName = new DryrunActionName(property.Value.GetString());
                    continue;
                }
            }
            return new CreateOrUpdateDryrunParameters(actionName, targetService.Value, authInfo.Value, Optional.ToNullable(clientType), provisioningState.Value, vnetSolution.Value, secretStore.Value, scope.Value, publicNetworkSolution.Value, configurationInfo.Value);
        }
    }
}
