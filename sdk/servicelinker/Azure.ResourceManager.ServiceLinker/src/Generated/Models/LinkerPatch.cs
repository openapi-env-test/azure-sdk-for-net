// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.ResourceManager.ServiceLinker.Models
{
    /// <summary> A Linker to be updated. </summary>
    public partial class LinkerPatch
    {
        /// <summary> Initializes a new instance of <see cref="LinkerPatch"/>. </summary>
        public LinkerPatch()
        {
        }

        /// <summary> Initializes a new instance of <see cref="LinkerPatch"/>. </summary>
        /// <param name="targetService">
        /// The target service properties
        /// Please note <see cref="TargetServiceBaseInfo"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureResourceInfo"/>, <see cref="ConfluentBootstrapServerInfo"/>, <see cref="ConfluentSchemaRegistryInfo"/> and <see cref="SelfHostedServer"/>.
        /// </param>
        /// <param name="authInfo">
        /// The authentication type.
        /// Please note <see cref="AuthBaseInfo"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AccessKeyInfoBase"/>, <see cref="SecretAuthInfo"/>, <see cref="ServicePrincipalCertificateAuthInfo"/>, <see cref="ServicePrincipalSecretAuthInfo"/>, <see cref="SystemAssignedIdentityAuthInfo"/>, <see cref="UserAccountAuthInfo"/> and <see cref="UserAssignedIdentityAuthInfo"/>.
        /// </param>
        /// <param name="clientType"> The application client type. </param>
        /// <param name="provisioningState"> The provisioning state. </param>
        /// <param name="vnetSolution"> The VNet solution. </param>
        /// <param name="secretStore"> An option to store secret value in secure place. </param>
        /// <param name="scope"> connection scope in source service. </param>
        /// <param name="publicNetworkSolution"> The network solution. </param>
        /// <param name="configurationInfo"> The connection information consumed by applications, including secrets, connection strings. </param>
        internal LinkerPatch(TargetServiceBaseInfo targetService, AuthBaseInfo authInfo, LinkerClientType? clientType, string provisioningState, VnetSolution vnetSolution, LinkerSecretStore secretStore, string scope, PublicNetworkSolution publicNetworkSolution, ConfigurationInfo configurationInfo)
        {
            TargetService = targetService;
            AuthInfo = authInfo;
            ClientType = clientType;
            ProvisioningState = provisioningState;
            VnetSolution = vnetSolution;
            SecretStore = secretStore;
            Scope = scope;
            PublicNetworkSolution = publicNetworkSolution;
            ConfigurationInfo = configurationInfo;
        }

        /// <summary>
        /// The target service properties
        /// Please note <see cref="TargetServiceBaseInfo"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureResourceInfo"/>, <see cref="ConfluentBootstrapServerInfo"/>, <see cref="ConfluentSchemaRegistryInfo"/> and <see cref="SelfHostedServer"/>.
        /// </summary>
        public TargetServiceBaseInfo TargetService { get; set; }
        /// <summary>
        /// The authentication type.
        /// Please note <see cref="AuthBaseInfo"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AccessKeyInfoBase"/>, <see cref="SecretAuthInfo"/>, <see cref="ServicePrincipalCertificateAuthInfo"/>, <see cref="ServicePrincipalSecretAuthInfo"/>, <see cref="SystemAssignedIdentityAuthInfo"/>, <see cref="UserAccountAuthInfo"/> and <see cref="UserAssignedIdentityAuthInfo"/>.
        /// </summary>
        public AuthBaseInfo AuthInfo { get; set; }
        /// <summary> The application client type. </summary>
        public LinkerClientType? ClientType { get; set; }
        /// <summary> The provisioning state. </summary>
        public string ProvisioningState { get; }
        /// <summary> The VNet solution. </summary>
        public VnetSolution VnetSolution { get; set; }
        /// <summary> An option to store secret value in secure place. </summary>
        public LinkerSecretStore SecretStore { get; set; }
        /// <summary> connection scope in source service. </summary>
        public string Scope { get; set; }
        /// <summary> The network solution. </summary>
        public PublicNetworkSolution PublicNetworkSolution { get; set; }
        /// <summary> The connection information consumed by applications, including secrets, connection strings. </summary>
        public ConfigurationInfo ConfigurationInfo { get; set; }
    }
}
