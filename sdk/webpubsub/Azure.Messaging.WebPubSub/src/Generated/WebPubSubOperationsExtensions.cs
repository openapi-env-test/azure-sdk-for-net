// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Messaging.WebPubSub
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for WebPubSubOperations.
    /// </summary>
    public static partial class WebPubSubOperationsExtensions
    {
            /// <summary>
            /// Generate token for the client to connect Azure Web PubSub service touch.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='userId'>
            /// User Id.
            /// </param>
            /// <param name='role'>
            /// Roles that the connection with the generated token will have.
            /// </param>
            /// <param name='minutesToExpire'>
            /// The expire time of the generated token.
            /// </param>
            public static ClientTokenResponse GenerateClientToken(this IWebPubSubOperations operations, string endpoint, string hub, string apiVersion, string userId = default(string), IList<string> role = default(IList<string>), int? minutesToExpire = 60)
            {
                return operations.GenerateClientTokenAsync(endpoint, hub, apiVersion, userId, role, minutesToExpire).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generate token for the client to connect Azure Web PubSub service touch.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='userId'>
            /// User Id.
            /// </param>
            /// <param name='role'>
            /// Roles that the connection with the generated token will have.
            /// </param>
            /// <param name='minutesToExpire'>
            /// The expire time of the generated token.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ClientTokenResponse> GenerateClientTokenAsync(this IWebPubSubOperations operations, string endpoint, string hub, string apiVersion, string userId = default(string), IList<string> role = default(IList<string>), int? minutesToExpire = 60, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateClientTokenWithHttpMessagesAsync(endpoint, hub, apiVersion, userId, role, minutesToExpire, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Close the connections in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='excluded'>
            /// Exclude these connectionIds when closing the connections in the hub.
            /// </param>
            /// <param name='reason'>
            /// The reason closing the client connection.
            /// </param>
            public static WebPubSubCloseAllConnectionsHeaders CloseAllConnections(this IWebPubSubOperations operations, string endpoint, string hub, string apiVersion, IList<string> excluded = default(IList<string>), string reason = default(string))
            {
                return operations.CloseAllConnectionsAsync(endpoint, hub, apiVersion, excluded, reason).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Close the connections in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='excluded'>
            /// Exclude these connectionIds when closing the connections in the hub.
            /// </param>
            /// <param name='reason'>
            /// The reason closing the client connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebPubSubCloseAllConnectionsHeaders> CloseAllConnectionsAsync(this IWebPubSubOperations operations, string endpoint, string hub, string apiVersion, IList<string> excluded = default(IList<string>), string reason = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CloseAllConnectionsWithHttpMessagesAsync(endpoint, hub, apiVersion, excluded, reason, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Broadcast content inside request body to all the connected client
            /// connections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='message'>
            /// The payload body.
            /// </param>
            /// <param name='excluded'>
            /// Excluded connection Ids.
            /// </param>
            public static WebPubSubSendToAllHeaders SendToAll(this IWebPubSubOperations operations, string endpoint, string hub, string apiVersion, string message, IList<string> excluded = default(IList<string>))
            {
                return operations.SendToAllAsync(endpoint, hub, apiVersion, message, excluded).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Broadcast content inside request body to all the connected client
            /// connections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='message'>
            /// The payload body.
            /// </param>
            /// <param name='excluded'>
            /// Excluded connection Ids.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebPubSubSendToAllHeaders> SendToAllAsync(this IWebPubSubOperations operations, string endpoint, string hub, string apiVersion, string message, IList<string> excluded = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendToAllWithHttpMessagesAsync(endpoint, hub, apiVersion, message, excluded, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Check if the connection with the given connectionId exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='connectionId'>
            /// The connection Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            public static WebPubSubConnectionExistsHeaders ConnectionExists(this IWebPubSubOperations operations, string endpoint, string hub, string connectionId, string apiVersion)
            {
                return operations.ConnectionExistsAsync(endpoint, hub, connectionId, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if the connection with the given connectionId exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='connectionId'>
            /// The connection Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebPubSubConnectionExistsHeaders> ConnectionExistsAsync(this IWebPubSubOperations operations, string endpoint, string hub, string connectionId, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConnectionExistsWithHttpMessagesAsync(endpoint, hub, connectionId, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Close the client connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='reason'>
            /// The reason closing the client connection.
            /// </param>
            public static WebPubSubCloseConnectionHeaders CloseConnection(this IWebPubSubOperations operations, string endpoint, string hub, string connectionId, string apiVersion, string reason = default(string))
            {
                return operations.CloseConnectionAsync(endpoint, hub, connectionId, apiVersion, reason).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Close the client connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='reason'>
            /// The reason closing the client connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebPubSubCloseConnectionHeaders> CloseConnectionAsync(this IWebPubSubOperations operations, string endpoint, string hub, string connectionId, string apiVersion, string reason = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CloseConnectionWithHttpMessagesAsync(endpoint, hub, connectionId, apiVersion, reason, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Send content inside request body to the specific connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='connectionId'>
            /// The connection Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='message'>
            /// The payload body.
            /// </param>
            public static WebPubSubSendToConnectionHeaders SendToConnection(this IWebPubSubOperations operations, string endpoint, string hub, string connectionId, string apiVersion, string message)
            {
                return operations.SendToConnectionAsync(endpoint, hub, connectionId, apiVersion, message).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send content inside request body to the specific connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='connectionId'>
            /// The connection Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='message'>
            /// The payload body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebPubSubSendToConnectionHeaders> SendToConnectionAsync(this IWebPubSubOperations operations, string endpoint, string hub, string connectionId, string apiVersion, string message, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendToConnectionWithHttpMessagesAsync(endpoint, hub, connectionId, apiVersion, message, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Check if there are any client connections inside the given group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            public static WebPubSubGroupExistsHeaders GroupExists(this IWebPubSubOperations operations, string endpoint, string hub, string group, string apiVersion)
            {
                return operations.GroupExistsAsync(endpoint, hub, group, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if there are any client connections inside the given group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebPubSubGroupExistsHeaders> GroupExistsAsync(this IWebPubSubOperations operations, string endpoint, string hub, string group, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GroupExistsWithHttpMessagesAsync(endpoint, hub, group, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Close connections in the specific group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='excluded'>
            /// Exclude these connectionIds when closing the connections in the group.
            /// </param>
            /// <param name='reason'>
            /// The reason closing the client connection.
            /// </param>
            public static WebPubSubCloseGroupConnectionsHeaders CloseGroupConnections(this IWebPubSubOperations operations, string endpoint, string hub, string group, string apiVersion, IList<string> excluded = default(IList<string>), string reason = default(string))
            {
                return operations.CloseGroupConnectionsAsync(endpoint, hub, group, apiVersion, excluded, reason).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Close connections in the specific group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='excluded'>
            /// Exclude these connectionIds when closing the connections in the group.
            /// </param>
            /// <param name='reason'>
            /// The reason closing the client connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebPubSubCloseGroupConnectionsHeaders> CloseGroupConnectionsAsync(this IWebPubSubOperations operations, string endpoint, string hub, string group, string apiVersion, IList<string> excluded = default(IList<string>), string reason = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CloseGroupConnectionsWithHttpMessagesAsync(endpoint, hub, group, apiVersion, excluded, reason, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Send content inside request body to a group of connections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='message'>
            /// The payload body.
            /// </param>
            /// <param name='excluded'>
            /// Excluded connection Ids
            /// </param>
            public static WebPubSubSendToGroupHeaders SendToGroup(this IWebPubSubOperations operations, string endpoint, string hub, string group, string apiVersion, string message, IList<string> excluded = default(IList<string>))
            {
                return operations.SendToGroupAsync(endpoint, hub, group, apiVersion, message, excluded).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send content inside request body to a group of connections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='message'>
            /// The payload body.
            /// </param>
            /// <param name='excluded'>
            /// Excluded connection Ids
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebPubSubSendToGroupHeaders> SendToGroupAsync(this IWebPubSubOperations operations, string endpoint, string hub, string group, string apiVersion, string message, IList<string> excluded = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendToGroupWithHttpMessagesAsync(endpoint, hub, group, apiVersion, message, excluded, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add a connection to the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            public static WebPubSubAddConnectionToGroupHeaders AddConnectionToGroup(this IWebPubSubOperations operations, string endpoint, string hub, string group, string connectionId, string apiVersion)
            {
                return operations.AddConnectionToGroupAsync(endpoint, hub, group, connectionId, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a connection to the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebPubSubAddConnectionToGroupHeaders> AddConnectionToGroupAsync(this IWebPubSubOperations operations, string endpoint, string hub, string group, string connectionId, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddConnectionToGroupWithHttpMessagesAsync(endpoint, hub, group, connectionId, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Remove a connection from the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            public static WebPubSubRemoveConnectionFromGroupHeaders RemoveConnectionFromGroup(this IWebPubSubOperations operations, string endpoint, string hub, string group, string connectionId, string apiVersion)
            {
                return operations.RemoveConnectionFromGroupAsync(endpoint, hub, group, connectionId, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a connection from the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebPubSubRemoveConnectionFromGroupHeaders> RemoveConnectionFromGroupAsync(this IWebPubSubOperations operations, string endpoint, string hub, string group, string connectionId, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveConnectionFromGroupWithHttpMessagesAsync(endpoint, hub, group, connectionId, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Check if there are any client connections connected for the given user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='userId'>
            /// Target user Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            public static WebPubSubUserExistsHeaders UserExists(this IWebPubSubOperations operations, string endpoint, string hub, string userId, string apiVersion)
            {
                return operations.UserExistsAsync(endpoint, hub, userId, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if there are any client connections connected for the given user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='userId'>
            /// Target user Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebPubSubUserExistsHeaders> UserExistsAsync(this IWebPubSubOperations operations, string endpoint, string hub, string userId, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UserExistsWithHttpMessagesAsync(endpoint, hub, userId, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Close connections for the specific user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='userId'>
            /// The user Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='excluded'>
            /// Exclude these connectionIds when closing the connections for the user.
            /// </param>
            /// <param name='reason'>
            /// The reason closing the client connection.
            /// </param>
            public static WebPubSubCloseUserConnectionsHeaders CloseUserConnections(this IWebPubSubOperations operations, string endpoint, string hub, string userId, string apiVersion, IList<string> excluded = default(IList<string>), string reason = default(string))
            {
                return operations.CloseUserConnectionsAsync(endpoint, hub, userId, apiVersion, excluded, reason).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Close connections for the specific user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='userId'>
            /// The user Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='excluded'>
            /// Exclude these connectionIds when closing the connections for the user.
            /// </param>
            /// <param name='reason'>
            /// The reason closing the client connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebPubSubCloseUserConnectionsHeaders> CloseUserConnectionsAsync(this IWebPubSubOperations operations, string endpoint, string hub, string userId, string apiVersion, IList<string> excluded = default(IList<string>), string reason = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CloseUserConnectionsWithHttpMessagesAsync(endpoint, hub, userId, apiVersion, excluded, reason, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Send content inside request body to the specific user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='userId'>
            /// The user Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='message'>
            /// The payload body.
            /// </param>
            public static WebPubSubSendToUserHeaders SendToUser(this IWebPubSubOperations operations, string endpoint, string hub, string userId, string apiVersion, string message)
            {
                return operations.SendToUserAsync(endpoint, hub, userId, apiVersion, message).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send content inside request body to the specific user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='userId'>
            /// The user Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='message'>
            /// The payload body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebPubSubSendToUserHeaders> SendToUserAsync(this IWebPubSubOperations operations, string endpoint, string hub, string userId, string apiVersion, string message, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendToUserWithHttpMessagesAsync(endpoint, hub, userId, apiVersion, message, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Add a user to the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='userId'>
            /// Target user Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            public static WebPubSubAddUserToGroupHeaders AddUserToGroup(this IWebPubSubOperations operations, string endpoint, string hub, string group, string userId, string apiVersion)
            {
                return operations.AddUserToGroupAsync(endpoint, hub, group, userId, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a user to the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='userId'>
            /// Target user Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebPubSubAddUserToGroupHeaders> AddUserToGroupAsync(this IWebPubSubOperations operations, string endpoint, string hub, string group, string userId, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddUserToGroupWithHttpMessagesAsync(endpoint, hub, group, userId, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Remove a user from the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='userId'>
            /// Target user Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            public static WebPubSubRemoveUserFromGroupHeaders RemoveUserFromGroup(this IWebPubSubOperations operations, string endpoint, string hub, string group, string userId, string apiVersion)
            {
                return operations.RemoveUserFromGroupAsync(endpoint, hub, group, userId, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a user from the target group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='group'>
            /// Target group name, which length should be greater than 0 and less than
            /// 1025.
            /// </param>
            /// <param name='userId'>
            /// Target user Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebPubSubRemoveUserFromGroupHeaders> RemoveUserFromGroupAsync(this IWebPubSubOperations operations, string endpoint, string hub, string group, string userId, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveUserFromGroupWithHttpMessagesAsync(endpoint, hub, group, userId, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Remove a user from all groups.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='userId'>
            /// Target user Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            public static WebPubSubRemoveUserFromAllGroupsHeaders RemoveUserFromAllGroups(this IWebPubSubOperations operations, string endpoint, string hub, string userId, string apiVersion)
            {
                return operations.RemoveUserFromAllGroupsAsync(endpoint, hub, userId, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a user from all groups.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='userId'>
            /// Target user Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebPubSubRemoveUserFromAllGroupsHeaders> RemoveUserFromAllGroupsAsync(this IWebPubSubOperations operations, string endpoint, string hub, string userId, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveUserFromAllGroupsWithHttpMessagesAsync(endpoint, hub, userId, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Grant permission to the connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='permission'>
            /// The permission: current supported actions are joinLeaveGroup and
            /// sendToGroup. Possible values include: 'sendToGroup', 'joinLeaveGroup'
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='targetName'>
            /// The meaning of the target depends on the specific permission. For
            /// joinLeaveGroup and sendToGroup, targetName is a required parameter standing
            /// for the group name.
            /// </param>
            public static WebPubSubGrantPermissionHeaders GrantPermission(this IWebPubSubOperations operations, string endpoint, string hub, string permission, string connectionId, string apiVersion, string targetName = default(string))
            {
                return operations.GrantPermissionAsync(endpoint, hub, permission, connectionId, apiVersion, targetName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Grant permission to the connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='permission'>
            /// The permission: current supported actions are joinLeaveGroup and
            /// sendToGroup. Possible values include: 'sendToGroup', 'joinLeaveGroup'
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='targetName'>
            /// The meaning of the target depends on the specific permission. For
            /// joinLeaveGroup and sendToGroup, targetName is a required parameter standing
            /// for the group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebPubSubGrantPermissionHeaders> GrantPermissionAsync(this IWebPubSubOperations operations, string endpoint, string hub, string permission, string connectionId, string apiVersion, string targetName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GrantPermissionWithHttpMessagesAsync(endpoint, hub, permission, connectionId, apiVersion, targetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Revoke permission for the connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='permission'>
            /// The permission: current supported actions are joinLeaveGroup and
            /// sendToGroup. Possible values include: 'sendToGroup', 'joinLeaveGroup'
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='targetName'>
            /// The meaning of the target depends on the specific permission. For
            /// joinLeaveGroup and sendToGroup, targetName is a required parameter standing
            /// for the group name.
            /// </param>
            public static WebPubSubRevokePermissionHeaders RevokePermission(this IWebPubSubOperations operations, string endpoint, string hub, string permission, string connectionId, string apiVersion, string targetName = default(string))
            {
                return operations.RevokePermissionAsync(endpoint, hub, permission, connectionId, apiVersion, targetName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Revoke permission for the connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='permission'>
            /// The permission: current supported actions are joinLeaveGroup and
            /// sendToGroup. Possible values include: 'sendToGroup', 'joinLeaveGroup'
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='targetName'>
            /// The meaning of the target depends on the specific permission. For
            /// joinLeaveGroup and sendToGroup, targetName is a required parameter standing
            /// for the group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebPubSubRevokePermissionHeaders> RevokePermissionAsync(this IWebPubSubOperations operations, string endpoint, string hub, string permission, string connectionId, string apiVersion, string targetName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RevokePermissionWithHttpMessagesAsync(endpoint, hub, permission, connectionId, apiVersion, targetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Check if a connection has permission to the specified action.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='permission'>
            /// The permission: current supported actions are joinLeaveGroup and
            /// sendToGroup. Possible values include: 'sendToGroup', 'joinLeaveGroup'
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='targetName'>
            /// The meaning of the target depends on the specific permission. For
            /// joinLeaveGroup and sendToGroup, targetName is a required parameter standing
            /// for the group name.
            /// </param>
            public static WebPubSubCheckPermissionHeaders CheckPermission(this IWebPubSubOperations operations, string endpoint, string hub, string permission, string connectionId, string apiVersion, string targetName = default(string))
            {
                return operations.CheckPermissionAsync(endpoint, hub, permission, connectionId, apiVersion, targetName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if a connection has permission to the specified action.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpoint'>
            /// HTTP or HTTPS endpoint for the Web PubSub service instance.
            /// </param>
            /// <param name='hub'>
            /// Target hub name, which should start with alphabetic characters and only
            /// contain alpha-numeric characters or underscore.
            /// </param>
            /// <param name='permission'>
            /// The permission: current supported actions are joinLeaveGroup and
            /// sendToGroup. Possible values include: 'sendToGroup', 'joinLeaveGroup'
            /// </param>
            /// <param name='connectionId'>
            /// Target connection Id.
            /// </param>
            /// <param name='apiVersion'>
            /// The version of the REST APIs.
            /// </param>
            /// <param name='targetName'>
            /// The meaning of the target depends on the specific permission. For
            /// joinLeaveGroup and sendToGroup, targetName is a required parameter standing
            /// for the group name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebPubSubCheckPermissionHeaders> CheckPermissionAsync(this IWebPubSubOperations operations, string endpoint, string hub, string permission, string connectionId, string apiVersion, string targetName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckPermissionWithHttpMessagesAsync(endpoint, hub, permission, connectionId, apiVersion, targetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

    }
}
