// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.ContainerService.Models;

namespace Azure.ResourceManager.ContainerService
{
    /// <summary> The MaintenanceConfigurations service client. </summary>
    public partial class MaintenanceConfigurationsOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal MaintenanceConfigurationsRestOperations RestClient { get; }
        /// <summary> Initializes a new instance of MaintenanceConfigurationsOperations for mocking. </summary>
        protected MaintenanceConfigurationsOperations()
        {
        }
        /// <summary> Initializes a new instance of MaintenanceConfigurationsOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal MaintenanceConfigurationsOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null, string apiVersion = "2020-12-01")
        {
            RestClient = new MaintenanceConfigurationsRestOperations(clientDiagnostics, pipeline, subscriptionId, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Gets the details of maintenance configurations by managed cluster and resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="configName"> The name of the maintenance configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<MaintenanceConfiguration>> GetAsync(string resourceGroupName, string resourceName, string configName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MaintenanceConfigurationsOperations.Get");
            scope.Start();
            try
            {
                return await RestClient.GetAsync(resourceGroupName, resourceName, configName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the details of maintenance configurations by managed cluster and resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="configName"> The name of the maintenance configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<MaintenanceConfiguration> Get(string resourceGroupName, string resourceName, string configName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MaintenanceConfigurationsOperations.Get");
            scope.Start();
            try
            {
                return RestClient.Get(resourceGroupName, resourceName, configName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a maintenance configuration in the specified managed cluster. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="configName"> The name of the maintenance configuration. </param>
        /// <param name="parameters"> Parameters supplied to the Create or Update a default maintenance configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<MaintenanceConfiguration>> CreateOrUpdateAsync(string resourceGroupName, string resourceName, string configName, MaintenanceConfiguration parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MaintenanceConfigurationsOperations.CreateOrUpdate");
            scope.Start();
            try
            {
                return await RestClient.CreateOrUpdateAsync(resourceGroupName, resourceName, configName, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a maintenance configuration in the specified managed cluster. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="configName"> The name of the maintenance configuration. </param>
        /// <param name="parameters"> Parameters supplied to the Create or Update a default maintenance configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<MaintenanceConfiguration> CreateOrUpdate(string resourceGroupName, string resourceName, string configName, MaintenanceConfiguration parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MaintenanceConfigurationsOperations.CreateOrUpdate");
            scope.Start();
            try
            {
                return RestClient.CreateOrUpdate(resourceGroupName, resourceName, configName, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the maintenance configuration in the specified managed cluster. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="configName"> The name of the maintenance configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAsync(string resourceGroupName, string resourceName, string configName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MaintenanceConfigurationsOperations.Delete");
            scope.Start();
            try
            {
                return await RestClient.DeleteAsync(resourceGroupName, resourceName, configName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the maintenance configuration in the specified managed cluster. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="configName"> The name of the maintenance configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Delete(string resourceGroupName, string resourceName, string configName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MaintenanceConfigurationsOperations.Delete");
            scope.Start();
            try
            {
                return RestClient.Delete(resourceGroupName, resourceName, configName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of maintenance configurations in the specified managed cluster. The operation returns properties of each maintenance configuration. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="resourceName"/> is null. </exception>
        public virtual AsyncPageable<MaintenanceConfiguration> ListByManagedClusterAsync(string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }

            async Task<Page<MaintenanceConfiguration>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("MaintenanceConfigurationsOperations.ListByManagedCluster");
                scope.Start();
                try
                {
                    var response = await RestClient.ListByManagedClusterAsync(resourceGroupName, resourceName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<MaintenanceConfiguration>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("MaintenanceConfigurationsOperations.ListByManagedCluster");
                scope.Start();
                try
                {
                    var response = await RestClient.ListByManagedClusterNextPageAsync(nextLink, resourceGroupName, resourceName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of maintenance configurations in the specified managed cluster. The operation returns properties of each maintenance configuration. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="resourceName"/> is null. </exception>
        public virtual Pageable<MaintenanceConfiguration> ListByManagedCluster(string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }

            Page<MaintenanceConfiguration> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("MaintenanceConfigurationsOperations.ListByManagedCluster");
                scope.Start();
                try
                {
                    var response = RestClient.ListByManagedCluster(resourceGroupName, resourceName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<MaintenanceConfiguration> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("MaintenanceConfigurationsOperations.ListByManagedCluster");
                scope.Start();
                try
                {
                    var response = RestClient.ListByManagedClusterNextPage(nextLink, resourceGroupName, resourceName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
