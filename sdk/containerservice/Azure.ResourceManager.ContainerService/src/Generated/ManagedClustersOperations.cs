// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.ContainerService.Models;

namespace Azure.ResourceManager.ContainerService
{
    /// <summary> The ManagedClusters service client. </summary>
    public partial class ManagedClustersOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal ManagedClustersRestOperations RestClient { get; }
        /// <summary> Initializes a new instance of ManagedClustersOperations for mocking. </summary>
        protected ManagedClustersOperations()
        {
        }
        /// <summary> Initializes a new instance of ManagedClustersOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal ManagedClustersOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null, string apiVersion = "2020-12-01")
        {
            RestClient = new ManagedClustersRestOperations(clientDiagnostics, pipeline, subscriptionId, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Gets the details of the upgrade profile for a managed cluster with a specified resource group and name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ManagedClusterUpgradeProfile>> GetUpgradeProfileAsync(string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.GetUpgradeProfile");
            scope.Start();
            try
            {
                return await RestClient.GetUpgradeProfileAsync(resourceGroupName, resourceName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the details of the upgrade profile for a managed cluster with a specified resource group and name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ManagedClusterUpgradeProfile> GetUpgradeProfile(string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.GetUpgradeProfile");
            scope.Start();
            try
            {
                return RestClient.GetUpgradeProfile(resourceGroupName, resourceName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the accessProfile for the specified role name of the managed cluster with a specified resource group and name. **WARNING**: This API will be deprecated. Instead use [ListClusterUserCredentials](https://docs.microsoft.com/en-us/rest/api/aks/managedclusters/listclusterusercredentials) or [ListClusterAdminCredentials](https://docs.microsoft.com/en-us/rest/api/aks/managedclusters/listclusteradmincredentials) . </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="roleName"> The name of the role for managed cluster accessProfile resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ManagedClusterAccessProfile>> GetAccessProfileAsync(string resourceGroupName, string resourceName, string roleName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.GetAccessProfile");
            scope.Start();
            try
            {
                return await RestClient.GetAccessProfileAsync(resourceGroupName, resourceName, roleName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the accessProfile for the specified role name of the managed cluster with a specified resource group and name. **WARNING**: This API will be deprecated. Instead use [ListClusterUserCredentials](https://docs.microsoft.com/en-us/rest/api/aks/managedclusters/listclusterusercredentials) or [ListClusterAdminCredentials](https://docs.microsoft.com/en-us/rest/api/aks/managedclusters/listclusteradmincredentials) . </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="roleName"> The name of the role for managed cluster accessProfile resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ManagedClusterAccessProfile> GetAccessProfile(string resourceGroupName, string resourceName, string roleName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.GetAccessProfile");
            scope.Start();
            try
            {
                return RestClient.GetAccessProfile(resourceGroupName, resourceName, roleName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets cluster admin credential of the managed cluster with a specified resource group and name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CredentialResults>> ListClusterAdminCredentialsAsync(string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.ListClusterAdminCredentials");
            scope.Start();
            try
            {
                return await RestClient.ListClusterAdminCredentialsAsync(resourceGroupName, resourceName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets cluster admin credential of the managed cluster with a specified resource group and name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CredentialResults> ListClusterAdminCredentials(string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.ListClusterAdminCredentials");
            scope.Start();
            try
            {
                return RestClient.ListClusterAdminCredentials(resourceGroupName, resourceName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets cluster user credential of the managed cluster with a specified resource group and name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CredentialResults>> ListClusterUserCredentialsAsync(string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.ListClusterUserCredentials");
            scope.Start();
            try
            {
                return await RestClient.ListClusterUserCredentialsAsync(resourceGroupName, resourceName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets cluster user credential of the managed cluster with a specified resource group and name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CredentialResults> ListClusterUserCredentials(string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.ListClusterUserCredentials");
            scope.Start();
            try
            {
                return RestClient.ListClusterUserCredentials(resourceGroupName, resourceName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets cluster monitoring user credential of the managed cluster with a specified resource group and name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CredentialResults>> ListClusterMonitoringUserCredentialsAsync(string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.ListClusterMonitoringUserCredentials");
            scope.Start();
            try
            {
                return await RestClient.ListClusterMonitoringUserCredentialsAsync(resourceGroupName, resourceName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets cluster monitoring user credential of the managed cluster with a specified resource group and name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CredentialResults> ListClusterMonitoringUserCredentials(string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.ListClusterMonitoringUserCredentials");
            scope.Start();
            try
            {
                return RestClient.ListClusterMonitoringUserCredentials(resourceGroupName, resourceName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the details of the managed cluster with a specified resource group and name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ManagedCluster>> GetAsync(string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.Get");
            scope.Start();
            try
            {
                return await RestClient.GetAsync(resourceGroupName, resourceName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the details of the managed cluster with a specified resource group and name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ManagedCluster> Get(string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.Get");
            scope.Start();
            try
            {
                return RestClient.Get(resourceGroupName, resourceName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of managed clusters in the specified subscription. The operation returns properties of each managed cluster. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<ManagedCluster> ListAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ManagedCluster>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.List");
                scope.Start();
                try
                {
                    var response = await RestClient.ListAsync(cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ManagedCluster>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.List");
                scope.Start();
                try
                {
                    var response = await RestClient.ListNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of managed clusters in the specified subscription. The operation returns properties of each managed cluster. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<ManagedCluster> List(CancellationToken cancellationToken = default)
        {
            Page<ManagedCluster> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.List");
                scope.Start();
                try
                {
                    var response = RestClient.List(cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ManagedCluster> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.List");
                scope.Start();
                try
                {
                    var response = RestClient.ListNextPage(nextLink, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists managed clusters in the specified subscription and resource group. The operation returns properties of each managed cluster. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        public virtual AsyncPageable<ManagedCluster> ListByResourceGroupAsync(string resourceGroupName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            async Task<Page<ManagedCluster>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.ListByResourceGroup");
                scope.Start();
                try
                {
                    var response = await RestClient.ListByResourceGroupAsync(resourceGroupName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ManagedCluster>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.ListByResourceGroup");
                scope.Start();
                try
                {
                    var response = await RestClient.ListByResourceGroupNextPageAsync(nextLink, resourceGroupName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists managed clusters in the specified subscription and resource group. The operation returns properties of each managed cluster. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> is null. </exception>
        public virtual Pageable<ManagedCluster> ListByResourceGroup(string resourceGroupName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }

            Page<ManagedCluster> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.ListByResourceGroup");
                scope.Start();
                try
                {
                    var response = RestClient.ListByResourceGroup(resourceGroupName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ManagedCluster> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.ListByResourceGroup");
                scope.Start();
                try
                {
                    var response = RestClient.ListByResourceGroupNextPage(nextLink, resourceGroupName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Creates or updates a managed cluster with the specified configuration for agents and Kubernetes version. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="parameters"> Parameters supplied to the Create or Update a Managed Cluster operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceName"/>, or <paramref name="parameters"/> is null. </exception>
        public virtual async Task<ManagedClustersCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string resourceName, ManagedCluster parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.StartCreateOrUpdate");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CreateOrUpdateAsync(resourceGroupName, resourceName, parameters, cancellationToken).ConfigureAwait(false);
                return new ManagedClustersCreateOrUpdateOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateOrUpdateRequest(resourceGroupName, resourceName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a managed cluster with the specified configuration for agents and Kubernetes version. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="parameters"> Parameters supplied to the Create or Update a Managed Cluster operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceName"/>, or <paramref name="parameters"/> is null. </exception>
        public virtual ManagedClustersCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string resourceName, ManagedCluster parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.StartCreateOrUpdate");
            scope.Start();
            try
            {
                var originalResponse = RestClient.CreateOrUpdate(resourceGroupName, resourceName, parameters, cancellationToken);
                return new ManagedClustersCreateOrUpdateOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateOrUpdateRequest(resourceGroupName, resourceName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates a managed cluster with the specified tags. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="parameters"> Parameters supplied to the Update Managed Cluster Tags operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceName"/>, or <paramref name="parameters"/> is null. </exception>
        public virtual async Task<ManagedClustersUpdateTagsOperation> StartUpdateTagsAsync(string resourceGroupName, string resourceName, TagsObject parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.StartUpdateTags");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.UpdateTagsAsync(resourceGroupName, resourceName, parameters, cancellationToken).ConfigureAwait(false);
                return new ManagedClustersUpdateTagsOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateTagsRequest(resourceGroupName, resourceName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates a managed cluster with the specified tags. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="parameters"> Parameters supplied to the Update Managed Cluster Tags operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceName"/>, or <paramref name="parameters"/> is null. </exception>
        public virtual ManagedClustersUpdateTagsOperation StartUpdateTags(string resourceGroupName, string resourceName, TagsObject parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.StartUpdateTags");
            scope.Start();
            try
            {
                var originalResponse = RestClient.UpdateTags(resourceGroupName, resourceName, parameters, cancellationToken);
                return new ManagedClustersUpdateTagsOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateTagsRequest(resourceGroupName, resourceName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the managed cluster with a specified resource group and name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="resourceName"/> is null. </exception>
        public virtual async Task<ManagedClustersDeleteOperation> StartDeleteAsync(string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.StartDelete");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.DeleteAsync(resourceGroupName, resourceName, cancellationToken).ConfigureAwait(false);
                return new ManagedClustersDeleteOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteRequest(resourceGroupName, resourceName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the managed cluster with a specified resource group and name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="resourceName"/> is null. </exception>
        public virtual ManagedClustersDeleteOperation StartDelete(string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.StartDelete");
            scope.Start();
            try
            {
                var originalResponse = RestClient.Delete(resourceGroupName, resourceName, cancellationToken);
                return new ManagedClustersDeleteOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteRequest(resourceGroupName, resourceName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the service principal Profile for a managed cluster. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="parameters"> Parameters supplied to the Reset Service Principal Profile operation for a Managed Cluster. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceName"/>, or <paramref name="parameters"/> is null. </exception>
        public virtual async Task<ManagedClustersResetServicePrincipalProfileOperation> StartResetServicePrincipalProfileAsync(string resourceGroupName, string resourceName, ManagedClusterServicePrincipalProfile parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.StartResetServicePrincipalProfile");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.ResetServicePrincipalProfileAsync(resourceGroupName, resourceName, parameters, cancellationToken).ConfigureAwait(false);
                return new ManagedClustersResetServicePrincipalProfileOperation(_clientDiagnostics, _pipeline, RestClient.CreateResetServicePrincipalProfileRequest(resourceGroupName, resourceName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the service principal Profile for a managed cluster. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="parameters"> Parameters supplied to the Reset Service Principal Profile operation for a Managed Cluster. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceName"/>, or <paramref name="parameters"/> is null. </exception>
        public virtual ManagedClustersResetServicePrincipalProfileOperation StartResetServicePrincipalProfile(string resourceGroupName, string resourceName, ManagedClusterServicePrincipalProfile parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.StartResetServicePrincipalProfile");
            scope.Start();
            try
            {
                var originalResponse = RestClient.ResetServicePrincipalProfile(resourceGroupName, resourceName, parameters, cancellationToken);
                return new ManagedClustersResetServicePrincipalProfileOperation(_clientDiagnostics, _pipeline, RestClient.CreateResetServicePrincipalProfileRequest(resourceGroupName, resourceName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the AAD Profile for a managed cluster. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="parameters"> Parameters supplied to the Reset AAD Profile operation for a Managed Cluster. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceName"/>, or <paramref name="parameters"/> is null. </exception>
        public virtual async Task<ManagedClustersResetAADProfileOperation> StartResetAADProfileAsync(string resourceGroupName, string resourceName, ManagedClusterAADProfile parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.StartResetAADProfile");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.ResetAADProfileAsync(resourceGroupName, resourceName, parameters, cancellationToken).ConfigureAwait(false);
                return new ManagedClustersResetAADProfileOperation(_clientDiagnostics, _pipeline, RestClient.CreateResetAADProfileRequest(resourceGroupName, resourceName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the AAD Profile for a managed cluster. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="parameters"> Parameters supplied to the Reset AAD Profile operation for a Managed Cluster. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceName"/>, or <paramref name="parameters"/> is null. </exception>
        public virtual ManagedClustersResetAADProfileOperation StartResetAADProfile(string resourceGroupName, string resourceName, ManagedClusterAADProfile parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.StartResetAADProfile");
            scope.Start();
            try
            {
                var originalResponse = RestClient.ResetAADProfile(resourceGroupName, resourceName, parameters, cancellationToken);
                return new ManagedClustersResetAADProfileOperation(_clientDiagnostics, _pipeline, RestClient.CreateResetAADProfileRequest(resourceGroupName, resourceName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Rotate certificates of a managed cluster. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="resourceName"/> is null. </exception>
        public virtual async Task<ManagedClustersRotateClusterCertificatesOperation> StartRotateClusterCertificatesAsync(string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.StartRotateClusterCertificates");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.RotateClusterCertificatesAsync(resourceGroupName, resourceName, cancellationToken).ConfigureAwait(false);
                return new ManagedClustersRotateClusterCertificatesOperation(_clientDiagnostics, _pipeline, RestClient.CreateRotateClusterCertificatesRequest(resourceGroupName, resourceName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Rotate certificates of a managed cluster. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="resourceName"/> is null. </exception>
        public virtual ManagedClustersRotateClusterCertificatesOperation StartRotateClusterCertificates(string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.StartRotateClusterCertificates");
            scope.Start();
            try
            {
                var originalResponse = RestClient.RotateClusterCertificates(resourceGroupName, resourceName, cancellationToken);
                return new ManagedClustersRotateClusterCertificatesOperation(_clientDiagnostics, _pipeline, RestClient.CreateRotateClusterCertificatesRequest(resourceGroupName, resourceName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Stops a Running Managed Cluster. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="resourceName"/> is null. </exception>
        public virtual async Task<ManagedClustersStopOperation> StartStopAsync(string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.StartStop");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.StopAsync(resourceGroupName, resourceName, cancellationToken).ConfigureAwait(false);
                return new ManagedClustersStopOperation(_clientDiagnostics, _pipeline, RestClient.CreateStopRequest(resourceGroupName, resourceName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Stops a Running Managed Cluster. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="resourceName"/> is null. </exception>
        public virtual ManagedClustersStopOperation StartStop(string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.StartStop");
            scope.Start();
            try
            {
                var originalResponse = RestClient.Stop(resourceGroupName, resourceName, cancellationToken);
                return new ManagedClustersStopOperation(_clientDiagnostics, _pipeline, RestClient.CreateStopRequest(resourceGroupName, resourceName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Starts a Stopped Managed Cluster. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="resourceName"/> is null. </exception>
        public virtual async Task<ManagedClustersStartOperation> StartStartAsync(string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.StartStart");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.StartAsync(resourceGroupName, resourceName, cancellationToken).ConfigureAwait(false);
                return new ManagedClustersStartOperation(_clientDiagnostics, _pipeline, RestClient.CreateStartRequest(resourceGroupName, resourceName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Starts a Stopped Managed Cluster. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="resourceName"/> is null. </exception>
        public virtual ManagedClustersStartOperation StartStart(string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }

            using var scope = _clientDiagnostics.CreateScope("ManagedClustersOperations.StartStart");
            scope.Start();
            try
            {
                var originalResponse = RestClient.Start(resourceGroupName, resourceName, cancellationToken);
                return new ManagedClustersStartOperation(_clientDiagnostics, _pipeline, RestClient.CreateStartRequest(resourceGroupName, resourceName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
