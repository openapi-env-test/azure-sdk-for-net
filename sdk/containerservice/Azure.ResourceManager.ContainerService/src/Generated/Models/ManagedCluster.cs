// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> Managed cluster. </summary>
    public partial class ManagedCluster : Resource
    {
        /// <summary> Initializes a new instance of ManagedCluster. </summary>
        /// <param name="location"> Resource location. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        public ManagedCluster(string location) : base(location)
        {
            if (location == null)
            {
                throw new ArgumentNullException(nameof(location));
            }

            AgentPoolProfiles = new ChangeTrackingList<ManagedClusterAgentPoolProfile>();
            AddonProfiles = new ChangeTrackingDictionary<string, ManagedClusterAddonProfile>();
            IdentityProfile = new ChangeTrackingDictionary<string, UserAssignedIdentity>();
        }

        /// <summary> Initializes a new instance of ManagedCluster. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="type"> Resource type. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="sku"> The managed cluster SKU. </param>
        /// <param name="identity"> The identity of the managed cluster, if configured. </param>
        /// <param name="provisioningState"> The current deployment or provisioning state, which only appears in the response. </param>
        /// <param name="powerState"> Represents the Power State of the cluster. </param>
        /// <param name="maxAgentPools"> The max number of agent pools for the managed cluster. </param>
        /// <param name="kubernetesVersion"> Version of Kubernetes specified when creating the managed cluster. </param>
        /// <param name="dnsPrefix"> DNS prefix specified when creating the managed cluster. </param>
        /// <param name="fqdn"> FQDN for the master pool. </param>
        /// <param name="privateFqdn"> FQDN of private cluster. </param>
        /// <param name="agentPoolProfiles"> Properties of the agent pool. </param>
        /// <param name="linuxProfile"> Profile for Linux VMs in the container service cluster. </param>
        /// <param name="windowsProfile"> Profile for Windows VMs in the container service cluster. </param>
        /// <param name="servicePrincipalProfile"> Information about a service principal identity for the cluster to use for manipulating Azure APIs. </param>
        /// <param name="addonProfiles"> Profile of managed cluster add-on. </param>
        /// <param name="podIdentityProfile"> Profile of managed cluster pod identity. </param>
        /// <param name="nodeResourceGroup"> Name of the resource group containing agent pool nodes. </param>
        /// <param name="enableRbac"> Whether to enable Kubernetes Role-Based Access Control. </param>
        /// <param name="enablePodSecurityPolicy"> (DEPRECATING) Whether to enable Kubernetes pod security policy (preview). This feature is set for removal on October 15th, 2020. Learn more at aka.ms/aks/azpodpolicy. </param>
        /// <param name="networkProfile"> Profile of network configuration. </param>
        /// <param name="aadProfile"> Profile of Azure Active Directory configuration. </param>
        /// <param name="autoUpgradeProfile"> Profile of auto upgrade configuration. </param>
        /// <param name="autoScalerProfile"> Parameters to be applied to the cluster-autoscaler when enabled. </param>
        /// <param name="apiServerAccessProfile"> Access profile for managed cluster API server. </param>
        /// <param name="diskEncryptionSetID"> ResourceId of the disk encryption set to use for enabling encryption at rest. </param>
        /// <param name="identityProfile"> Identities associated with the cluster. </param>
        internal ManagedCluster(string id, string name, string type, string location, IDictionary<string, string> tags, ManagedClusterSKU sku, ManagedClusterIdentity identity, string provisioningState, PowerState powerState, int? maxAgentPools, string kubernetesVersion, string dnsPrefix, string fqdn, string privateFqdn, IList<ManagedClusterAgentPoolProfile> agentPoolProfiles, ContainerServiceLinuxProfile linuxProfile, ManagedClusterWindowsProfile windowsProfile, ManagedClusterServicePrincipalProfile servicePrincipalProfile, IDictionary<string, ManagedClusterAddonProfile> addonProfiles, ManagedClusterPodIdentityProfile podIdentityProfile, string nodeResourceGroup, bool? enableRbac, bool? enablePodSecurityPolicy, ContainerServiceNetworkProfile networkProfile, ManagedClusterAADProfile aadProfile, ManagedClusterAutoUpgradeProfile autoUpgradeProfile, ManagedClusterPropertiesAutoScalerProfile autoScalerProfile, ManagedClusterAPIServerAccessProfile apiServerAccessProfile, string diskEncryptionSetID, IDictionary<string, UserAssignedIdentity> identityProfile) : base(id, name, type, location, tags)
        {
            Sku = sku;
            Identity = identity;
            ProvisioningState = provisioningState;
            PowerState = powerState;
            MaxAgentPools = maxAgentPools;
            KubernetesVersion = kubernetesVersion;
            DnsPrefix = dnsPrefix;
            Fqdn = fqdn;
            PrivateFqdn = privateFqdn;
            AgentPoolProfiles = agentPoolProfiles;
            LinuxProfile = linuxProfile;
            WindowsProfile = windowsProfile;
            ServicePrincipalProfile = servicePrincipalProfile;
            AddonProfiles = addonProfiles;
            PodIdentityProfile = podIdentityProfile;
            NodeResourceGroup = nodeResourceGroup;
            EnableRbac = enableRbac;
            EnablePodSecurityPolicy = enablePodSecurityPolicy;
            NetworkProfile = networkProfile;
            AadProfile = aadProfile;
            AutoUpgradeProfile = autoUpgradeProfile;
            AutoScalerProfile = autoScalerProfile;
            ApiServerAccessProfile = apiServerAccessProfile;
            DiskEncryptionSetID = diskEncryptionSetID;
            IdentityProfile = identityProfile;
        }

        /// <summary> The managed cluster SKU. </summary>
        public ManagedClusterSKU Sku { get; set; }
        /// <summary> The identity of the managed cluster, if configured. </summary>
        public ManagedClusterIdentity Identity { get; set; }
        /// <summary> The current deployment or provisioning state, which only appears in the response. </summary>
        public string ProvisioningState { get; }
        /// <summary> Represents the Power State of the cluster. </summary>
        public PowerState PowerState { get; }
        /// <summary> The max number of agent pools for the managed cluster. </summary>
        public int? MaxAgentPools { get; }
        /// <summary> Version of Kubernetes specified when creating the managed cluster. </summary>
        public string KubernetesVersion { get; set; }
        /// <summary> DNS prefix specified when creating the managed cluster. </summary>
        public string DnsPrefix { get; set; }
        /// <summary> FQDN for the master pool. </summary>
        public string Fqdn { get; }
        /// <summary> FQDN of private cluster. </summary>
        public string PrivateFqdn { get; }
        /// <summary> Properties of the agent pool. </summary>
        public IList<ManagedClusterAgentPoolProfile> AgentPoolProfiles { get; }
        /// <summary> Profile for Linux VMs in the container service cluster. </summary>
        public ContainerServiceLinuxProfile LinuxProfile { get; set; }
        /// <summary> Profile for Windows VMs in the container service cluster. </summary>
        public ManagedClusterWindowsProfile WindowsProfile { get; set; }
        /// <summary> Information about a service principal identity for the cluster to use for manipulating Azure APIs. </summary>
        public ManagedClusterServicePrincipalProfile ServicePrincipalProfile { get; set; }
        /// <summary> Profile of managed cluster add-on. </summary>
        public IDictionary<string, ManagedClusterAddonProfile> AddonProfiles { get; }
        /// <summary> Profile of managed cluster pod identity. </summary>
        public ManagedClusterPodIdentityProfile PodIdentityProfile { get; set; }
        /// <summary> Name of the resource group containing agent pool nodes. </summary>
        public string NodeResourceGroup { get; set; }
        /// <summary> Whether to enable Kubernetes Role-Based Access Control. </summary>
        public bool? EnableRbac { get; set; }
        /// <summary> (DEPRECATING) Whether to enable Kubernetes pod security policy (preview). This feature is set for removal on October 15th, 2020. Learn more at aka.ms/aks/azpodpolicy. </summary>
        public bool? EnablePodSecurityPolicy { get; set; }
        /// <summary> Profile of network configuration. </summary>
        public ContainerServiceNetworkProfile NetworkProfile { get; set; }
        /// <summary> Profile of Azure Active Directory configuration. </summary>
        public ManagedClusterAADProfile AadProfile { get; set; }
        /// <summary> Profile of auto upgrade configuration. </summary>
        public ManagedClusterAutoUpgradeProfile AutoUpgradeProfile { get; set; }
        /// <summary> Parameters to be applied to the cluster-autoscaler when enabled. </summary>
        public ManagedClusterPropertiesAutoScalerProfile AutoScalerProfile { get; set; }
        /// <summary> Access profile for managed cluster API server. </summary>
        public ManagedClusterAPIServerAccessProfile ApiServerAccessProfile { get; set; }
        /// <summary> ResourceId of the disk encryption set to use for enabling encryption at rest. </summary>
        public string DiskEncryptionSetID { get; set; }
        /// <summary> Identities associated with the cluster. </summary>
        public IDictionary<string, UserAssignedIdentity> IdentityProfile { get; }
    }
}
