// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> upgrade channel for auto upgrade. </summary>
    public readonly partial struct UpgradeChannel : IEquatable<UpgradeChannel>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="UpgradeChannel"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public UpgradeChannel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RapidValue = "rapid";
        private const string StableValue = "stable";
        private const string PatchValue = "patch";
        private const string NoneValue = "none";

        /// <summary> rapid. </summary>
        public static UpgradeChannel Rapid { get; } = new UpgradeChannel(RapidValue);
        /// <summary> stable. </summary>
        public static UpgradeChannel Stable { get; } = new UpgradeChannel(StableValue);
        /// <summary> patch. </summary>
        public static UpgradeChannel Patch { get; } = new UpgradeChannel(PatchValue);
        /// <summary> none. </summary>
        public static UpgradeChannel None { get; } = new UpgradeChannel(NoneValue);
        /// <summary> Determines if two <see cref="UpgradeChannel"/> values are the same. </summary>
        public static bool operator ==(UpgradeChannel left, UpgradeChannel right) => left.Equals(right);
        /// <summary> Determines if two <see cref="UpgradeChannel"/> values are not the same. </summary>
        public static bool operator !=(UpgradeChannel left, UpgradeChannel right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="UpgradeChannel"/>. </summary>
        public static implicit operator UpgradeChannel(string value) => new UpgradeChannel(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is UpgradeChannel other && Equals(other);
        /// <inheritdoc />
        public bool Equals(UpgradeChannel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
