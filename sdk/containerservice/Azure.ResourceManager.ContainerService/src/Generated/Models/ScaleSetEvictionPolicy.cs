// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> ScaleSetEvictionPolicy to be used to specify eviction policy for Spot virtual machine scale set. Default to Delete. </summary>
    public readonly partial struct ScaleSetEvictionPolicy : IEquatable<ScaleSetEvictionPolicy>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ScaleSetEvictionPolicy"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ScaleSetEvictionPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DeleteValue = "Delete";
        private const string DeallocateValue = "Deallocate";

        /// <summary> Delete. </summary>
        public static ScaleSetEvictionPolicy Delete { get; } = new ScaleSetEvictionPolicy(DeleteValue);
        /// <summary> Deallocate. </summary>
        public static ScaleSetEvictionPolicy Deallocate { get; } = new ScaleSetEvictionPolicy(DeallocateValue);
        /// <summary> Determines if two <see cref="ScaleSetEvictionPolicy"/> values are the same. </summary>
        public static bool operator ==(ScaleSetEvictionPolicy left, ScaleSetEvictionPolicy right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ScaleSetEvictionPolicy"/> values are not the same. </summary>
        public static bool operator !=(ScaleSetEvictionPolicy left, ScaleSetEvictionPolicy right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ScaleSetEvictionPolicy"/>. </summary>
        public static implicit operator ScaleSetEvictionPolicy(string value) => new ScaleSetEvictionPolicy(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ScaleSetEvictionPolicy other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ScaleSetEvictionPolicy other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
