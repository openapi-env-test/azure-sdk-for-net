// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> OSDiskType represents the type of an OS disk on an agent pool. </summary>
    public readonly partial struct OSDiskType : IEquatable<OSDiskType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="OSDiskType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OSDiskType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ManagedValue = "Managed";
        private const string EphemeralValue = "Ephemeral";

        /// <summary> Managed. </summary>
        public static OSDiskType Managed { get; } = new OSDiskType(ManagedValue);
        /// <summary> Ephemeral. </summary>
        public static OSDiskType Ephemeral { get; } = new OSDiskType(EphemeralValue);
        /// <summary> Determines if two <see cref="OSDiskType"/> values are the same. </summary>
        public static bool operator ==(OSDiskType left, OSDiskType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OSDiskType"/> values are not the same. </summary>
        public static bool operator !=(OSDiskType left, OSDiskType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="OSDiskType"/>. </summary>
        public static implicit operator OSDiskType(string value) => new OSDiskType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OSDiskType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OSDiskType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
