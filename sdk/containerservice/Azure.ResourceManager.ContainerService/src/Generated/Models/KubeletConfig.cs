// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> Kubelet configurations of agent nodes. </summary>
    public partial class KubeletConfig
    {
        /// <summary> Initializes a new instance of KubeletConfig. </summary>
        public KubeletConfig()
        {
            AllowedUnsafeSysctls = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of KubeletConfig. </summary>
        /// <param name="cpuManagerPolicy"> CPU Manager policy to use. </param>
        /// <param name="cpuCfsQuota"> Enable CPU CFS quota enforcement for containers that specify CPU limits. </param>
        /// <param name="cpuCfsQuotaPeriod"> Sets CPU CFS quota period value. </param>
        /// <param name="imageGcHighThreshold"> The percent of disk usage after which image garbage collection is always run. </param>
        /// <param name="imageGcLowThreshold"> The percent of disk usage before which image garbage collection is never run. </param>
        /// <param name="topologyManagerPolicy"> Topology Manager policy to use. </param>
        /// <param name="allowedUnsafeSysctls"> Allowlist of unsafe sysctls or unsafe sysctl patterns (ending in `*`). </param>
        /// <param name="failSwapOn"> If set to true it will make the Kubelet fail to start if swap is enabled on the node. </param>
        /// <param name="containerLogMaxSizeMB"> The maximum size (e.g. 10Mi) of container log file before it is rotated. </param>
        /// <param name="containerLogMaxFiles"> The maximum number of container log files that can be present for a container. The number must be ≥ 2. </param>
        /// <param name="podMaxPids"> The maximum number of processes per pod. </param>
        internal KubeletConfig(string cpuManagerPolicy, bool? cpuCfsQuota, string cpuCfsQuotaPeriod, int? imageGcHighThreshold, int? imageGcLowThreshold, string topologyManagerPolicy, IList<string> allowedUnsafeSysctls, bool? failSwapOn, int? containerLogMaxSizeMB, int? containerLogMaxFiles, int? podMaxPids)
        {
            CpuManagerPolicy = cpuManagerPolicy;
            CpuCfsQuota = cpuCfsQuota;
            CpuCfsQuotaPeriod = cpuCfsQuotaPeriod;
            ImageGcHighThreshold = imageGcHighThreshold;
            ImageGcLowThreshold = imageGcLowThreshold;
            TopologyManagerPolicy = topologyManagerPolicy;
            AllowedUnsafeSysctls = allowedUnsafeSysctls;
            FailSwapOn = failSwapOn;
            ContainerLogMaxSizeMB = containerLogMaxSizeMB;
            ContainerLogMaxFiles = containerLogMaxFiles;
            PodMaxPids = podMaxPids;
        }

        /// <summary> CPU Manager policy to use. </summary>
        public string CpuManagerPolicy { get; set; }
        /// <summary> Enable CPU CFS quota enforcement for containers that specify CPU limits. </summary>
        public bool? CpuCfsQuota { get; set; }
        /// <summary> Sets CPU CFS quota period value. </summary>
        public string CpuCfsQuotaPeriod { get; set; }
        /// <summary> The percent of disk usage after which image garbage collection is always run. </summary>
        public int? ImageGcHighThreshold { get; set; }
        /// <summary> The percent of disk usage before which image garbage collection is never run. </summary>
        public int? ImageGcLowThreshold { get; set; }
        /// <summary> Topology Manager policy to use. </summary>
        public string TopologyManagerPolicy { get; set; }
        /// <summary> Allowlist of unsafe sysctls or unsafe sysctl patterns (ending in `*`). </summary>
        public IList<string> AllowedUnsafeSysctls { get; }
        /// <summary> If set to true it will make the Kubelet fail to start if swap is enabled on the node. </summary>
        public bool? FailSwapOn { get; set; }
        /// <summary> The maximum size (e.g. 10Mi) of container log file before it is rotated. </summary>
        public int? ContainerLogMaxSizeMB { get; set; }
        /// <summary> The maximum number of container log files that can be present for a container. The number must be ≥ 2. </summary>
        public int? ContainerLogMaxFiles { get; set; }
        /// <summary> The maximum number of processes per pod. </summary>
        public int? PodMaxPids { get; set; }
    }
}
