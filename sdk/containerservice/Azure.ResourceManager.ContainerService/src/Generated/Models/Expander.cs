// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> The Expander. </summary>
    public readonly partial struct Expander : IEquatable<Expander>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="Expander"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Expander(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LeastWasteValue = "least-waste";
        private const string MostPodsValue = "most-pods";
        private const string PriorityValue = "priority";
        private const string RandomValue = "random";

        /// <summary> least-waste. </summary>
        public static Expander LeastWaste { get; } = new Expander(LeastWasteValue);
        /// <summary> most-pods. </summary>
        public static Expander MostPods { get; } = new Expander(MostPodsValue);
        /// <summary> priority. </summary>
        public static Expander Priority { get; } = new Expander(PriorityValue);
        /// <summary> random. </summary>
        public static Expander Random { get; } = new Expander(RandomValue);
        /// <summary> Determines if two <see cref="Expander"/> values are the same. </summary>
        public static bool operator ==(Expander left, Expander right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Expander"/> values are not the same. </summary>
        public static bool operator !=(Expander left, Expander right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Expander"/>. </summary>
        public static implicit operator Expander(string value) => new Expander(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Expander other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Expander other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
