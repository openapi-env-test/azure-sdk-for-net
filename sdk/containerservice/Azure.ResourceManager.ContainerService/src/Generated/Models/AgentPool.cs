// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.ContainerService.Models
{
    /// <summary> Agent Pool. </summary>
    public partial class AgentPool : SubResource
    {
        /// <summary> Initializes a new instance of AgentPool. </summary>
        public AgentPool()
        {
            AvailabilityZones = new ChangeTrackingList<string>();
            Tags = new ChangeTrackingDictionary<string, string>();
            NodeLabels = new ChangeTrackingDictionary<string, string>();
            NodeTaints = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of AgentPool. </summary>
        /// <param name="id"> Resource ID. </param>
        /// <param name="name"> The name of the resource that is unique within a resource group. This name can be used to access the resource. </param>
        /// <param name="type"> Resource type. </param>
        /// <param name="count"> Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0 to 100 (inclusive) for user pools and in the range of 1 to 100 (inclusive) for system pools. The default value is 1. </param>
        /// <param name="vmSize"> Size of agent VMs. </param>
        /// <param name="osDiskSizeGB"> OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified. </param>
        /// <param name="osDiskType"> OS disk type to be used for machines in a given agent pool. Allowed values are &apos;Ephemeral&apos; and &apos;Managed&apos;. Defaults to &apos;Managed&apos;. May not be changed after creation. </param>
        /// <param name="kubeletDiskType"> KubeletDiskType determines the placement of emptyDir volumes, container runtime data root, and Kubelet ephemeral storage. Currently allows one value, OS, resulting in Kubelet using the OS disk for data. </param>
        /// <param name="vnetSubnetID"> VNet SubnetID specifies the VNet&apos;s subnet identifier for nodes and maybe pods. </param>
        /// <param name="podSubnetID"> Pod SubnetID specifies the VNet&apos;s subnet identifier for pods. </param>
        /// <param name="maxPods"> Maximum number of pods that can run on a node. </param>
        /// <param name="osType"> OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. </param>
        /// <param name="maxCount"> Maximum number of nodes for auto-scaling. </param>
        /// <param name="minCount"> Minimum number of nodes for auto-scaling. </param>
        /// <param name="enableAutoScaling"> Whether to enable auto-scaler. </param>
        /// <param name="typePropertiesType"> AgentPoolType represents types of an agent pool. </param>
        /// <param name="mode"> AgentPoolMode represents mode of an agent pool. </param>
        /// <param name="orchestratorVersion"> Version of orchestrator specified when creating the managed cluster. </param>
        /// <param name="nodeImageVersion"> Version of node image. </param>
        /// <param name="upgradeSettings"> Settings for upgrading the agentpool. </param>
        /// <param name="provisioningState"> The current deployment or provisioning state, which only appears in the response. </param>
        /// <param name="powerState"> Describes whether the Agent Pool is Running or Stopped. </param>
        /// <param name="availabilityZones"> Availability zones for nodes. Must use VirtualMachineScaleSets AgentPoolType. </param>
        /// <param name="enableNodePublicIP"> Enable public IP for nodes. </param>
        /// <param name="scaleSetPriority"> ScaleSetPriority to be used to specify virtual machine scale set priority. Default to regular. </param>
        /// <param name="scaleSetEvictionPolicy"> ScaleSetEvictionPolicy to be used to specify eviction policy for Spot virtual machine scale set. Default to Delete. </param>
        /// <param name="spotMaxPrice"> SpotMaxPrice to be used to specify the maximum price you are willing to pay in US Dollars. Possible values are any decimal value greater than zero or -1 which indicates default price to be up-to on-demand. </param>
        /// <param name="tags"> Agent pool tags to be persisted on the agent pool virtual machine scale set. </param>
        /// <param name="nodeLabels"> Agent pool node labels to be persisted across all nodes in agent pool. </param>
        /// <param name="nodeTaints"> Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule. </param>
        /// <param name="proximityPlacementGroupID"> The ID for Proximity Placement Group. </param>
        /// <param name="kubeletConfig"> KubeletConfig specifies the configuration of kubelet on agent nodes. </param>
        /// <param name="linuxOSConfig"> LinuxOSConfig specifies the OS configuration of linux agent nodes. </param>
        /// <param name="enableEncryptionAtHost"> Whether to enable EncryptionAtHost. </param>
        internal AgentPool(string id, string name, string type, int? count, ContainerServiceVMSizeTypes? vmSize, int? osDiskSizeGB, OSDiskType? osDiskType, KubeletDiskType? kubeletDiskType, string vnetSubnetID, string podSubnetID, int? maxPods, OSType? osType, int? maxCount, int? minCount, bool? enableAutoScaling, AgentPoolType? typePropertiesType, AgentPoolMode? mode, string orchestratorVersion, string nodeImageVersion, AgentPoolUpgradeSettings upgradeSettings, string provisioningState, PowerState powerState, IList<string> availabilityZones, bool? enableNodePublicIP, ScaleSetPriority? scaleSetPriority, ScaleSetEvictionPolicy? scaleSetEvictionPolicy, float? spotMaxPrice, IDictionary<string, string> tags, IDictionary<string, string> nodeLabels, IList<string> nodeTaints, string proximityPlacementGroupID, KubeletConfig kubeletConfig, LinuxOSConfig linuxOSConfig, bool? enableEncryptionAtHost) : base(id, name, type)
        {
            Count = count;
            VmSize = vmSize;
            OsDiskSizeGB = osDiskSizeGB;
            OsDiskType = osDiskType;
            KubeletDiskType = kubeletDiskType;
            VnetSubnetID = vnetSubnetID;
            PodSubnetID = podSubnetID;
            MaxPods = maxPods;
            OsType = osType;
            MaxCount = maxCount;
            MinCount = minCount;
            EnableAutoScaling = enableAutoScaling;
            TypePropertiesType = typePropertiesType;
            Mode = mode;
            OrchestratorVersion = orchestratorVersion;
            NodeImageVersion = nodeImageVersion;
            UpgradeSettings = upgradeSettings;
            ProvisioningState = provisioningState;
            PowerState = powerState;
            AvailabilityZones = availabilityZones;
            EnableNodePublicIP = enableNodePublicIP;
            ScaleSetPriority = scaleSetPriority;
            ScaleSetEvictionPolicy = scaleSetEvictionPolicy;
            SpotMaxPrice = spotMaxPrice;
            Tags = tags;
            NodeLabels = nodeLabels;
            NodeTaints = nodeTaints;
            ProximityPlacementGroupID = proximityPlacementGroupID;
            KubeletConfig = kubeletConfig;
            LinuxOSConfig = linuxOSConfig;
            EnableEncryptionAtHost = enableEncryptionAtHost;
        }

        /// <summary> Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0 to 100 (inclusive) for user pools and in the range of 1 to 100 (inclusive) for system pools. The default value is 1. </summary>
        public int? Count { get; set; }
        /// <summary> Size of agent VMs. </summary>
        public ContainerServiceVMSizeTypes? VmSize { get; set; }
        /// <summary> OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified. </summary>
        public int? OsDiskSizeGB { get; set; }
        /// <summary> OS disk type to be used for machines in a given agent pool. Allowed values are &apos;Ephemeral&apos; and &apos;Managed&apos;. Defaults to &apos;Managed&apos;. May not be changed after creation. </summary>
        public OSDiskType? OsDiskType { get; set; }
        /// <summary> KubeletDiskType determines the placement of emptyDir volumes, container runtime data root, and Kubelet ephemeral storage. Currently allows one value, OS, resulting in Kubelet using the OS disk for data. </summary>
        public KubeletDiskType? KubeletDiskType { get; set; }
        /// <summary> VNet SubnetID specifies the VNet&apos;s subnet identifier for nodes and maybe pods. </summary>
        public string VnetSubnetID { get; set; }
        /// <summary> Pod SubnetID specifies the VNet&apos;s subnet identifier for pods. </summary>
        public string PodSubnetID { get; set; }
        /// <summary> Maximum number of pods that can run on a node. </summary>
        public int? MaxPods { get; set; }
        /// <summary> OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux. </summary>
        public OSType? OsType { get; set; }
        /// <summary> Maximum number of nodes for auto-scaling. </summary>
        public int? MaxCount { get; set; }
        /// <summary> Minimum number of nodes for auto-scaling. </summary>
        public int? MinCount { get; set; }
        /// <summary> Whether to enable auto-scaler. </summary>
        public bool? EnableAutoScaling { get; set; }
        /// <summary> AgentPoolType represents types of an agent pool. </summary>
        public AgentPoolType? TypePropertiesType { get; set; }
        /// <summary> AgentPoolMode represents mode of an agent pool. </summary>
        public AgentPoolMode? Mode { get; set; }
        /// <summary> Version of orchestrator specified when creating the managed cluster. </summary>
        public string OrchestratorVersion { get; set; }
        /// <summary> Version of node image. </summary>
        public string NodeImageVersion { get; }
        /// <summary> Settings for upgrading the agentpool. </summary>
        public AgentPoolUpgradeSettings UpgradeSettings { get; set; }
        /// <summary> The current deployment or provisioning state, which only appears in the response. </summary>
        public string ProvisioningState { get; }
        /// <summary> Describes whether the Agent Pool is Running or Stopped. </summary>
        public PowerState PowerState { get; }
        /// <summary> Availability zones for nodes. Must use VirtualMachineScaleSets AgentPoolType. </summary>
        public IList<string> AvailabilityZones { get; }
        /// <summary> Enable public IP for nodes. </summary>
        public bool? EnableNodePublicIP { get; set; }
        /// <summary> ScaleSetPriority to be used to specify virtual machine scale set priority. Default to regular. </summary>
        public ScaleSetPriority? ScaleSetPriority { get; set; }
        /// <summary> ScaleSetEvictionPolicy to be used to specify eviction policy for Spot virtual machine scale set. Default to Delete. </summary>
        public ScaleSetEvictionPolicy? ScaleSetEvictionPolicy { get; set; }
        /// <summary> SpotMaxPrice to be used to specify the maximum price you are willing to pay in US Dollars. Possible values are any decimal value greater than zero or -1 which indicates default price to be up-to on-demand. </summary>
        public float? SpotMaxPrice { get; set; }
        /// <summary> Agent pool tags to be persisted on the agent pool virtual machine scale set. </summary>
        public IDictionary<string, string> Tags { get; }
        /// <summary> Agent pool node labels to be persisted across all nodes in agent pool. </summary>
        public IDictionary<string, string> NodeLabels { get; }
        /// <summary> Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule. </summary>
        public IList<string> NodeTaints { get; }
        /// <summary> The ID for Proximity Placement Group. </summary>
        public string ProximityPlacementGroupID { get; set; }
        /// <summary> KubeletConfig specifies the configuration of kubelet on agent nodes. </summary>
        public KubeletConfig KubeletConfig { get; set; }
        /// <summary> LinuxOSConfig specifies the OS configuration of linux agent nodes. </summary>
        public LinuxOSConfig LinuxOSConfig { get; set; }
        /// <summary> Whether to enable EncryptionAtHost. </summary>
        public bool? EnableEncryptionAtHost { get; set; }
    }
}
