// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.ContainerService.Models;

namespace Azure.ResourceManager.ContainerService
{
    /// <summary> The AgentPools service client. </summary>
    public partial class AgentPoolsOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal AgentPoolsRestOperations RestClient { get; }
        /// <summary> Initializes a new instance of AgentPoolsOperations for mocking. </summary>
        protected AgentPoolsOperations()
        {
        }
        /// <summary> Initializes a new instance of AgentPoolsOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal AgentPoolsOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null, string apiVersion = "2020-12-01")
        {
            RestClient = new AgentPoolsRestOperations(clientDiagnostics, pipeline, subscriptionId, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Gets the details of the agent pool by managed cluster and resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="agentPoolName"> The name of the agent pool. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AgentPool>> GetAsync(string resourceGroupName, string resourceName, string agentPoolName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AgentPoolsOperations.Get");
            scope.Start();
            try
            {
                return await RestClient.GetAsync(resourceGroupName, resourceName, agentPoolName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the details of the agent pool by managed cluster and resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="agentPoolName"> The name of the agent pool. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AgentPool> Get(string resourceGroupName, string resourceName, string agentPoolName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AgentPoolsOperations.Get");
            scope.Start();
            try
            {
                return RestClient.Get(resourceGroupName, resourceName, agentPoolName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the details of the upgrade profile for an agent pool with a specified resource group and managed cluster name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="agentPoolName"> The name of the agent pool. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AgentPoolUpgradeProfile>> GetUpgradeProfileAsync(string resourceGroupName, string resourceName, string agentPoolName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AgentPoolsOperations.GetUpgradeProfile");
            scope.Start();
            try
            {
                return await RestClient.GetUpgradeProfileAsync(resourceGroupName, resourceName, agentPoolName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the details of the upgrade profile for an agent pool with a specified resource group and managed cluster name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="agentPoolName"> The name of the agent pool. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AgentPoolUpgradeProfile> GetUpgradeProfile(string resourceGroupName, string resourceName, string agentPoolName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AgentPoolsOperations.GetUpgradeProfile");
            scope.Start();
            try
            {
                return RestClient.GetUpgradeProfile(resourceGroupName, resourceName, agentPoolName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of supported versions for the specified agent pool. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AgentPoolAvailableVersions>> GetAvailableAgentPoolVersionsAsync(string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AgentPoolsOperations.GetAvailableAgentPoolVersions");
            scope.Start();
            try
            {
                return await RestClient.GetAvailableAgentPoolVersionsAsync(resourceGroupName, resourceName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of supported versions for the specified agent pool. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AgentPoolAvailableVersions> GetAvailableAgentPoolVersions(string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AgentPoolsOperations.GetAvailableAgentPoolVersions");
            scope.Start();
            try
            {
                return RestClient.GetAvailableAgentPoolVersions(resourceGroupName, resourceName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of agent pools in the specified managed cluster. The operation returns properties of each agent pool. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="resourceName"/> is null. </exception>
        public virtual AsyncPageable<AgentPool> ListAsync(string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }

            async Task<Page<AgentPool>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AgentPoolsOperations.List");
                scope.Start();
                try
                {
                    var response = await RestClient.ListAsync(resourceGroupName, resourceName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AgentPool>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AgentPoolsOperations.List");
                scope.Start();
                try
                {
                    var response = await RestClient.ListNextPageAsync(nextLink, resourceGroupName, resourceName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of agent pools in the specified managed cluster. The operation returns properties of each agent pool. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="resourceName"/> is null. </exception>
        public virtual Pageable<AgentPool> List(string resourceGroupName, string resourceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }

            Page<AgentPool> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AgentPoolsOperations.List");
                scope.Start();
                try
                {
                    var response = RestClient.List(resourceGroupName, resourceName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AgentPool> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AgentPoolsOperations.List");
                scope.Start();
                try
                {
                    var response = RestClient.ListNextPage(nextLink, resourceGroupName, resourceName, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Creates or updates an agent pool in the specified managed cluster. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="agentPoolName"> The name of the agent pool. </param>
        /// <param name="parameters"> Parameters supplied to the Create or Update an agent pool operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceName"/>, <paramref name="agentPoolName"/>, or <paramref name="parameters"/> is null. </exception>
        public virtual async Task<AgentPoolsCreateOrUpdateOperation> StartCreateOrUpdateAsync(string resourceGroupName, string resourceName, string agentPoolName, AgentPool parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }
            if (agentPoolName == null)
            {
                throw new ArgumentNullException(nameof(agentPoolName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("AgentPoolsOperations.StartCreateOrUpdate");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CreateOrUpdateAsync(resourceGroupName, resourceName, agentPoolName, parameters, cancellationToken).ConfigureAwait(false);
                return new AgentPoolsCreateOrUpdateOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateOrUpdateRequest(resourceGroupName, resourceName, agentPoolName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates an agent pool in the specified managed cluster. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="agentPoolName"> The name of the agent pool. </param>
        /// <param name="parameters"> Parameters supplied to the Create or Update an agent pool operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceName"/>, <paramref name="agentPoolName"/>, or <paramref name="parameters"/> is null. </exception>
        public virtual AgentPoolsCreateOrUpdateOperation StartCreateOrUpdate(string resourceGroupName, string resourceName, string agentPoolName, AgentPool parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }
            if (agentPoolName == null)
            {
                throw new ArgumentNullException(nameof(agentPoolName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("AgentPoolsOperations.StartCreateOrUpdate");
            scope.Start();
            try
            {
                var originalResponse = RestClient.CreateOrUpdate(resourceGroupName, resourceName, agentPoolName, parameters, cancellationToken);
                return new AgentPoolsCreateOrUpdateOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateOrUpdateRequest(resourceGroupName, resourceName, agentPoolName, parameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the agent pool in the specified managed cluster. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="agentPoolName"> The name of the agent pool. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceName"/>, or <paramref name="agentPoolName"/> is null. </exception>
        public virtual async Task<AgentPoolsDeleteOperation> StartDeleteAsync(string resourceGroupName, string resourceName, string agentPoolName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }
            if (agentPoolName == null)
            {
                throw new ArgumentNullException(nameof(agentPoolName));
            }

            using var scope = _clientDiagnostics.CreateScope("AgentPoolsOperations.StartDelete");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.DeleteAsync(resourceGroupName, resourceName, agentPoolName, cancellationToken).ConfigureAwait(false);
                return new AgentPoolsDeleteOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteRequest(resourceGroupName, resourceName, agentPoolName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the agent pool in the specified managed cluster. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="agentPoolName"> The name of the agent pool. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceName"/>, or <paramref name="agentPoolName"/> is null. </exception>
        public virtual AgentPoolsDeleteOperation StartDelete(string resourceGroupName, string resourceName, string agentPoolName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }
            if (agentPoolName == null)
            {
                throw new ArgumentNullException(nameof(agentPoolName));
            }

            using var scope = _clientDiagnostics.CreateScope("AgentPoolsOperations.StartDelete");
            scope.Start();
            try
            {
                var originalResponse = RestClient.Delete(resourceGroupName, resourceName, agentPoolName, cancellationToken);
                return new AgentPoolsDeleteOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteRequest(resourceGroupName, resourceName, agentPoolName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Upgrade node image version of an agent pool to the latest. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="agentPoolName"> The name of the agent pool. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceName"/>, or <paramref name="agentPoolName"/> is null. </exception>
        public virtual async Task<AgentPoolsUpgradeNodeImageVersionOperation> StartUpgradeNodeImageVersionAsync(string resourceGroupName, string resourceName, string agentPoolName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }
            if (agentPoolName == null)
            {
                throw new ArgumentNullException(nameof(agentPoolName));
            }

            using var scope = _clientDiagnostics.CreateScope("AgentPoolsOperations.StartUpgradeNodeImageVersion");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.UpgradeNodeImageVersionAsync(resourceGroupName, resourceName, agentPoolName, cancellationToken).ConfigureAwait(false);
                return new AgentPoolsUpgradeNodeImageVersionOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpgradeNodeImageVersionRequest(resourceGroupName, resourceName, agentPoolName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Upgrade node image version of an agent pool to the latest. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="resourceName"> The name of the managed cluster resource. </param>
        /// <param name="agentPoolName"> The name of the agent pool. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="resourceName"/>, or <paramref name="agentPoolName"/> is null. </exception>
        public virtual AgentPoolsUpgradeNodeImageVersionOperation StartUpgradeNodeImageVersion(string resourceGroupName, string resourceName, string agentPoolName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException(nameof(resourceName));
            }
            if (agentPoolName == null)
            {
                throw new ArgumentNullException(nameof(agentPoolName));
            }

            using var scope = _clientDiagnostics.CreateScope("AgentPoolsOperations.StartUpgradeNodeImageVersion");
            scope.Start();
            try
            {
                var originalResponse = RestClient.UpgradeNodeImageVersion(resourceGroupName, resourceName, agentPoolName, cancellationToken);
                return new AgentPoolsUpgradeNodeImageVersionOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpgradeNodeImageVersionRequest(resourceGroupName, resourceName, agentPoolName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
