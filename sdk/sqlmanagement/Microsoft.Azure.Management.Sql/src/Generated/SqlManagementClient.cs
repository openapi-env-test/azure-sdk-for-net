// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;

    /// <summary>
    /// The Azure SQL Database management API provides a RESTful set of web
    /// services that interact with Azure SQL Database services to manage your
    /// databases. The API enables you to create, retrieve, update, and delete
    /// databases.
    /// </summary>
    public partial class SqlManagementClient : ServiceClient<SqlManagementClient>, ISqlManagementClient, IAzureClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Credentials needed for the client to connect to Azure.
        /// </summary>
        public ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// The API version to use for the request.
        /// </summary>
        public string ApiVersion { get; private set; }

        /// <summary>
        /// The subscription ID that identifies an Azure subscription.
        /// </summary>
        public string SubscriptionId { get; set; }

        /// <summary>
        /// The preferred language for the response.
        /// </summary>
        public string AcceptLanguage { get; set; }

        /// <summary>
        /// The retry timeout in seconds for Long Running Operations. Default value is
        /// 30.
        /// </summary>
        public int? LongRunningOperationRetryTimeout { get; set; }

        /// <summary>
        /// Whether a unique x-ms-client-request-id should be generated. When set to
        /// true a unique x-ms-client-request-id value is generated and included in
        /// each request. Default is true.
        /// </summary>
        public bool? GenerateClientRequestId { get; set; }

        /// <summary>
        /// Gets the IServerAdvisorsOperations.
        /// </summary>
        public virtual IServerAdvisorsOperations ServerAdvisors { get; private set; }

        /// <summary>
        /// Gets the IDatabaseAdvisorsOperations.
        /// </summary>
        public virtual IDatabaseAdvisorsOperations DatabaseAdvisors { get; private set; }

        /// <summary>
        /// Gets the IRecoverableDatabasesOperations.
        /// </summary>
        public virtual IRecoverableDatabasesOperations RecoverableDatabases { get; private set; }

        /// <summary>
        /// Gets the IRestorableDroppedDatabasesOperations.
        /// </summary>
        public virtual IRestorableDroppedDatabasesOperations RestorableDroppedDatabases { get; private set; }

        /// <summary>
        /// Gets the ICapabilitiesOperations.
        /// </summary>
        public virtual ICapabilitiesOperations Capabilities { get; private set; }

        /// <summary>
        /// Gets the IServersOperations.
        /// </summary>
        public virtual IServersOperations Servers { get; private set; }

        /// <summary>
        /// Gets the IServerConnectionPoliciesOperations.
        /// </summary>
        public virtual IServerConnectionPoliciesOperations ServerConnectionPolicies { get; private set; }

        /// <summary>
        /// Gets the IDatabasesOperations.
        /// </summary>
        public virtual IDatabasesOperations Databases { get; private set; }

        /// <summary>
        /// Gets the IDatabaseThreatDetectionPoliciesOperations.
        /// </summary>
        public virtual IDatabaseThreatDetectionPoliciesOperations DatabaseThreatDetectionPolicies { get; private set; }

        /// <summary>
        /// Gets the IDataMaskingPoliciesOperations.
        /// </summary>
        public virtual IDataMaskingPoliciesOperations DataMaskingPolicies { get; private set; }

        /// <summary>
        /// Gets the IDataMaskingRulesOperations.
        /// </summary>
        public virtual IDataMaskingRulesOperations DataMaskingRules { get; private set; }

        /// <summary>
        /// Gets the ITransparentDataEncryptionConfigurationsOperations.
        /// </summary>
        public virtual ITransparentDataEncryptionConfigurationsOperations TransparentDataEncryptionConfigurations { get; private set; }

        /// <summary>
        /// Gets the IExtensionsOperations.
        /// </summary>
        public virtual IExtensionsOperations Extensions { get; private set; }

        /// <summary>
        /// Gets the IDisasterRecoveryConfigurationsOperations.
        /// </summary>
        public virtual IDisasterRecoveryConfigurationsOperations DisasterRecoveryConfigurations { get; private set; }

        /// <summary>
        /// Gets the IElasticPoolsOperations.
        /// </summary>
        public virtual IElasticPoolsOperations ElasticPools { get; private set; }

        /// <summary>
        /// Gets the IFirewallRulesOperations.
        /// </summary>
        public virtual IFirewallRulesOperations FirewallRules { get; private set; }

        /// <summary>
        /// Gets the IGeoBackupPoliciesOperations.
        /// </summary>
        public virtual IGeoBackupPoliciesOperations GeoBackupPolicies { get; private set; }

        /// <summary>
        /// Gets the IOperations.
        /// </summary>
        public virtual IOperations Operations { get; private set; }

        /// <summary>
        /// Gets the IQueriesOperations.
        /// </summary>
        public virtual IQueriesOperations Queries { get; private set; }

        /// <summary>
        /// Gets the IQueryStatisticsOperations.
        /// </summary>
        public virtual IQueryStatisticsOperations QueryStatistics { get; private set; }

        /// <summary>
        /// Gets the IQueryTextsOperations.
        /// </summary>
        public virtual IQueryTextsOperations QueryTexts { get; private set; }

        /// <summary>
        /// Gets the IRecommendedElasticPoolsOperations.
        /// </summary>
        public virtual IRecommendedElasticPoolsOperations RecommendedElasticPools { get; private set; }

        /// <summary>
        /// Gets the IReplicationLinksOperations.
        /// </summary>
        public virtual IReplicationLinksOperations ReplicationLinks { get; private set; }

        /// <summary>
        /// Gets the IRestorePointsOperations.
        /// </summary>
        public virtual IRestorePointsOperations RestorePoints { get; private set; }

        /// <summary>
        /// Gets the IServerAzureADAdministratorsOperations.
        /// </summary>
        public virtual IServerAzureADAdministratorsOperations ServerAzureADAdministrators { get; private set; }

        /// <summary>
        /// Gets the IServerCommunicationLinksOperations.
        /// </summary>
        public virtual IServerCommunicationLinksOperations ServerCommunicationLinks { get; private set; }

        /// <summary>
        /// Gets the IServiceObjectivesOperations.
        /// </summary>
        public virtual IServiceObjectivesOperations ServiceObjectives { get; private set; }

        /// <summary>
        /// Gets the IElasticPoolActivitiesOperations.
        /// </summary>
        public virtual IElasticPoolActivitiesOperations ElasticPoolActivities { get; private set; }

        /// <summary>
        /// Gets the IElasticPoolDatabaseActivitiesOperations.
        /// </summary>
        public virtual IElasticPoolDatabaseActivitiesOperations ElasticPoolDatabaseActivities { get; private set; }

        /// <summary>
        /// Gets the IServiceTierAdvisorsOperations.
        /// </summary>
        public virtual IServiceTierAdvisorsOperations ServiceTierAdvisors { get; private set; }

        /// <summary>
        /// Gets the ITransparentDataEncryptionsOperations.
        /// </summary>
        public virtual ITransparentDataEncryptionsOperations TransparentDataEncryptions { get; private set; }

        /// <summary>
        /// Gets the ITransparentDataEncryptionActivitiesOperations.
        /// </summary>
        public virtual ITransparentDataEncryptionActivitiesOperations TransparentDataEncryptionActivities { get; private set; }

        /// <summary>
        /// Gets the IServerTableAuditingPoliciesOperations.
        /// </summary>
        public virtual IServerTableAuditingPoliciesOperations ServerTableAuditingPolicies { get; private set; }

        /// <summary>
        /// Gets the IDatabaseTableAuditingPoliciesOperations.
        /// </summary>
        public virtual IDatabaseTableAuditingPoliciesOperations DatabaseTableAuditingPolicies { get; private set; }

        /// <summary>
        /// Gets the IDatabaseConnectionPoliciesOperations.
        /// </summary>
        public virtual IDatabaseConnectionPoliciesOperations DatabaseConnectionPolicies { get; private set; }

        /// <summary>
        /// Gets the IServerUsagesOperations.
        /// </summary>
        public virtual IServerUsagesOperations ServerUsages { get; private set; }

        /// <summary>
        /// Gets the IDatabaseUsagesOperations.
        /// </summary>
        public virtual IDatabaseUsagesOperations DatabaseUsages { get; private set; }

        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling SqlManagementClient.Dispose(). False: will not dispose provided httpClient</param>
        protected SqlManagementClient(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected SqlManagementClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected SqlManagementClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected SqlManagementClient(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected SqlManagementClient(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SqlManagementClient(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling SqlManagementClient.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SqlManagementClient(ServiceClientCredentials credentials, HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SqlManagementClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SqlManagementClient(System.Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SqlManagementClient(System.Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        /// </summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            ServerAdvisors = new ServerAdvisorsOperations(this);
            DatabaseAdvisors = new DatabaseAdvisorsOperations(this);
            RecoverableDatabases = new RecoverableDatabasesOperations(this);
            RestorableDroppedDatabases = new RestorableDroppedDatabasesOperations(this);
            Capabilities = new CapabilitiesOperations(this);
            Servers = new ServersOperations(this);
            ServerConnectionPolicies = new ServerConnectionPoliciesOperations(this);
            Databases = new DatabasesOperations(this);
            DatabaseThreatDetectionPolicies = new DatabaseThreatDetectionPoliciesOperations(this);
            DataMaskingPolicies = new DataMaskingPoliciesOperations(this);
            DataMaskingRules = new DataMaskingRulesOperations(this);
            TransparentDataEncryptionConfigurations = new TransparentDataEncryptionConfigurationsOperations(this);
            Extensions = new ExtensionsOperations(this);
            DisasterRecoveryConfigurations = new DisasterRecoveryConfigurationsOperations(this);
            ElasticPools = new ElasticPoolsOperations(this);
            FirewallRules = new FirewallRulesOperations(this);
            GeoBackupPolicies = new GeoBackupPoliciesOperations(this);
            Operations = new Operations(this);
            Queries = new QueriesOperations(this);
            QueryStatistics = new QueryStatisticsOperations(this);
            QueryTexts = new QueryTextsOperations(this);
            RecommendedElasticPools = new RecommendedElasticPoolsOperations(this);
            ReplicationLinks = new ReplicationLinksOperations(this);
            RestorePoints = new RestorePointsOperations(this);
            ServerAzureADAdministrators = new ServerAzureADAdministratorsOperations(this);
            ServerCommunicationLinks = new ServerCommunicationLinksOperations(this);
            ServiceObjectives = new ServiceObjectivesOperations(this);
            ElasticPoolActivities = new ElasticPoolActivitiesOperations(this);
            ElasticPoolDatabaseActivities = new ElasticPoolDatabaseActivitiesOperations(this);
            ServiceTierAdvisors = new ServiceTierAdvisorsOperations(this);
            TransparentDataEncryptions = new TransparentDataEncryptionsOperations(this);
            TransparentDataEncryptionActivities = new TransparentDataEncryptionActivitiesOperations(this);
            ServerTableAuditingPolicies = new ServerTableAuditingPoliciesOperations(this);
            DatabaseTableAuditingPolicies = new DatabaseTableAuditingPoliciesOperations(this);
            DatabaseConnectionPolicies = new DatabaseConnectionPoliciesOperations(this);
            ServerUsages = new ServerUsagesOperations(this);
            DatabaseUsages = new DatabaseUsagesOperations(this);
            BaseUri = new System.Uri("https://management.azure.com");
            ApiVersion = "2014-04-01";
            AcceptLanguage = "en-US";
            LongRunningOperationRetryTimeout = 30;
            GenerateClientRequestId = true;
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new TransformationJsonConverter());
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
            DeserializationSettings.Converters.Add(new TransformationJsonConverter());
            DeserializationSettings.Converters.Add(new CloudErrorJsonConverter());
        }
    }
}
