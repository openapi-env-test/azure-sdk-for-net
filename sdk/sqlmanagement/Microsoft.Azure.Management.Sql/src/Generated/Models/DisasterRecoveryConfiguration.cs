// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents a disaster recovery configuration.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DisasterRecoveryConfiguration : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the DisasterRecoveryConfiguration
        /// class.
        /// </summary>
        public DisasterRecoveryConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DisasterRecoveryConfiguration
        /// class.
        /// </summary>
        /// <param name="autoFailover">Whether or not failover can be done
        /// automatically. Possible values include: 'Off', 'On'</param>
        /// <param name="failoverPolicy">How aggressive the automatic failover
        /// should be. Possible values include: 'Manual', 'Automatic'</param>
        /// <param name="partnerServerId">Id of the partner server.</param>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="status">The status of the disaster recovery
        /// configuration. Possible values include: 'Creating', 'Ready',
        /// 'FailingOver', 'Dropping'</param>
        /// <param name="logicalServerName">Logical name of the server.</param>
        /// <param name="partnerLogicalServerName">Logical name of the partner
        /// server.</param>
        /// <param name="role">The role of the current server in the disaster
        /// recovery configuration. Possible values include: 'None', 'Primary',
        /// 'Secondary'</param>
        /// <param name="location">Location of the server that contains this
        /// disaster recovery configuration.</param>
        public DisasterRecoveryConfiguration(string autoFailover, string failoverPolicy, string partnerServerId, string id = default(string), string name = default(string), string type = default(string), string status = default(string), string logicalServerName = default(string), string partnerLogicalServerName = default(string), string role = default(string), string location = default(string))
            : base(id, name, type)
        {
            Status = status;
            AutoFailover = autoFailover;
            FailoverPolicy = failoverPolicy;
            PartnerServerId = partnerServerId;
            LogicalServerName = logicalServerName;
            PartnerLogicalServerName = partnerLogicalServerName;
            Role = role;
            Location = location;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the status of the disaster recovery configuration. Possible
        /// values include: 'Creating', 'Ready', 'FailingOver', 'Dropping'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public string Status { get; private set; }

        /// <summary>
        /// Gets or sets whether or not failover can be done automatically.
        /// Possible values include: 'Off', 'On'
        /// </summary>
        [JsonProperty(PropertyName = "properties.autoFailover")]
        public string AutoFailover { get; set; }

        /// <summary>
        /// Gets or sets how aggressive the automatic failover should be.
        /// Possible values include: 'Manual', 'Automatic'
        /// </summary>
        [JsonProperty(PropertyName = "properties.failoverPolicy")]
        public string FailoverPolicy { get; set; }

        /// <summary>
        /// Gets or sets id of the partner server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.partnerServerId")]
        public string PartnerServerId { get; set; }

        /// <summary>
        /// Gets logical name of the server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.logicalServerName")]
        public string LogicalServerName { get; private set; }

        /// <summary>
        /// Gets logical name of the partner server.
        /// </summary>
        [JsonProperty(PropertyName = "properties.partnerLogicalServerName")]
        public string PartnerLogicalServerName { get; private set; }

        /// <summary>
        /// Gets the role of the current server in the disaster recovery
        /// configuration. Possible values include: 'None', 'Primary',
        /// 'Secondary'
        /// </summary>
        [JsonProperty(PropertyName = "properties.role")]
        public string Role { get; private set; }

        /// <summary>
        /// Gets location of the server that contains this disaster recovery
        /// configuration.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AutoFailover == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AutoFailover");
            }
            if (FailoverPolicy == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FailoverPolicy");
            }
            if (PartnerServerId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PartnerServerId");
            }
        }
    }
}
