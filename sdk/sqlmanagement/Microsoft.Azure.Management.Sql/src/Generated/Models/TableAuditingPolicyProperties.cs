// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Properties of a table auditing policy.
    /// </summary>
    public partial class TableAuditingPolicyProperties
    {
        /// <summary>
        /// Initializes a new instance of the TableAuditingPolicyProperties
        /// class.
        /// </summary>
        public TableAuditingPolicyProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TableAuditingPolicyProperties
        /// class.
        /// </summary>
        /// <param name="auditingState">The state of the policy.</param>
        /// <param name="auditLogsTableName">The audit logs table name.</param>
        /// <param name="eventTypesToAudit">Comma-separated list of event types
        /// to audit.</param>
        /// <param name="fullAuditLogsTableName">The full audit logs table
        /// name.</param>
        /// <param name="retentionDays">The number of days to keep in the audit
        /// logs.</param>
        /// <param name="storageAccountKey">The key of the auditing storage
        /// account.</param>
        /// <param name="storageAccountName">The table storage account
        /// name</param>
        /// <param name="storageAccountResourceGroupName">The table storage
        /// account resource group name</param>
        /// <param name="storageAccountSecondaryKey">The secondary key of the
        /// auditing storage account.</param>
        /// <param name="storageAccountSubscriptionId">The table storage
        /// subscription Id.</param>
        /// <param name="storageTableEndpoint">The storage table
        /// endpoint.</param>
        public TableAuditingPolicyProperties(string auditingState = default(string), string auditLogsTableName = default(string), string eventTypesToAudit = default(string), string fullAuditLogsTableName = default(string), string retentionDays = default(string), string storageAccountKey = default(string), string storageAccountName = default(string), string storageAccountResourceGroupName = default(string), string storageAccountSecondaryKey = default(string), System.Guid? storageAccountSubscriptionId = default(System.Guid?), string storageTableEndpoint = default(string))
        {
            AuditingState = auditingState;
            AuditLogsTableName = auditLogsTableName;
            EventTypesToAudit = eventTypesToAudit;
            FullAuditLogsTableName = fullAuditLogsTableName;
            RetentionDays = retentionDays;
            StorageAccountKey = storageAccountKey;
            StorageAccountName = storageAccountName;
            StorageAccountResourceGroupName = storageAccountResourceGroupName;
            StorageAccountSecondaryKey = storageAccountSecondaryKey;
            StorageAccountSubscriptionId = storageAccountSubscriptionId;
            StorageTableEndpoint = storageTableEndpoint;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the state of the policy.
        /// </summary>
        [JsonProperty(PropertyName = "auditingState")]
        public string AuditingState { get; set; }

        /// <summary>
        /// Gets or sets the audit logs table name.
        /// </summary>
        [JsonProperty(PropertyName = "auditLogsTableName")]
        public string AuditLogsTableName { get; set; }

        /// <summary>
        /// Gets or sets comma-separated list of event types to audit.
        /// </summary>
        [JsonProperty(PropertyName = "eventTypesToAudit")]
        public string EventTypesToAudit { get; set; }

        /// <summary>
        /// Gets or sets the full audit logs table name.
        /// </summary>
        [JsonProperty(PropertyName = "fullAuditLogsTableName")]
        public string FullAuditLogsTableName { get; set; }

        /// <summary>
        /// Gets or sets the number of days to keep in the audit logs.
        /// </summary>
        [JsonProperty(PropertyName = "retentionDays")]
        public string RetentionDays { get; set; }

        /// <summary>
        /// Gets or sets the key of the auditing storage account.
        /// </summary>
        [JsonProperty(PropertyName = "storageAccountKey")]
        public string StorageAccountKey { get; set; }

        /// <summary>
        /// Gets or sets the table storage account name
        /// </summary>
        [JsonProperty(PropertyName = "storageAccountName")]
        public string StorageAccountName { get; set; }

        /// <summary>
        /// Gets or sets the table storage account resource group name
        /// </summary>
        [JsonProperty(PropertyName = "storageAccountResourceGroupName")]
        public string StorageAccountResourceGroupName { get; set; }

        /// <summary>
        /// Gets or sets the secondary key of the auditing storage account.
        /// </summary>
        [JsonProperty(PropertyName = "storageAccountSecondaryKey")]
        public string StorageAccountSecondaryKey { get; set; }

        /// <summary>
        /// Gets or sets the table storage subscription Id.
        /// </summary>
        [JsonProperty(PropertyName = "storageAccountSubscriptionId")]
        public System.Guid? StorageAccountSubscriptionId { get; set; }

        /// <summary>
        /// Gets or sets the storage table endpoint.
        /// </summary>
        [JsonProperty(PropertyName = "storageTableEndpoint")]
        public string StorageTableEndpoint { get; set; }

    }
}
