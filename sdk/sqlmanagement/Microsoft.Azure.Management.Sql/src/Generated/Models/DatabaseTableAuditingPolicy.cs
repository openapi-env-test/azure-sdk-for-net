// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A database table auditing policy.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DatabaseTableAuditingPolicy : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the DatabaseTableAuditingPolicy
        /// class.
        /// </summary>
        public DatabaseTableAuditingPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatabaseTableAuditingPolicy
        /// class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="kind">Resource kind.</param>
        /// <param name="location">Resource location.</param>
        /// <param name="auditingState">The state of the policy.</param>
        /// <param name="auditLogsTableName">The audit logs table name.</param>
        /// <param name="eventTypesToAudit">Comma-separated list of event types
        /// to audit.</param>
        /// <param name="fullAuditLogsTableName">The full audit logs table
        /// name.</param>
        /// <param name="retentionDays">The number of days to keep in the audit
        /// logs.</param>
        /// <param name="storageAccountKey">The key of the auditing storage
        /// account.</param>
        /// <param name="storageAccountName">The table storage account
        /// name</param>
        /// <param name="storageAccountResourceGroupName">The table storage
        /// account resource group name</param>
        /// <param name="storageAccountSecondaryKey">The secondary key of the
        /// auditing storage account.</param>
        /// <param name="storageAccountSubscriptionId">The table storage
        /// subscription Id.</param>
        /// <param name="storageTableEndpoint">The storage table
        /// endpoint.</param>
        /// <param name="useServerDefault">Whether server default is enabled or
        /// disabled.</param>
        public DatabaseTableAuditingPolicy(string id = default(string), string name = default(string), string type = default(string), string kind = default(string), string location = default(string), string auditingState = default(string), string auditLogsTableName = default(string), string eventTypesToAudit = default(string), string fullAuditLogsTableName = default(string), string retentionDays = default(string), string storageAccountKey = default(string), string storageAccountName = default(string), string storageAccountResourceGroupName = default(string), string storageAccountSecondaryKey = default(string), System.Guid? storageAccountSubscriptionId = default(System.Guid?), string storageTableEndpoint = default(string), string useServerDefault = default(string))
            : base(id, name, type)
        {
            Kind = kind;
            Location = location;
            AuditingState = auditingState;
            AuditLogsTableName = auditLogsTableName;
            EventTypesToAudit = eventTypesToAudit;
            FullAuditLogsTableName = fullAuditLogsTableName;
            RetentionDays = retentionDays;
            StorageAccountKey = storageAccountKey;
            StorageAccountName = storageAccountName;
            StorageAccountResourceGroupName = storageAccountResourceGroupName;
            StorageAccountSecondaryKey = storageAccountSecondaryKey;
            StorageAccountSubscriptionId = storageAccountSubscriptionId;
            StorageTableEndpoint = storageTableEndpoint;
            UseServerDefault = useServerDefault;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets resource kind.
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; private set; }

        /// <summary>
        /// Gets resource location.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; private set; }

        /// <summary>
        /// Gets or sets the state of the policy.
        /// </summary>
        [JsonProperty(PropertyName = "properties.auditingState")]
        public string AuditingState { get; set; }

        /// <summary>
        /// Gets or sets the audit logs table name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.auditLogsTableName")]
        public string AuditLogsTableName { get; set; }

        /// <summary>
        /// Gets or sets comma-separated list of event types to audit.
        /// </summary>
        [JsonProperty(PropertyName = "properties.eventTypesToAudit")]
        public string EventTypesToAudit { get; set; }

        /// <summary>
        /// Gets or sets the full audit logs table name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.fullAuditLogsTableName")]
        public string FullAuditLogsTableName { get; set; }

        /// <summary>
        /// Gets or sets the number of days to keep in the audit logs.
        /// </summary>
        [JsonProperty(PropertyName = "properties.retentionDays")]
        public string RetentionDays { get; set; }

        /// <summary>
        /// Gets or sets the key of the auditing storage account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageAccountKey")]
        public string StorageAccountKey { get; set; }

        /// <summary>
        /// Gets or sets the table storage account name
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageAccountName")]
        public string StorageAccountName { get; set; }

        /// <summary>
        /// Gets or sets the table storage account resource group name
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageAccountResourceGroupName")]
        public string StorageAccountResourceGroupName { get; set; }

        /// <summary>
        /// Gets or sets the secondary key of the auditing storage account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageAccountSecondaryKey")]
        public string StorageAccountSecondaryKey { get; set; }

        /// <summary>
        /// Gets or sets the table storage subscription Id.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageAccountSubscriptionId")]
        public System.Guid? StorageAccountSubscriptionId { get; set; }

        /// <summary>
        /// Gets or sets the storage table endpoint.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageTableEndpoint")]
        public string StorageTableEndpoint { get; set; }

        /// <summary>
        /// Gets or sets whether server default is enabled or disabled.
        /// </summary>
        [JsonProperty(PropertyName = "properties.useServerDefault")]
        public string UseServerDefault { get; set; }

    }
}
