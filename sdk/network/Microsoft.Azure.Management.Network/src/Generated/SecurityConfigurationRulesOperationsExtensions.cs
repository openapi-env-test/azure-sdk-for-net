// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SecurityConfigurationRulesOperations.
    /// </summary>
    public static partial class SecurityConfigurationRulesOperationsExtensions
    {
            /// <summary>
            /// List
            /// </summary>
            /// <remarks>
            /// Retrieves a network manager security Configuration rule. This operation
            /// retrieves a rule for a network manager security Configuration in the given
            /// subscription with the given name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            public static IPage<SecurityConfigurationRule> List(this ISecurityConfigurationRulesOperations operations, string resourceGroupName, string networkManagerName, string configurationName)
            {
                return operations.ListAsync(resourceGroupName, networkManagerName, configurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List
            /// </summary>
            /// <remarks>
            /// Retrieves a network manager security Configuration rule. This operation
            /// retrieves a rule for a network manager security Configuration in the given
            /// subscription with the given name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SecurityConfigurationRule>> ListAsync(this ISecurityConfigurationRulesOperations operations, string resourceGroupName, string networkManagerName, string configurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, networkManagerName, configurationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get
            /// </summary>
            /// <remarks>
            /// Retrieves a network manager security Configuration rule in a subscription.
            /// This operation retrieves a rule for a network manager security
            /// Configuration in the given subscription with the given name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            /// <param name='ruleName'>
            /// The name of the rule.
            /// </param>
            public static SecurityConfigurationRule Get(this ISecurityConfigurationRulesOperations operations, string resourceGroupName, string networkManagerName, string configurationName, string ruleName)
            {
                return operations.GetAsync(resourceGroupName, networkManagerName, configurationName, ruleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get
            /// </summary>
            /// <remarks>
            /// Retrieves a network manager security Configuration rule in a subscription.
            /// This operation retrieves a rule for a network manager security
            /// Configuration in the given subscription with the given name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            /// <param name='ruleName'>
            /// The name of the rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecurityConfigurationRule> GetAsync(this ISecurityConfigurationRulesOperations operations, string resourceGroupName, string networkManagerName, string configurationName, string ruleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, networkManagerName, configurationName, ruleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Or Update
            /// </summary>
            /// <remarks>
            /// Creates or updates a rule for a network manager security Configuration in a
            /// subscription. This operation creates or updates a rule for a network
            /// manager security Configuration in the given subscription with the given
            /// name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='securityConfigurationRule'>
            /// The security rule to create or update
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            /// <param name='ruleName'>
            /// The name of the rule.
            /// </param>
            public static SecurityConfigurationRule CreateOrUpdateRule(this ISecurityConfigurationRulesOperations operations, SecurityConfigurationRule securityConfigurationRule, string resourceGroupName, string networkManagerName, string configurationName, string ruleName)
            {
                return operations.CreateOrUpdateRuleAsync(securityConfigurationRule, resourceGroupName, networkManagerName, configurationName, ruleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Or Update
            /// </summary>
            /// <remarks>
            /// Creates or updates a rule for a network manager security Configuration in a
            /// subscription. This operation creates or updates a rule for a network
            /// manager security Configuration in the given subscription with the given
            /// name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='securityConfigurationRule'>
            /// The security rule to create or update
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            /// <param name='ruleName'>
            /// The name of the rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecurityConfigurationRule> CreateOrUpdateRuleAsync(this ISecurityConfigurationRulesOperations operations, SecurityConfigurationRule securityConfigurationRule, string resourceGroupName, string networkManagerName, string configurationName, string ruleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateRuleWithHttpMessagesAsync(securityConfigurationRule, resourceGroupName, networkManagerName, configurationName, ruleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete
            /// </summary>
            /// <remarks>
            /// Deletes a rule for a network manager security Configuration in a
            /// subscription. This operation deletes a rule for a network manager security
            /// Configuration in the given subscription with the given name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            /// <param name='ruleName'>
            /// The name of the rule.
            /// </param>
            public static void Delete(this ISecurityConfigurationRulesOperations operations, string resourceGroupName, string networkManagerName, string configurationName, string ruleName)
            {
                operations.DeleteAsync(resourceGroupName, networkManagerName, configurationName, ruleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete
            /// </summary>
            /// <remarks>
            /// Deletes a rule for a network manager security Configuration in a
            /// subscription. This operation deletes a rule for a network manager security
            /// Configuration in the given subscription with the given name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            /// <param name='ruleName'>
            /// The name of the rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ISecurityConfigurationRulesOperations operations, string resourceGroupName, string networkManagerName, string configurationName, string ruleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, networkManagerName, configurationName, ruleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update a SecurityConfiguration Rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update network manager SecurityConfiguration rule
            /// tags.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            /// <param name='ruleName'>
            /// The name of the rule.
            /// </param>
            public static SecurityConfigurationRule Patch(this ISecurityConfigurationRulesOperations operations, TagsObject parameters, string resourceGroupName, string networkManagerName, string configurationName, string ruleName)
            {
                return operations.PatchAsync(parameters, resourceGroupName, networkManagerName, configurationName, ruleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a SecurityConfiguration Rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update network manager SecurityConfiguration rule
            /// tags.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            /// <param name='ruleName'>
            /// The name of the rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecurityConfigurationRule> PatchAsync(this ISecurityConfigurationRulesOperations operations, TagsObject parameters, string resourceGroupName, string networkManagerName, string configurationName, string ruleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchWithHttpMessagesAsync(parameters, resourceGroupName, networkManagerName, configurationName, ruleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Or Update
            /// </summary>
            /// <remarks>
            /// Creates or updates a rule for a network manager security Configuration in a
            /// subscription. This operation creates or updates a rule for a network
            /// manager security Configuration in the given subscription with the given
            /// name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='securityConfigurationRule'>
            /// The security rule to create or update
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            /// <param name='ruleName'>
            /// The name of the rule.
            /// </param>
            public static SecurityConfigurationRule BeginCreateOrUpdateRule(this ISecurityConfigurationRulesOperations operations, SecurityConfigurationRule securityConfigurationRule, string resourceGroupName, string networkManagerName, string configurationName, string ruleName)
            {
                return operations.BeginCreateOrUpdateRuleAsync(securityConfigurationRule, resourceGroupName, networkManagerName, configurationName, ruleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Or Update
            /// </summary>
            /// <remarks>
            /// Creates or updates a rule for a network manager security Configuration in a
            /// subscription. This operation creates or updates a rule for a network
            /// manager security Configuration in the given subscription with the given
            /// name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='securityConfigurationRule'>
            /// The security rule to create or update
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            /// <param name='ruleName'>
            /// The name of the rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecurityConfigurationRule> BeginCreateOrUpdateRuleAsync(this ISecurityConfigurationRulesOperations operations, SecurityConfigurationRule securityConfigurationRule, string resourceGroupName, string networkManagerName, string configurationName, string ruleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateRuleWithHttpMessagesAsync(securityConfigurationRule, resourceGroupName, networkManagerName, configurationName, ruleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete
            /// </summary>
            /// <remarks>
            /// Deletes a rule for a network manager security Configuration in a
            /// subscription. This operation deletes a rule for a network manager security
            /// Configuration in the given subscription with the given name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            /// <param name='ruleName'>
            /// The name of the rule.
            /// </param>
            public static void BeginDelete(this ISecurityConfigurationRulesOperations operations, string resourceGroupName, string networkManagerName, string configurationName, string ruleName)
            {
                operations.BeginDeleteAsync(resourceGroupName, networkManagerName, configurationName, ruleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete
            /// </summary>
            /// <remarks>
            /// Deletes a rule for a network manager security Configuration in a
            /// subscription. This operation deletes a rule for a network manager security
            /// Configuration in the given subscription with the given name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            /// <param name='ruleName'>
            /// The name of the rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this ISecurityConfigurationRulesOperations operations, string resourceGroupName, string networkManagerName, string configurationName, string ruleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, networkManagerName, configurationName, ruleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List
            /// </summary>
            /// <remarks>
            /// Retrieves a network manager security Configuration rule. This operation
            /// retrieves a rule for a network manager security Configuration in the given
            /// subscription with the given name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SecurityConfigurationRule> ListNext(this ISecurityConfigurationRulesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List
            /// </summary>
            /// <remarks>
            /// Retrieves a network manager security Configuration rule. This operation
            /// retrieves a rule for a network manager security Configuration in the given
            /// subscription with the given name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SecurityConfigurationRule>> ListNextAsync(this ISecurityConfigurationRulesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
