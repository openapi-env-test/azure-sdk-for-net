// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SecurityConfigurationsOperations.
    /// </summary>
    public static partial class SecurityConfigurationsOperationsExtensions
    {
            /// <summary>
            /// The list securityConfigurations operation retrieves all the Managed Network
            /// Security Configurations in a resource group, in a paginated format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='top'>
            /// May be used to limit the number of results in a page for list queries.
            /// </param>
            /// <param name='skiptoken'>
            /// Skiptoken is only used if a previous operation returned a partial result.
            /// If a previous response contains a nextLink element, the value of the
            /// nextLink element will include a skiptoken parameter that specifies a
            /// starting point to use for subsequent calls.
            /// </param>
            public static IPage<SecurityConfiguration> List(this ISecurityConfigurationsOperations operations, string resourceGroupName, string networkManagerName, int? top = default(int?), string skiptoken = default(string))
            {
                return operations.ListAsync(resourceGroupName, networkManagerName, top, skiptoken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The list securityConfigurations operation retrieves all the Managed Network
            /// Security Configurations in a resource group, in a paginated format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='top'>
            /// May be used to limit the number of results in a page for list queries.
            /// </param>
            /// <param name='skiptoken'>
            /// Skiptoken is only used if a previous operation returned a partial result.
            /// If a previous response contains a nextLink element, the value of the
            /// nextLink element will include a skiptoken parameter that specifies a
            /// starting point to use for subsequent calls.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SecurityConfiguration>> ListAsync(this ISecurityConfigurationsOperations operations, string resourceGroupName, string networkManagerName, int? top = default(int?), string skiptoken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, networkManagerName, top, skiptoken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get
            /// </summary>
            /// <remarks>
            /// Retrieves a network manager security Configuration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            public static SecurityConfiguration Get(this ISecurityConfigurationsOperations operations, string resourceGroupName, string networkManagerName, string configurationName)
            {
                return operations.GetAsync(resourceGroupName, networkManagerName, configurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get
            /// </summary>
            /// <remarks>
            /// Retrieves a network manager security Configuration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecurityConfiguration> GetAsync(this ISecurityConfigurationsOperations operations, string resourceGroupName, string networkManagerName, string configurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, networkManagerName, configurationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Or Update
            /// </summary>
            /// <remarks>
            /// Creates or updates a network manager security Configuration in a
            /// subscription.  This operation creates or updates a network manager security
            /// Configuration in the given subscription with the given name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='securityConfiguration'>
            /// The security Configuration to create or update
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            public static SecurityConfiguration CreateOrUpdate(this ISecurityConfigurationsOperations operations, SecurityConfiguration securityConfiguration, string resourceGroupName, string networkManagerName, string configurationName)
            {
                return operations.CreateOrUpdateAsync(securityConfiguration, resourceGroupName, networkManagerName, configurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Or Update
            /// </summary>
            /// <remarks>
            /// Creates or updates a network manager security Configuration in a
            /// subscription.  This operation creates or updates a network manager security
            /// Configuration in the given subscription with the given name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='securityConfiguration'>
            /// The security Configuration to create or update
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecurityConfiguration> CreateOrUpdateAsync(this ISecurityConfigurationsOperations operations, SecurityConfiguration securityConfiguration, string resourceGroupName, string networkManagerName, string configurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(securityConfiguration, resourceGroupName, networkManagerName, configurationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete
            /// </summary>
            /// <remarks>
            /// Deletes a network manager security Configuration in a subscription. This
            /// operation deletes the network manager security Configuration in the given
            /// subscription with the given name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            public static void Delete(this ISecurityConfigurationsOperations operations, string resourceGroupName, string networkManagerName, string configurationName)
            {
                operations.DeleteAsync(resourceGroupName, networkManagerName, configurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete
            /// </summary>
            /// <remarks>
            /// Deletes a network manager security Configuration in a subscription. This
            /// operation deletes the network manager security Configuration in the given
            /// subscription with the given name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ISecurityConfigurationsOperations operations, string resourceGroupName, string networkManagerName, string configurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, networkManagerName, configurationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update a SecurityConfiguration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update network manager SecurityConfiguration tags.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            public static SecurityConfiguration Patch(this ISecurityConfigurationsOperations operations, TagsObject parameters, string resourceGroupName, string networkManagerName, string configurationName)
            {
                return operations.PatchAsync(parameters, resourceGroupName, networkManagerName, configurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a SecurityConfiguration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update network manager SecurityConfiguration tags.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecurityConfiguration> PatchAsync(this ISecurityConfigurationsOperations operations, TagsObject parameters, string resourceGroupName, string networkManagerName, string configurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchWithHttpMessagesAsync(parameters, resourceGroupName, networkManagerName, configurationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Or Update
            /// </summary>
            /// <remarks>
            /// Creates or updates a network manager security Configuration in a
            /// subscription.  This operation creates or updates a network manager security
            /// Configuration in the given subscription with the given name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='securityConfiguration'>
            /// The security Configuration to create or update
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            public static SecurityConfiguration BeginCreateOrUpdate(this ISecurityConfigurationsOperations operations, SecurityConfiguration securityConfiguration, string resourceGroupName, string networkManagerName, string configurationName)
            {
                return operations.BeginCreateOrUpdateAsync(securityConfiguration, resourceGroupName, networkManagerName, configurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Or Update
            /// </summary>
            /// <remarks>
            /// Creates or updates a network manager security Configuration in a
            /// subscription.  This operation creates or updates a network manager security
            /// Configuration in the given subscription with the given name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='securityConfiguration'>
            /// The security Configuration to create or update
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecurityConfiguration> BeginCreateOrUpdateAsync(this ISecurityConfigurationsOperations operations, SecurityConfiguration securityConfiguration, string resourceGroupName, string networkManagerName, string configurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(securityConfiguration, resourceGroupName, networkManagerName, configurationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete
            /// </summary>
            /// <remarks>
            /// Deletes a network manager security Configuration in a subscription. This
            /// operation deletes the network manager security Configuration in the given
            /// subscription with the given name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            public static void BeginDelete(this ISecurityConfigurationsOperations operations, string resourceGroupName, string networkManagerName, string configurationName)
            {
                operations.BeginDeleteAsync(resourceGroupName, networkManagerName, configurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete
            /// </summary>
            /// <remarks>
            /// Deletes a network manager security Configuration in a subscription. This
            /// operation deletes the network manager security Configuration in the given
            /// subscription with the given name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the network manager security Configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this ISecurityConfigurationsOperations operations, string resourceGroupName, string networkManagerName, string configurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, networkManagerName, configurationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// The list securityConfigurations operation retrieves all the Managed Network
            /// Security Configurations in a resource group, in a paginated format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SecurityConfiguration> ListNext(this ISecurityConfigurationsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The list securityConfigurations operation retrieves all the Managed Network
            /// Security Configurations in a resource group, in a paginated format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SecurityConfiguration>> ListNextAsync(this ISecurityConfigurationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
