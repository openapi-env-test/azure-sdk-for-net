// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The Managed Network Peering Configuration resource
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ConnectivityConfiguration : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the ConnectivityConfiguration class.
        /// </summary>
        public ConnectivityConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectivityConfiguration class.
        /// </summary>
        /// <param name="topology">Gets or sets the connectivity type of a
        /// network structure Configuration. Possible values include:
        /// 'HubAndSpokeTopology', 'MeshTopology'</param>
        /// <param name="id">Resource ID.</param>
        /// <param name="displayName">A friendly name for the
        /// assignment.</param>
        /// <param name="description">A description of the Connectivity
        /// Configuration.</param>
        /// <param name="gatewayVnetId">Gets or sets the gateway vnet
        /// ID</param>
        /// <param name="gatewayVIP">Gets or sets the gateway vip ID</param>
        /// <param name="hubId">Gets or sets the hub virtual network ID</param>
        /// <param name="appliesToGroups">Groups for configuration</param>
        /// <param name="provisioningState">The provisioning state of the
        /// peering Configuration resource. Possible values include:
        /// 'Succeeded', 'Updating', 'Deleting', 'Failed'</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="etag">A unique read-only string that changes whenever
        /// the resource is updated.</param>
        public ConnectivityConfiguration(string topology, string id = default(string), string displayName = default(string), string description = default(string), string gatewayVnetId = default(string), string gatewayVIP = default(string), string hubId = default(string), IList<NetworkManagerGroupItem> appliesToGroups = default(IList<NetworkManagerGroupItem>), string provisioningState = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string etag = default(string))
            : base(id)
        {
            DisplayName = displayName;
            Description = description;
            Topology = topology;
            GatewayVnetId = gatewayVnetId;
            GatewayVIP = gatewayVIP;
            HubId = hubId;
            AppliesToGroups = appliesToGroups;
            ProvisioningState = provisioningState;
            Name = name;
            Type = type;
            Tags = tags;
            Etag = etag;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a friendly name for the assignment.
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets a description of the Connectivity Configuration.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the connectivity type of a network structure
        /// Configuration. Possible values include: 'HubAndSpokeTopology',
        /// 'MeshTopology'
        /// </summary>
        [JsonProperty(PropertyName = "properties.topology")]
        public string Topology { get; set; }

        /// <summary>
        /// Gets or sets the gateway vnet ID
        /// </summary>
        [JsonProperty(PropertyName = "properties.gatewayVnetId")]
        public string GatewayVnetId { get; set; }

        /// <summary>
        /// Gets or sets the gateway vip ID
        /// </summary>
        [JsonProperty(PropertyName = "properties.gatewayVIP")]
        public string GatewayVIP { get; set; }

        /// <summary>
        /// Gets or sets the hub virtual network ID
        /// </summary>
        [JsonProperty(PropertyName = "properties.hubId")]
        public string HubId { get; set; }

        /// <summary>
        /// Gets or sets groups for configuration
        /// </summary>
        [JsonProperty(PropertyName = "properties.appliesToGroups")]
        public IList<NetworkManagerGroupItem> AppliesToGroups { get; set; }

        /// <summary>
        /// Gets the provisioning state of the peering Configuration resource.
        /// Possible values include: 'Succeeded', 'Updating', 'Deleting',
        /// 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets resource name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets resource type.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets or sets resource tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource
        /// is updated.
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Topology == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Topology");
            }
        }
    }
}
