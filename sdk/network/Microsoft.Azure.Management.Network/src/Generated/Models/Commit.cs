// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Configuration and location lists to commit.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Commit : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the Commit class.
        /// </summary>
        public Commit()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Commit class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="configurationId">configuration Id need to
        /// deploy.</param>
        /// <param name="location">Location string</param>
        /// <param name="deploymentTime">Deployment time string</param>
        /// <param name="provisioningState">The provisioning state of the
        /// peering Configuration resource. Possible values include:
        /// 'Succeeded', 'Updating', 'Deleting', 'Failed'</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="etag">A unique read-only string that changes whenever
        /// the resource is updated.</param>
        public Commit(string id = default(string), string configurationId = default(string), IList<string> location = default(IList<string>), System.DateTime? deploymentTime = default(System.DateTime?), string provisioningState = default(string), string name = default(string), string type = default(string), string etag = default(string))
            : base(id)
        {
            ConfigurationId = configurationId;
            Location = location;
            DeploymentTime = deploymentTime;
            ProvisioningState = provisioningState;
            Name = name;
            Type = type;
            Etag = etag;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets configuration Id need to deploy.
        /// </summary>
        [JsonProperty(PropertyName = "properties.configurationId")]
        public string ConfigurationId { get; set; }

        /// <summary>
        /// Gets or sets location string
        /// </summary>
        [JsonProperty(PropertyName = "properties.location")]
        public IList<string> Location { get; set; }

        /// <summary>
        /// Gets or sets deployment time string
        /// </summary>
        [JsonProperty(PropertyName = "properties.deploymentTime")]
        public System.DateTime? DeploymentTime { get; set; }

        /// <summary>
        /// Gets the provisioning state of the peering Configuration resource.
        /// Possible values include: 'Succeeded', 'Updating', 'Deleting',
        /// 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets resource name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets resource type.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource
        /// is updated.
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; private set; }

    }
}
