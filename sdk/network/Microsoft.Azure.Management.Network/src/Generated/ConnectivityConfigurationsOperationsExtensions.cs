// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ConnectivityConfigurationsOperations.
    /// </summary>
    public static partial class ConnectivityConfigurationsOperationsExtensions
    {
            /// <summary>
            /// The Get ConnectivityConfigurations operation gets a Managed Network
            /// Connectivity Configuration resource, specified by the  resource group,
            /// Managed Network name, and connectivity Configuration name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the Managed Network Peering Configuration.
            /// </param>
            public static ConnectivityConfiguration Get(this IConnectivityConfigurationsOperations operations, string resourceGroupName, string networkManagerName, string configurationName)
            {
                return operations.GetAsync(resourceGroupName, networkManagerName, configurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The Get ConnectivityConfigurations operation gets a Managed Network
            /// Connectivity Configuration resource, specified by the  resource group,
            /// Managed Network name, and connectivity Configuration name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the Managed Network Peering Configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectivityConfiguration> GetAsync(this IConnectivityConfigurationsOperations operations, string resourceGroupName, string networkManagerName, string configurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, networkManagerName, configurationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The Put ConnectivityConfigurations operation creates/updates a new Managed
            /// Network Peering Configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='connectivityConfiguration'>
            /// Parameters supplied to create/update a Managed Network Peering
            /// Configuration
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the Managed Network Peering Configuration.
            /// </param>
            public static ConnectivityConfiguration CreateOrUpdate(this IConnectivityConfigurationsOperations operations, ConnectivityConfiguration connectivityConfiguration, string resourceGroupName, string networkManagerName, string configurationName)
            {
                return operations.CreateOrUpdateAsync(connectivityConfiguration, resourceGroupName, networkManagerName, configurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The Put ConnectivityConfigurations operation creates/updates a new Managed
            /// Network Peering Configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='connectivityConfiguration'>
            /// Parameters supplied to create/update a Managed Network Peering
            /// Configuration
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the Managed Network Peering Configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectivityConfiguration> CreateOrUpdateAsync(this IConnectivityConfigurationsOperations operations, ConnectivityConfiguration connectivityConfiguration, string resourceGroupName, string networkManagerName, string configurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(connectivityConfiguration, resourceGroupName, networkManagerName, configurationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The Delete ConnectivityConfigurations operation deletes a Managed Network
            /// Connectivity Configuration, specified by the  resource group, Managed
            /// Network name, and connectivity Configuration name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the Managed Network Peering Configuration.
            /// </param>
            public static void Delete(this IConnectivityConfigurationsOperations operations, string resourceGroupName, string networkManagerName, string configurationName)
            {
                operations.DeleteAsync(resourceGroupName, networkManagerName, configurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The Delete ConnectivityConfigurations operation deletes a Managed Network
            /// Connectivity Configuration, specified by the  resource group, Managed
            /// Network name, and connectivity Configuration name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the Managed Network Peering Configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IConnectivityConfigurationsOperations operations, string resourceGroupName, string networkManagerName, string configurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, networkManagerName, configurationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update a ConnectivityConfiguration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update network manager ConnectivityConfigurations
            /// tags.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the Managed Network Peering Configuration.
            /// </param>
            public static ConnectivityConfiguration Patch(this IConnectivityConfigurationsOperations operations, TagsObject parameters, string resourceGroupName, string networkManagerName, string configurationName)
            {
                return operations.PatchAsync(parameters, resourceGroupName, networkManagerName, configurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a ConnectivityConfiguration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update network manager ConnectivityConfigurations
            /// tags.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the Managed Network Peering Configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectivityConfiguration> PatchAsync(this IConnectivityConfigurationsOperations operations, TagsObject parameters, string resourceGroupName, string networkManagerName, string configurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchWithHttpMessagesAsync(parameters, resourceGroupName, networkManagerName, configurationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The List By network Manager PeeringConfigurations operation retrieves all
            /// the Managed Network Peering Configurations in a specified Managed Network,
            /// in a paginated format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='top'>
            /// May be used to limit the number of results in a page for list queries.
            /// </param>
            /// <param name='skiptoken'>
            /// Skiptoken is only used if a previous operation returned a partial result.
            /// If a previous response contains a nextLink element, the value of the
            /// nextLink element will include a skiptoken parameter that specifies a
            /// starting point to use for subsequent calls.
            /// </param>
            public static IPage<ConnectivityConfiguration> ListByResourceGroup(this IConnectivityConfigurationsOperations operations, string resourceGroupName, string networkManagerName, int? top = default(int?), string skiptoken = default(string))
            {
                return operations.ListByResourceGroupAsync(resourceGroupName, networkManagerName, top, skiptoken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The List By network Manager PeeringConfigurations operation retrieves all
            /// the Managed Network Peering Configurations in a specified Managed Network,
            /// in a paginated format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='top'>
            /// May be used to limit the number of results in a page for list queries.
            /// </param>
            /// <param name='skiptoken'>
            /// Skiptoken is only used if a previous operation returned a partial result.
            /// If a previous response contains a nextLink element, the value of the
            /// nextLink element will include a skiptoken parameter that specifies a
            /// starting point to use for subsequent calls.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ConnectivityConfiguration>> ListByResourceGroupAsync(this IConnectivityConfigurationsOperations operations, string resourceGroupName, string networkManagerName, int? top = default(int?), string skiptoken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, networkManagerName, top, skiptoken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The Put ConnectivityConfigurations operation creates/updates a new Managed
            /// Network Peering Configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='connectivityConfiguration'>
            /// Parameters supplied to create/update a Managed Network Peering
            /// Configuration
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the Managed Network Peering Configuration.
            /// </param>
            public static ConnectivityConfiguration BeginCreateOrUpdate(this IConnectivityConfigurationsOperations operations, ConnectivityConfiguration connectivityConfiguration, string resourceGroupName, string networkManagerName, string configurationName)
            {
                return operations.BeginCreateOrUpdateAsync(connectivityConfiguration, resourceGroupName, networkManagerName, configurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The Put ConnectivityConfigurations operation creates/updates a new Managed
            /// Network Peering Configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='connectivityConfiguration'>
            /// Parameters supplied to create/update a Managed Network Peering
            /// Configuration
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the Managed Network Peering Configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectivityConfiguration> BeginCreateOrUpdateAsync(this IConnectivityConfigurationsOperations operations, ConnectivityConfiguration connectivityConfiguration, string resourceGroupName, string networkManagerName, string configurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(connectivityConfiguration, resourceGroupName, networkManagerName, configurationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The Delete ConnectivityConfigurations operation deletes a Managed Network
            /// Connectivity Configuration, specified by the  resource group, Managed
            /// Network name, and connectivity Configuration name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the Managed Network Peering Configuration.
            /// </param>
            public static void BeginDelete(this IConnectivityConfigurationsOperations operations, string resourceGroupName, string networkManagerName, string configurationName)
            {
                operations.BeginDeleteAsync(resourceGroupName, networkManagerName, configurationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The Delete ConnectivityConfigurations operation deletes a Managed Network
            /// Connectivity Configuration, specified by the  resource group, Managed
            /// Network name, and connectivity Configuration name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkManagerName'>
            /// The name of the network manager.
            /// </param>
            /// <param name='configurationName'>
            /// The name of the Managed Network Peering Configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IConnectivityConfigurationsOperations operations, string resourceGroupName, string networkManagerName, string configurationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, networkManagerName, configurationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// The List By network Manager PeeringConfigurations operation retrieves all
            /// the Managed Network Peering Configurations in a specified Managed Network,
            /// in a paginated format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ConnectivityConfiguration> ListByResourceGroupNext(this IConnectivityConfigurationsOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The List By network Manager PeeringConfigurations operation retrieves all
            /// the Managed Network Peering Configurations in a specified Managed Network,
            /// in a paginated format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ConnectivityConfiguration>> ListByResourceGroupNextAsync(this IConnectivityConfigurationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
