// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CostManagement
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ScheduledActionsOperations.
    /// </summary>
    public static partial class ScheduledActionsOperationsExtensions
    {
            /// <summary>
            /// List all private scheduled actions.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// May be used to filter scheduled actions by properties/viewId. Supported
            /// operator is 'eq'.
            /// </param>
            public static IPage<ScheduledAction> List(this IScheduledActionsOperations operations, string filter = default(string))
            {
                return operations.ListAsync(filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all private scheduled actions.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// May be used to filter scheduled actions by properties/viewId. Supported
            /// operator is 'eq'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ScheduledAction>> ListAsync(this IScheduledActionsOperations operations, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all shared scheduled actions within the given scope.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope associated with scheduled action operations. This includes
            /// 'subscriptions/{subscriptionId}' for subscription scope,
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for
            /// resourceGroup scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for
            /// Billing Account scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}'
            /// for Department scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
            /// for EnrollmentAccount scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
            /// for BillingProfile scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
            /// for InvoiceSection scope,
            /// 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}'
            /// for External Billing Account scope and
            /// 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}'
            /// for External Subscription scope. Note: Insight Alerts are only available on
            /// subscription scope.
            /// </param>
            /// <param name='filter'>
            /// May be used to filter scheduled actions by properties/viewId. Supported
            /// operator is 'eq'.
            /// </param>
            public static IPage<ScheduledAction> ListByScope(this IScheduledActionsOperations operations, string scope, string filter = default(string))
            {
                return operations.ListByScopeAsync(scope, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all shared scheduled actions within the given scope.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope associated with scheduled action operations. This includes
            /// 'subscriptions/{subscriptionId}' for subscription scope,
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for
            /// resourceGroup scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for
            /// Billing Account scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}'
            /// for Department scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
            /// for EnrollmentAccount scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
            /// for BillingProfile scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
            /// for InvoiceSection scope,
            /// 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}'
            /// for External Billing Account scope and
            /// 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}'
            /// for External Subscription scope. Note: Insight Alerts are only available on
            /// subscription scope.
            /// </param>
            /// <param name='filter'>
            /// May be used to filter scheduled actions by properties/viewId. Supported
            /// operator is 'eq'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ScheduledAction>> ListByScopeAsync(this IScheduledActionsOperations operations, string scope, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByScopeWithHttpMessagesAsync(scope, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a private scheduled action.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Scheduled action name.
            /// </param>
            /// <param name='scheduledAction'>
            /// Scheduled action to be created or updated.
            /// </param>
            public static ScheduledAction CreateOrUpdate(this IScheduledActionsOperations operations, string name, ScheduledAction scheduledAction)
            {
                return operations.CreateOrUpdateAsync(name, scheduledAction).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a private scheduled action.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Scheduled action name.
            /// </param>
            /// <param name='scheduledAction'>
            /// Scheduled action to be created or updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ScheduledAction> CreateOrUpdateAsync(this IScheduledActionsOperations operations, string name, ScheduledAction scheduledAction, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(name, scheduledAction, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the private scheduled action by name.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Scheduled action name.
            /// </param>
            public static ScheduledAction Get(this IScheduledActionsOperations operations, string name)
            {
                return operations.GetAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the private scheduled action by name.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Scheduled action name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ScheduledAction> GetAsync(this IScheduledActionsOperations operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a private scheduled action.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Scheduled action name.
            /// </param>
            public static void Delete(this IScheduledActionsOperations operations, string name)
            {
                operations.DeleteAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a private scheduled action.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Scheduled action name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IScheduledActionsOperations operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or update a shared scheduled action within the given scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope associated with scheduled action operations. This includes
            /// 'subscriptions/{subscriptionId}' for subscription scope,
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for
            /// resourceGroup scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for
            /// Billing Account scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}'
            /// for Department scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
            /// for EnrollmentAccount scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
            /// for BillingProfile scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
            /// for InvoiceSection scope,
            /// 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}'
            /// for External Billing Account scope and
            /// 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}'
            /// for External Subscription scope. Note: Insight Alerts are only available on
            /// subscription scope.
            /// </param>
            /// <param name='name'>
            /// Scheduled action name.
            /// </param>
            /// <param name='scheduledAction'>
            /// Scheduled action to be created or updated.
            /// </param>
            public static ScheduledAction CreateOrUpdateByScope(this IScheduledActionsOperations operations, string scope, string name, ScheduledAction scheduledAction)
            {
                return operations.CreateOrUpdateByScopeAsync(scope, name, scheduledAction).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a shared scheduled action within the given scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope associated with scheduled action operations. This includes
            /// 'subscriptions/{subscriptionId}' for subscription scope,
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for
            /// resourceGroup scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for
            /// Billing Account scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}'
            /// for Department scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
            /// for EnrollmentAccount scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
            /// for BillingProfile scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
            /// for InvoiceSection scope,
            /// 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}'
            /// for External Billing Account scope and
            /// 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}'
            /// for External Subscription scope. Note: Insight Alerts are only available on
            /// subscription scope.
            /// </param>
            /// <param name='name'>
            /// Scheduled action name.
            /// </param>
            /// <param name='scheduledAction'>
            /// Scheduled action to be created or updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ScheduledAction> CreateOrUpdateByScopeAsync(this IScheduledActionsOperations operations, string scope, string name, ScheduledAction scheduledAction, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateByScopeWithHttpMessagesAsync(scope, name, scheduledAction, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the shared scheduled action from the given scope by name.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope associated with scheduled action operations. This includes
            /// 'subscriptions/{subscriptionId}' for subscription scope,
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for
            /// resourceGroup scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for
            /// Billing Account scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}'
            /// for Department scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
            /// for EnrollmentAccount scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
            /// for BillingProfile scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
            /// for InvoiceSection scope,
            /// 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}'
            /// for External Billing Account scope and
            /// 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}'
            /// for External Subscription scope. Note: Insight Alerts are only available on
            /// subscription scope.
            /// </param>
            /// <param name='name'>
            /// Scheduled action name.
            /// </param>
            public static ScheduledAction GetByScope(this IScheduledActionsOperations operations, string scope, string name)
            {
                return operations.GetByScopeAsync(scope, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the shared scheduled action from the given scope by name.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope associated with scheduled action operations. This includes
            /// 'subscriptions/{subscriptionId}' for subscription scope,
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for
            /// resourceGroup scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for
            /// Billing Account scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}'
            /// for Department scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
            /// for EnrollmentAccount scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
            /// for BillingProfile scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
            /// for InvoiceSection scope,
            /// 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}'
            /// for External Billing Account scope and
            /// 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}'
            /// for External Subscription scope. Note: Insight Alerts are only available on
            /// subscription scope.
            /// </param>
            /// <param name='name'>
            /// Scheduled action name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ScheduledAction> GetByScopeAsync(this IScheduledActionsOperations operations, string scope, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByScopeWithHttpMessagesAsync(scope, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a scheduled action within the given scope.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope associated with scheduled action operations. This includes
            /// 'subscriptions/{subscriptionId}' for subscription scope,
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for
            /// resourceGroup scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for
            /// Billing Account scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}'
            /// for Department scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
            /// for EnrollmentAccount scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
            /// for BillingProfile scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
            /// for InvoiceSection scope,
            /// 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}'
            /// for External Billing Account scope and
            /// 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}'
            /// for External Subscription scope. Note: Insight Alerts are only available on
            /// subscription scope.
            /// </param>
            /// <param name='name'>
            /// Scheduled action name.
            /// </param>
            public static void DeleteByScope(this IScheduledActionsOperations operations, string scope, string name)
            {
                operations.DeleteByScopeAsync(scope, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a scheduled action within the given scope.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope associated with scheduled action operations. This includes
            /// 'subscriptions/{subscriptionId}' for subscription scope,
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for
            /// resourceGroup scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for
            /// Billing Account scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}'
            /// for Department scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
            /// for EnrollmentAccount scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
            /// for BillingProfile scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
            /// for InvoiceSection scope,
            /// 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}'
            /// for External Billing Account scope and
            /// 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}'
            /// for External Subscription scope. Note: Insight Alerts are only available on
            /// subscription scope.
            /// </param>
            /// <param name='name'>
            /// Scheduled action name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteByScopeAsync(this IScheduledActionsOperations operations, string scope, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteByScopeWithHttpMessagesAsync(scope, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Processes a private scheduled action.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Scheduled action name.
            /// </param>
            public static void Run(this IScheduledActionsOperations operations, string name)
            {
                operations.RunAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Processes a private scheduled action.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Scheduled action name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RunAsync(this IScheduledActionsOperations operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RunWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Runs a shared scheduled action within the given scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope associated with scheduled action operations. This includes
            /// 'subscriptions/{subscriptionId}' for subscription scope,
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for
            /// resourceGroup scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for
            /// Billing Account scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}'
            /// for Department scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
            /// for EnrollmentAccount scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
            /// for BillingProfile scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
            /// for InvoiceSection scope,
            /// 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}'
            /// for External Billing Account scope and
            /// 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}'
            /// for External Subscription scope. Note: Insight Alerts are only available on
            /// subscription scope.
            /// </param>
            /// <param name='name'>
            /// Scheduled action name.
            /// </param>
            public static void RunByScope(this IScheduledActionsOperations operations, string scope, string name)
            {
                operations.RunByScopeAsync(scope, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Runs a shared scheduled action within the given scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope associated with scheduled action operations. This includes
            /// 'subscriptions/{subscriptionId}' for subscription scope,
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for
            /// resourceGroup scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for
            /// Billing Account scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}'
            /// for Department scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
            /// for EnrollmentAccount scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
            /// for BillingProfile scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
            /// for InvoiceSection scope,
            /// 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}'
            /// for External Billing Account scope and
            /// 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}'
            /// for External Subscription scope. Note: Insight Alerts are only available on
            /// subscription scope.
            /// </param>
            /// <param name='name'>
            /// Scheduled action name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RunByScopeAsync(this IScheduledActionsOperations operations, string scope, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RunByScopeWithHttpMessagesAsync(scope, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Checks availability and correctness of the name for a scheduled action.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='checkNameAvailabilityRequest'>
            /// Scheduled action to be created or updated.
            /// </param>
            public static CheckNameAvailabilityResponse CheckNameAvailability(this IScheduledActionsOperations operations, CheckNameAvailabilityRequest checkNameAvailabilityRequest)
            {
                return operations.CheckNameAvailabilityAsync(checkNameAvailabilityRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks availability and correctness of the name for a scheduled action.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='checkNameAvailabilityRequest'>
            /// Scheduled action to be created or updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CheckNameAvailabilityResponse> CheckNameAvailabilityAsync(this IScheduledActionsOperations operations, CheckNameAvailabilityRequest checkNameAvailabilityRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckNameAvailabilityWithHttpMessagesAsync(checkNameAvailabilityRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks availability and correctness of the name for a scheduled action
            /// within the given scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope associated with scheduled action operations. This includes
            /// 'subscriptions/{subscriptionId}' for subscription scope,
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for
            /// resourceGroup scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for
            /// Billing Account scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}'
            /// for Department scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
            /// for EnrollmentAccount scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
            /// for BillingProfile scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
            /// for InvoiceSection scope,
            /// 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}'
            /// for External Billing Account scope and
            /// 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}'
            /// for External Subscription scope. Note: Insight Alerts are only available on
            /// subscription scope.
            /// </param>
            /// <param name='checkNameAvailabilityRequest'>
            /// Scheduled action to be created or updated.
            /// </param>
            public static CheckNameAvailabilityResponse CheckNameAvailabilityByScope(this IScheduledActionsOperations operations, string scope, CheckNameAvailabilityRequest checkNameAvailabilityRequest)
            {
                return operations.CheckNameAvailabilityByScopeAsync(scope, checkNameAvailabilityRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks availability and correctness of the name for a scheduled action
            /// within the given scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope associated with scheduled action operations. This includes
            /// 'subscriptions/{subscriptionId}' for subscription scope,
            /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for
            /// resourceGroup scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for
            /// Billing Account scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}'
            /// for Department scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
            /// for EnrollmentAccount scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
            /// for BillingProfile scope,
            /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
            /// for InvoiceSection scope,
            /// 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}'
            /// for External Billing Account scope and
            /// 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}'
            /// for External Subscription scope. Note: Insight Alerts are only available on
            /// subscription scope.
            /// </param>
            /// <param name='checkNameAvailabilityRequest'>
            /// Scheduled action to be created or updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CheckNameAvailabilityResponse> CheckNameAvailabilityByScopeAsync(this IScheduledActionsOperations operations, string scope, CheckNameAvailabilityRequest checkNameAvailabilityRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckNameAvailabilityByScopeWithHttpMessagesAsync(scope, checkNameAvailabilityRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all private scheduled actions.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ScheduledAction> ListNext(this IScheduledActionsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all private scheduled actions.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ScheduledAction>> ListNextAsync(this IScheduledActionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all shared scheduled actions within the given scope.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ScheduledAction> ListByScopeNext(this IScheduledActionsOperations operations, string nextPageLink)
            {
                return operations.ListByScopeNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all shared scheduled actions within the given scope.
            /// <see href="https://docs.microsoft.com/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ScheduledAction>> ListByScopeNextAsync(this IScheduledActionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByScopeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
