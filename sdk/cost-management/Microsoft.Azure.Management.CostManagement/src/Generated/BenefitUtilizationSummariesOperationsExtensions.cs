// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CostManagement
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BenefitUtilizationSummariesOperations.
    /// </summary>
    public static partial class BenefitUtilizationSummariesOperationsExtensions
    {
            /// <summary>
            /// Lists savings plan utilization summaries for the enterprise agreement
            /// scope. Supported at grain values: 'Daily' and 'Monthly'.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountId'>
            /// Billing account ID
            /// </param>
            /// <param name='grainParameter'>
            /// Grain. Possible values include: 'Hourly', 'Daily', 'Monthly'
            /// </param>
            /// <param name='filter'>
            /// Supports filtering by properties/benefitId, properties/benefitOrderId and
            /// properties/usageDate.
            /// </param>
            public static IPage<BenefitUtilizationSummary> ListByBillingAccountId(this IBenefitUtilizationSummariesOperations operations, string billingAccountId, string grainParameter = default(string), string filter = default(string))
            {
                return operations.ListByBillingAccountIdAsync(billingAccountId, grainParameter, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists savings plan utilization summaries for the enterprise agreement
            /// scope. Supported at grain values: 'Daily' and 'Monthly'.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountId'>
            /// Billing account ID
            /// </param>
            /// <param name='grainParameter'>
            /// Grain. Possible values include: 'Hourly', 'Daily', 'Monthly'
            /// </param>
            /// <param name='filter'>
            /// Supports filtering by properties/benefitId, properties/benefitOrderId and
            /// properties/usageDate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BenefitUtilizationSummary>> ListByBillingAccountIdAsync(this IBenefitUtilizationSummariesOperations operations, string billingAccountId, string grainParameter = default(string), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByBillingAccountIdWithHttpMessagesAsync(billingAccountId, grainParameter, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists savings plan utilization summaries for billing profile. Supported at
            /// grain values: 'Daily' and 'Monthly'.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountId'>
            /// Billing account ID
            /// </param>
            /// <param name='billingProfileId'>
            /// Billing profile ID.
            /// </param>
            /// <param name='grainParameter'>
            /// Grain. Possible values include: 'Hourly', 'Daily', 'Monthly'
            /// </param>
            /// <param name='filter'>
            /// Supports filtering by properties/benefitId, properties/benefitOrderId and
            /// properties/usageDate.
            /// </param>
            public static IPage<BenefitUtilizationSummary> ListByBillingProfileId(this IBenefitUtilizationSummariesOperations operations, string billingAccountId, string billingProfileId, string grainParameter = default(string), string filter = default(string))
            {
                return operations.ListByBillingProfileIdAsync(billingAccountId, billingProfileId, grainParameter, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists savings plan utilization summaries for billing profile. Supported at
            /// grain values: 'Daily' and 'Monthly'.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountId'>
            /// Billing account ID
            /// </param>
            /// <param name='billingProfileId'>
            /// Billing profile ID.
            /// </param>
            /// <param name='grainParameter'>
            /// Grain. Possible values include: 'Hourly', 'Daily', 'Monthly'
            /// </param>
            /// <param name='filter'>
            /// Supports filtering by properties/benefitId, properties/benefitOrderId and
            /// properties/usageDate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BenefitUtilizationSummary>> ListByBillingProfileIdAsync(this IBenefitUtilizationSummariesOperations operations, string billingAccountId, string billingProfileId, string grainParameter = default(string), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByBillingProfileIdWithHttpMessagesAsync(billingAccountId, billingProfileId, grainParameter, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the savings plan utilization summaries for daily or monthly grain.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='savingsPlanOrderId'>
            /// Savings plan order ID.
            /// </param>
            /// <param name='filter'>
            /// Supports filtering by properties/usageDate.
            /// </param>
            /// <param name='grainParameter'>
            /// Grain. Possible values include: 'Hourly', 'Daily', 'Monthly'
            /// </param>
            public static IPage<BenefitUtilizationSummary> ListBySavingsPlanOrder(this IBenefitUtilizationSummariesOperations operations, string savingsPlanOrderId, string filter = default(string), string grainParameter = default(string))
            {
                return operations.ListBySavingsPlanOrderAsync(savingsPlanOrderId, filter, grainParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the savings plan utilization summaries for daily or monthly grain.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='savingsPlanOrderId'>
            /// Savings plan order ID.
            /// </param>
            /// <param name='filter'>
            /// Supports filtering by properties/usageDate.
            /// </param>
            /// <param name='grainParameter'>
            /// Grain. Possible values include: 'Hourly', 'Daily', 'Monthly'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BenefitUtilizationSummary>> ListBySavingsPlanOrderAsync(this IBenefitUtilizationSummariesOperations operations, string savingsPlanOrderId, string filter = default(string), string grainParameter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySavingsPlanOrderWithHttpMessagesAsync(savingsPlanOrderId, filter, grainParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the savings plan utilization summaries for daily or monthly grain.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='savingsPlanOrderId'>
            /// Savings plan order ID.
            /// </param>
            /// <param name='savingsPlanId'>
            /// Savings plan ID.
            /// </param>
            /// <param name='filter'>
            /// Supports filtering by properties/usageDate.
            /// </param>
            /// <param name='grainParameter'>
            /// Grain. Possible values include: 'Hourly', 'Daily', 'Monthly'
            /// </param>
            public static IPage<BenefitUtilizationSummary> ListBySavingsPlanId(this IBenefitUtilizationSummariesOperations operations, string savingsPlanOrderId, string savingsPlanId, string filter = default(string), string grainParameter = default(string))
            {
                return operations.ListBySavingsPlanIdAsync(savingsPlanOrderId, savingsPlanId, filter, grainParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the savings plan utilization summaries for daily or monthly grain.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='savingsPlanOrderId'>
            /// Savings plan order ID.
            /// </param>
            /// <param name='savingsPlanId'>
            /// Savings plan ID.
            /// </param>
            /// <param name='filter'>
            /// Supports filtering by properties/usageDate.
            /// </param>
            /// <param name='grainParameter'>
            /// Grain. Possible values include: 'Hourly', 'Daily', 'Monthly'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BenefitUtilizationSummary>> ListBySavingsPlanIdAsync(this IBenefitUtilizationSummariesOperations operations, string savingsPlanOrderId, string savingsPlanId, string filter = default(string), string grainParameter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySavingsPlanIdWithHttpMessagesAsync(savingsPlanOrderId, savingsPlanId, filter, grainParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists savings plan utilization summaries for the enterprise agreement
            /// scope. Supported at grain values: 'Daily' and 'Monthly'.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<BenefitUtilizationSummary> ListByBillingAccountIdNext(this IBenefitUtilizationSummariesOperations operations, string nextPageLink)
            {
                return operations.ListByBillingAccountIdNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists savings plan utilization summaries for the enterprise agreement
            /// scope. Supported at grain values: 'Daily' and 'Monthly'.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BenefitUtilizationSummary>> ListByBillingAccountIdNextAsync(this IBenefitUtilizationSummariesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByBillingAccountIdNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists savings plan utilization summaries for billing profile. Supported at
            /// grain values: 'Daily' and 'Monthly'.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<BenefitUtilizationSummary> ListByBillingProfileIdNext(this IBenefitUtilizationSummariesOperations operations, string nextPageLink)
            {
                return operations.ListByBillingProfileIdNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists savings plan utilization summaries for billing profile. Supported at
            /// grain values: 'Daily' and 'Monthly'.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BenefitUtilizationSummary>> ListByBillingProfileIdNextAsync(this IBenefitUtilizationSummariesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByBillingProfileIdNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the savings plan utilization summaries for daily or monthly grain.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<BenefitUtilizationSummary> ListBySavingsPlanOrderNext(this IBenefitUtilizationSummariesOperations operations, string nextPageLink)
            {
                return operations.ListBySavingsPlanOrderNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the savings plan utilization summaries for daily or monthly grain.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BenefitUtilizationSummary>> ListBySavingsPlanOrderNextAsync(this IBenefitUtilizationSummariesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySavingsPlanOrderNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the savings plan utilization summaries for daily or monthly grain.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<BenefitUtilizationSummary> ListBySavingsPlanIdNext(this IBenefitUtilizationSummariesOperations operations, string nextPageLink)
            {
                return operations.ListBySavingsPlanIdNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the savings plan utilization summaries for daily or monthly grain.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/cost-management/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BenefitUtilizationSummary>> ListBySavingsPlanIdNextAsync(this IBenefitUtilizationSummariesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySavingsPlanIdNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
