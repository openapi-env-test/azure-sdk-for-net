// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CostManagement.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Scheduled action definition.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ScheduledAction : ScheduledActionProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the ScheduledAction class.
        /// </summary>
        public ScheduledAction()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScheduledAction class.
        /// </summary>
        /// <param name="displayName">Scheduled action name.</param>
        /// <param name="notification">Notification properties based on
        /// scheduled action kind.</param>
        /// <param name="schedule">Schedule of the scheduled action.</param>
        /// <param name="status">Status of the scheduled action. Possible
        /// values include: 'Disabled', 'Enabled', 'Expired'</param>
        /// <param name="viewId">Cost analysis viewId used for scheduled
        /// action. For example,
        /// '/providers/Microsoft.CostManagement/views/swaggerExample'</param>
        /// <param name="eTag">Resource Etag. For update calls, eTag is
        /// mandatory. Fetch the resource's eTag by doing a 'GET' call first
        /// and then including the latest eTag as part of the request body or
        /// 'If-Match' header while performing the update. For create calls,
        /// eTag is not required.</param>
        /// <param name="kind">Kind of the scheduled action. Possible values
        /// include: 'Email', 'InsightAlert'</param>
        /// <param name="systemData">Kind of the scheduled action.</param>
        /// <param name="fileDestination">Destination format of the view data.
        /// This is optional.</param>
        /// <param name="notificationEmail">Email address of the point of
        /// contact that should get the unsubscribe requests and notification
        /// emails.</param>
        /// <param name="scope">Cost Management scope like
        /// 'subscriptions/{subscriptionId}' for subscription scope,
        /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
        /// for resourceGroup scope,
        /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}'
        /// for Billing Account scope,
        /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}'
        /// for Department scope,
        /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
        /// for EnrollmentAccount scope,
        /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
        /// for BillingProfile scope,
        /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
        /// for InvoiceSection scope,
        /// '/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}'
        /// for ExternalBillingAccount scope, and
        /// '/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}'
        /// for ExternalSubscription scope.</param>
        public ScheduledAction(string displayName, NotificationProperties notification, ScheduleProperties schedule, string status, string viewId, string eTag = default(string), string kind = default(string), SystemData systemData = default(SystemData), FileDestination fileDestination = default(FileDestination), string notificationEmail = default(string), string scope = default(string))
            : base(eTag, kind, systemData)
        {
            DisplayName = displayName;
            FileDestination = fileDestination;
            Notification = notification;
            NotificationEmail = notificationEmail;
            Schedule = schedule;
            Scope = scope;
            Status = status;
            ViewId = viewId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets scheduled action name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets destination format of the view data. This is optional.
        /// </summary>
        [JsonProperty(PropertyName = "properties.fileDestination")]
        public FileDestination FileDestination { get; set; }

        /// <summary>
        /// Gets or sets notification properties based on scheduled action
        /// kind.
        /// </summary>
        [JsonProperty(PropertyName = "properties.notification")]
        public NotificationProperties Notification { get; set; }

        /// <summary>
        /// Gets or sets email address of the point of contact that should get
        /// the unsubscribe requests and notification emails.
        /// </summary>
        [JsonProperty(PropertyName = "properties.notificationEmail")]
        public string NotificationEmail { get; set; }

        /// <summary>
        /// Gets or sets schedule of the scheduled action.
        /// </summary>
        [JsonProperty(PropertyName = "properties.schedule")]
        public ScheduleProperties Schedule { get; set; }

        /// <summary>
        /// Gets or sets cost Management scope like
        /// 'subscriptions/{subscriptionId}' for subscription scope,
        /// 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
        /// for resourceGroup scope,
        /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}'
        /// for Billing Account scope,
        /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}'
        /// for Department scope,
        /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
        /// for EnrollmentAccount scope,
        /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
        /// for BillingProfile scope,
        /// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
        /// for InvoiceSection scope,
        /// '/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}'
        /// for ExternalBillingAccount scope, and
        /// '/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}'
        /// for ExternalSubscription scope.
        /// </summary>
        [JsonProperty(PropertyName = "properties.scope")]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or sets status of the scheduled action. Possible values
        /// include: 'Disabled', 'Enabled', 'Expired'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets cost analysis viewId used for scheduled action. For
        /// example, '/providers/Microsoft.CostManagement/views/swaggerExample'
        /// </summary>
        [JsonProperty(PropertyName = "properties.viewId")]
        public string ViewId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DisplayName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DisplayName");
            }
            if (Notification == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Notification");
            }
            if (Schedule == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Schedule");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (ViewId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ViewId");
            }
            if (Notification != null)
            {
                Notification.Validate();
            }
            if (Schedule != null)
            {
                Schedule.Validate();
            }
        }
    }
}
