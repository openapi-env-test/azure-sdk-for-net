// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CostManagement.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The properties of the scheduled action notification.
    /// </summary>
    public partial class NotificationProperties
    {
        /// <summary>
        /// Initializes a new instance of the NotificationProperties class.
        /// </summary>
        public NotificationProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NotificationProperties class.
        /// </summary>
        /// <param name="to">Array of email addresses.</param>
        /// <param name="subject">Subject of the email. Length is limited to 70
        /// characters.</param>
        /// <param name="language">Locale of the email.</param>
        /// <param name="message">Optional message to be added in the email.
        /// Length is limited to 250 characters.</param>
        /// <param name="regionalFormat">Regional format used for formatting
        /// date/time and currency values in the email.</param>
        public NotificationProperties(IList<string> to, string subject, string language = default(string), string message = default(string), string regionalFormat = default(string))
        {
            To = to;
            Language = language;
            Message = message;
            RegionalFormat = regionalFormat;
            Subject = subject;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets array of email addresses.
        /// </summary>
        [JsonProperty(PropertyName = "to")]
        public IList<string> To { get; set; }

        /// <summary>
        /// Gets or sets locale of the email.
        /// </summary>
        [JsonProperty(PropertyName = "language")]
        public string Language { get; set; }

        /// <summary>
        /// Gets or sets optional message to be added in the email. Length is
        /// limited to 250 characters.
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        /// <summary>
        /// Gets or sets regional format used for formatting date/time and
        /// currency values in the email.
        /// </summary>
        [JsonProperty(PropertyName = "regionalFormat")]
        public string RegionalFormat { get; set; }

        /// <summary>
        /// Gets or sets subject of the email. Length is limited to 70
        /// characters.
        /// </summary>
        [JsonProperty(PropertyName = "subject")]
        public string Subject { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (To == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "To");
            }
            if (Subject == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Subject");
            }
            if (To != null)
            {
                if (To.Count > 20)
                {
                    throw new ValidationException(ValidationRules.MaxItems, "To", 20);
                }
                if (To.Count < 1)
                {
                    throw new ValidationException(ValidationRules.MinItems, "To", 1);
                }
            }
        }
    }
}
