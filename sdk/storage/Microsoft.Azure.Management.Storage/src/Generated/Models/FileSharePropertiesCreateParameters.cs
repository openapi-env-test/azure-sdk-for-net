// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Storage.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class FileSharePropertiesCreateParameters
    {
        /// <summary>
        /// Initializes a new instance of the
        /// FileSharePropertiesCreateParameters class.
        /// </summary>
        public FileSharePropertiesCreateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// FileSharePropertiesCreateParameters class.
        /// </summary>
        /// <param name="metadata">A name-value pair to associate with the
        /// share as metadata.</param>
        /// <param name="shareQuota">The maximum size of the share, in
        /// gigabytes. Must be greater than 0, and less than or equal to 5TB
        /// (5120).</param>
        /// <param name="enabledProtocols">Protocols for file shares. It cannot
        /// be changed after file share creation. Possible values include:
        /// 'SMB', 'NFS'</param>
        /// <param name="rootSquash">Reduction of the access rights for the
        /// remote superuser. Possible values include: 'NoRootSquash',
        /// 'RootSquash', 'AllSquash'</param>
        public FileSharePropertiesCreateParameters(IDictionary<string, string> metadata = default(IDictionary<string, string>), int? shareQuota = default(int?), string enabledProtocols = default(string), string rootSquash = default(string))
        {
            Metadata = metadata;
            ShareQuota = shareQuota;
            EnabledProtocols = enabledProtocols;
            RootSquash = rootSquash;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a name-value pair to associate with the share as
        /// metadata.
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public IDictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets or sets the maximum size of the share, in gigabytes. Must be
        /// greater than 0, and less than or equal to 5TB (5120).
        /// </summary>
        [JsonProperty(PropertyName = "shareQuota")]
        public int? ShareQuota { get; set; }

        /// <summary>
        /// Gets or sets protocols for file shares. It cannot be changed after
        /// file share creation. Possible values include: 'SMB', 'NFS'
        /// </summary>
        [JsonProperty(PropertyName = "enabledProtocols")]
        public string EnabledProtocols { get; set; }

        /// <summary>
        /// Gets or sets reduction of the access rights for the remote
        /// superuser. Possible values include: 'NoRootSquash', 'RootSquash',
        /// 'AllSquash'
        /// </summary>
        [JsonProperty(PropertyName = "rootSquash")]
        public string RootSquash { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ShareQuota > 5120)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ShareQuota", 5120);
            }
            if (ShareQuota < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ShareQuota", 1);
            }
        }
    }
}
