// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.AgFoodPlatform.Models
{
    /// <summary> FarmBeatsSolution properties. </summary>
    public partial class FarmBeatsSolutionProperties
    {
        /// <summary> Initializes a new instance of FarmBeatsSolutionProperties. </summary>
        public FarmBeatsSolutionProperties()
        {
            DataAccessScopes = new ChangeTrackingList<string>();
            InputParametersValidationScopes = new ChangeTrackingList<ResourceParameter>();
            OpenApiSpecsDictionary = new ChangeTrackingDictionary<string, BinaryData>();
            EvaluatedOutputsDictionary = new ChangeTrackingDictionary<string, SolutionEvaluatedOutput>();
            ActionIds = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of FarmBeatsSolutionProperties. </summary>
        /// <param name="partnerId"> Solution Partner Id. </param>
        /// <param name="partnerTenantId"> Solution Partner Tenant Id. </param>
        /// <param name="dataAccessScopes">
        /// Gets scope of the FarmBeats data access that&apos;s required for processing solution request to partner.
        /// Example: For gdd they might need weatherScope and satelliteScope.
        /// </param>
        /// <param name="marketplaceOfferDetails"></param>
        /// <param name="inputParametersValidationScopes">
        /// Gets scope of the FarmBeats related parameters that need to be validated in apiInputParameters.
        /// Example: For if &apos;FarmHierarchy&apos; is the input scope for &apos;WeatherScope&apos; data access
        /// For working with WeatherScope we need FarmHierarchy info implies &apos;farmerId&apos;, &apos;resourceId&apos;, &apos;resourceType&apos; in request body.
        /// </param>
        /// <param name="openApiSpecsDictionary"> Gets apiVersion: Swagger Document Dictionary to capture all api versions of swagger exposed by partner to farmbeats. </param>
        /// <param name="evaluatedOutputsDictionary"> Gets example name: insight sample response Dictionary to capture all variations of computed results ingested by partner. </param>
        /// <param name="accessFBApplicationId"> Application id of the multi tenant application to be used by partner to access FarmBeats data. </param>
        /// <param name="saaSApplicationId"> Application id of the SaaS multi tenant application. </param>
        /// <param name="actionIds"> List of ActionIds needed to make the SaaS multi tenant application access relevant fb data. </param>
        /// <param name="roleId"> Role Id of the SaaS multi tenant application to access relevant fb data. </param>
        /// <param name="roleName"> Role Name of the SaaS multi tenant application to access relevant fb data. </param>
        /// <param name="accessFBApplicationName"> Application name of the multi tenant application to be used by partner to access FarmBeatsData. </param>
        internal FarmBeatsSolutionProperties(string partnerId, string partnerTenantId, IReadOnlyList<string> dataAccessScopes, MarketplaceOfferDetails marketplaceOfferDetails, IReadOnlyList<ResourceParameter> inputParametersValidationScopes, IReadOnlyDictionary<string, BinaryData> openApiSpecsDictionary, IReadOnlyDictionary<string, SolutionEvaluatedOutput> evaluatedOutputsDictionary, Guid? accessFBApplicationId, Guid? saaSApplicationId, IReadOnlyList<string> actionIds, string roleId, string roleName, string accessFBApplicationName)
        {
            PartnerId = partnerId;
            PartnerTenantId = partnerTenantId;
            DataAccessScopes = dataAccessScopes;
            MarketplaceOfferDetails = marketplaceOfferDetails;
            InputParametersValidationScopes = inputParametersValidationScopes;
            OpenApiSpecsDictionary = openApiSpecsDictionary;
            EvaluatedOutputsDictionary = evaluatedOutputsDictionary;
            AccessFBApplicationId = accessFBApplicationId;
            SaaSApplicationId = saaSApplicationId;
            ActionIds = actionIds;
            RoleId = roleId;
            RoleName = roleName;
            AccessFBApplicationName = accessFBApplicationName;
        }

        /// <summary> Solution Partner Id. </summary>
        public string PartnerId { get; }
        /// <summary> Solution Partner Tenant Id. </summary>
        public string PartnerTenantId { get; }
        /// <summary>
        /// Gets scope of the FarmBeats data access that&apos;s required for processing solution request to partner.
        /// Example: For gdd they might need weatherScope and satelliteScope.
        /// </summary>
        public IReadOnlyList<string> DataAccessScopes { get; }
        /// <summary> Gets or sets the marketplace offer details. </summary>
        public MarketplaceOfferDetails MarketplaceOfferDetails { get; set; }
        /// <summary>
        /// Gets scope of the FarmBeats related parameters that need to be validated in apiInputParameters.
        /// Example: For if &apos;FarmHierarchy&apos; is the input scope for &apos;WeatherScope&apos; data access
        /// For working with WeatherScope we need FarmHierarchy info implies &apos;farmerId&apos;, &apos;resourceId&apos;, &apos;resourceType&apos; in request body.
        /// </summary>
        public IReadOnlyList<ResourceParameter> InputParametersValidationScopes { get; }
        /// <summary>
        /// Gets apiVersion: Swagger Document Dictionary to capture all api versions of swagger exposed by partner to farmbeats.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyDictionary<string, BinaryData> OpenApiSpecsDictionary { get; }
        /// <summary> Gets example name: insight sample response Dictionary to capture all variations of computed results ingested by partner. </summary>
        public IReadOnlyDictionary<string, SolutionEvaluatedOutput> EvaluatedOutputsDictionary { get; }
        /// <summary> Application id of the multi tenant application to be used by partner to access FarmBeats data. </summary>
        public Guid? AccessFBApplicationId { get; }
        /// <summary> Application id of the SaaS multi tenant application. </summary>
        public Guid? SaaSApplicationId { get; }
        /// <summary> List of ActionIds needed to make the SaaS multi tenant application access relevant fb data. </summary>
        public IReadOnlyList<string> ActionIds { get; }
        /// <summary> Role Id of the SaaS multi tenant application to access relevant fb data. </summary>
        public string RoleId { get; }
        /// <summary> Role Name of the SaaS multi tenant application to access relevant fb data. </summary>
        public string RoleName { get; }
        /// <summary> Application name of the multi tenant application to be used by partner to access FarmBeatsData. </summary>
        public string AccessFBApplicationName { get; }
    }
}
