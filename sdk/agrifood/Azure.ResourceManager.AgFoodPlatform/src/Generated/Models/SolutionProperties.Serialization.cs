// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AgFoodPlatform.Models
{
    public partial class SolutionProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("saasSubscriptionId");
            writer.WriteStringValue(SaasSubscriptionId);
            writer.WritePropertyName("saasSubscriptionName");
            writer.WriteStringValue(SaasSubscriptionName);
            writer.WritePropertyName("marketplacePublisherId");
            writer.WriteStringValue(MarketplacePublisherId);
            writer.WritePropertyName("planId");
            writer.WriteStringValue(PlanId);
            writer.WritePropertyName("offerId");
            writer.WriteStringValue(OfferId);
            writer.WritePropertyName("termId");
            writer.WriteStringValue(TermId);
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(item.Value.ToString()).RootElement);
#endif
            }
            writer.WriteEndObject();
        }

        internal static SolutionProperties DeserializeSolutionProperties(JsonElement element)
        {
            Optional<string> solutionId = default;
            Optional<string> partnerId = default;
            string saasSubscriptionId = default;
            string saasSubscriptionName = default;
            string marketplacePublisherId = default;
            string planId = default;
            string offerId = default;
            string termId = default;
            IDictionary<string, BinaryData> additionalProperties = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("solutionId"))
                {
                    solutionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("partnerId"))
                {
                    partnerId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("saasSubscriptionId"))
                {
                    saasSubscriptionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("saasSubscriptionName"))
                {
                    saasSubscriptionName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("marketplacePublisherId"))
                {
                    marketplacePublisherId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("planId"))
                {
                    planId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("offerId"))
                {
                    offerId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("termId"))
                {
                    termId = property.Value.GetString();
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
            }
            additionalProperties = additionalPropertiesDictionary;
            return new SolutionProperties(solutionId.Value, partnerId.Value, saasSubscriptionId, saasSubscriptionName, marketplacePublisherId, planId, offerId, termId, additionalProperties);
        }
    }
}
