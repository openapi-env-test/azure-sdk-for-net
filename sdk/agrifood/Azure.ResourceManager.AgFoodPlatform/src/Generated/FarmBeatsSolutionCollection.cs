// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.AgFoodPlatform
{
    /// <summary>
    /// A class representing a collection of <see cref="FarmBeatsSolutionResource" /> and their operations.
    /// Each <see cref="FarmBeatsSolutionResource" /> in the collection will belong to the same instance of <see cref="TenantResource" />.
    /// To get a <see cref="FarmBeatsSolutionCollection" /> instance call the GetFarmBeatsSolutions method from an instance of <see cref="TenantResource" />.
    /// </summary>
    public partial class FarmBeatsSolutionCollection : ArmCollection, IEnumerable<FarmBeatsSolutionResource>, IAsyncEnumerable<FarmBeatsSolutionResource>
    {
        private readonly ClientDiagnostics _farmBeatsSolutionSolutionsDiscoverabilityClientDiagnostics;
        private readonly SolutionsDiscoverabilityRestOperations _farmBeatsSolutionSolutionsDiscoverabilityRestClient;

        /// <summary> Initializes a new instance of the <see cref="FarmBeatsSolutionCollection"/> class for mocking. </summary>
        protected FarmBeatsSolutionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="FarmBeatsSolutionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal FarmBeatsSolutionCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _farmBeatsSolutionSolutionsDiscoverabilityClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.AgFoodPlatform", FarmBeatsSolutionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(FarmBeatsSolutionResource.ResourceType, out string farmBeatsSolutionSolutionsDiscoverabilityApiVersion);
            _farmBeatsSolutionSolutionsDiscoverabilityRestClient = new SolutionsDiscoverabilityRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, farmBeatsSolutionSolutionsDiscoverabilityApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != TenantResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, TenantResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get farmBeats solution by id.
        /// Request Path: /providers/Microsoft.AgFoodPlatform/farmBeatsSolutionDefinitions/{farmBeatsSolutionId}
        /// Operation Id: SolutionsDiscoverability_Get
        /// </summary>
        /// <param name="farmBeatsSolutionId"> farmBeatsSolutionId to be queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="farmBeatsSolutionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="farmBeatsSolutionId"/> is null. </exception>
        public virtual async Task<Response<FarmBeatsSolutionResource>> GetAsync(string farmBeatsSolutionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(farmBeatsSolutionId, nameof(farmBeatsSolutionId));

            using var scope = _farmBeatsSolutionSolutionsDiscoverabilityClientDiagnostics.CreateScope("FarmBeatsSolutionCollection.Get");
            scope.Start();
            try
            {
                var response = await _farmBeatsSolutionSolutionsDiscoverabilityRestClient.GetAsync(farmBeatsSolutionId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new FarmBeatsSolutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get farmBeats solution by id.
        /// Request Path: /providers/Microsoft.AgFoodPlatform/farmBeatsSolutionDefinitions/{farmBeatsSolutionId}
        /// Operation Id: SolutionsDiscoverability_Get
        /// </summary>
        /// <param name="farmBeatsSolutionId"> farmBeatsSolutionId to be queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="farmBeatsSolutionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="farmBeatsSolutionId"/> is null. </exception>
        public virtual Response<FarmBeatsSolutionResource> Get(string farmBeatsSolutionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(farmBeatsSolutionId, nameof(farmBeatsSolutionId));

            using var scope = _farmBeatsSolutionSolutionsDiscoverabilityClientDiagnostics.CreateScope("FarmBeatsSolutionCollection.Get");
            scope.Start();
            try
            {
                var response = _farmBeatsSolutionSolutionsDiscoverabilityRestClient.Get(farmBeatsSolutionId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new FarmBeatsSolutionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get list of farmBeats solutions.
        /// Request Path: /providers/Microsoft.AgFoodPlatform/farmBeatsSolutionDefinitions
        /// Operation Id: SolutionsDiscoverability_List
        /// </summary>
        /// <param name="farmBeatsSolutionIds"> Ids of FarmBeats Solutions which the customer requests to fetch. </param>
        /// <param name="farmBeatsSolutionNames"> Names of FarmBeats Solutions which the customer requests to fetch. </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="FarmBeatsSolutionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<FarmBeatsSolutionResource> GetAllAsync(IEnumerable<string> farmBeatsSolutionIds = null, IEnumerable<string> farmBeatsSolutionNames = null, int? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<FarmBeatsSolutionResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _farmBeatsSolutionSolutionsDiscoverabilityClientDiagnostics.CreateScope("FarmBeatsSolutionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _farmBeatsSolutionSolutionsDiscoverabilityRestClient.ListAsync(farmBeatsSolutionIds, farmBeatsSolutionNames, pageSizeHint, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new FarmBeatsSolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<FarmBeatsSolutionResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _farmBeatsSolutionSolutionsDiscoverabilityClientDiagnostics.CreateScope("FarmBeatsSolutionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _farmBeatsSolutionSolutionsDiscoverabilityRestClient.ListNextPageAsync(nextLink, farmBeatsSolutionIds, farmBeatsSolutionNames, pageSizeHint, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new FarmBeatsSolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get list of farmBeats solutions.
        /// Request Path: /providers/Microsoft.AgFoodPlatform/farmBeatsSolutionDefinitions
        /// Operation Id: SolutionsDiscoverability_List
        /// </summary>
        /// <param name="farmBeatsSolutionIds"> Ids of FarmBeats Solutions which the customer requests to fetch. </param>
        /// <param name="farmBeatsSolutionNames"> Names of FarmBeats Solutions which the customer requests to fetch. </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="FarmBeatsSolutionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<FarmBeatsSolutionResource> GetAll(IEnumerable<string> farmBeatsSolutionIds = null, IEnumerable<string> farmBeatsSolutionNames = null, int? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            Page<FarmBeatsSolutionResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _farmBeatsSolutionSolutionsDiscoverabilityClientDiagnostics.CreateScope("FarmBeatsSolutionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _farmBeatsSolutionSolutionsDiscoverabilityRestClient.List(farmBeatsSolutionIds, farmBeatsSolutionNames, pageSizeHint, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new FarmBeatsSolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<FarmBeatsSolutionResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _farmBeatsSolutionSolutionsDiscoverabilityClientDiagnostics.CreateScope("FarmBeatsSolutionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _farmBeatsSolutionSolutionsDiscoverabilityRestClient.ListNextPage(nextLink, farmBeatsSolutionIds, farmBeatsSolutionNames, pageSizeHint, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new FarmBeatsSolutionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /providers/Microsoft.AgFoodPlatform/farmBeatsSolutionDefinitions/{farmBeatsSolutionId}
        /// Operation Id: SolutionsDiscoverability_Get
        /// </summary>
        /// <param name="farmBeatsSolutionId"> farmBeatsSolutionId to be queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="farmBeatsSolutionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="farmBeatsSolutionId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string farmBeatsSolutionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(farmBeatsSolutionId, nameof(farmBeatsSolutionId));

            using var scope = _farmBeatsSolutionSolutionsDiscoverabilityClientDiagnostics.CreateScope("FarmBeatsSolutionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _farmBeatsSolutionSolutionsDiscoverabilityRestClient.GetAsync(farmBeatsSolutionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /providers/Microsoft.AgFoodPlatform/farmBeatsSolutionDefinitions/{farmBeatsSolutionId}
        /// Operation Id: SolutionsDiscoverability_Get
        /// </summary>
        /// <param name="farmBeatsSolutionId"> farmBeatsSolutionId to be queried. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="farmBeatsSolutionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="farmBeatsSolutionId"/> is null. </exception>
        public virtual Response<bool> Exists(string farmBeatsSolutionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(farmBeatsSolutionId, nameof(farmBeatsSolutionId));

            using var scope = _farmBeatsSolutionSolutionsDiscoverabilityClientDiagnostics.CreateScope("FarmBeatsSolutionCollection.Exists");
            scope.Start();
            try
            {
                var response = _farmBeatsSolutionSolutionsDiscoverabilityRestClient.Get(farmBeatsSolutionId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<FarmBeatsSolutionResource> IEnumerable<FarmBeatsSolutionResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<FarmBeatsSolutionResource> IAsyncEnumerable<FarmBeatsSolutionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
