// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AzureArcData
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SqlServerDatabasesOperations.
    /// </summary>
    public static partial class SqlServerDatabasesOperationsExtensions
    {
            /// <summary>
            /// Creates or replaces an Arc Sql Server Database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerDatabaseResource'>
            /// The request body for database resource.
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='databaseName'>
            /// Name of the database
            /// </param>
            public static SqlServerDatabaseResource Create(this ISqlServerDatabasesOperations operations, string resourceGroupName, SqlServerDatabaseResource sqlServerDatabaseResource, string sqlServerInstanceName, string databaseName)
            {
                return operations.CreateAsync(resourceGroupName, sqlServerDatabaseResource, sqlServerInstanceName, databaseName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or replaces an Arc Sql Server Database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerDatabaseResource'>
            /// The request body for database resource.
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='databaseName'>
            /// Name of the database
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlServerDatabaseResource> CreateAsync(this ISqlServerDatabasesOperations operations, string resourceGroupName, SqlServerDatabaseResource sqlServerDatabaseResource, string sqlServerInstanceName, string databaseName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, sqlServerDatabaseResource, sqlServerInstanceName, databaseName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an Arc Sql Server database resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='databaseName'>
            /// Name of the database
            /// </param>
            public static void Delete(this ISqlServerDatabasesOperations operations, string resourceGroupName, string sqlServerInstanceName, string databaseName)
            {
                operations.DeleteAsync(resourceGroupName, sqlServerInstanceName, databaseName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an Arc Sql Server database resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='databaseName'>
            /// Name of the database
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ISqlServerDatabasesOperations operations, string resourceGroupName, string sqlServerInstanceName, string databaseName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, sqlServerInstanceName, databaseName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieves an Arc Sql Server database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='databaseName'>
            /// Name of the database
            /// </param>
            public static SqlServerDatabaseResource Get(this ISqlServerDatabasesOperations operations, string resourceGroupName, string sqlServerInstanceName, string databaseName)
            {
                return operations.GetAsync(resourceGroupName, sqlServerInstanceName, databaseName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves an Arc Sql Server database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='databaseName'>
            /// Name of the database
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlServerDatabaseResource> GetAsync(this ISqlServerDatabasesOperations operations, string resourceGroupName, string sqlServerInstanceName, string databaseName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, sqlServerInstanceName, databaseName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an existing database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='databaseName'>
            /// Name of the database
            /// </param>
            /// <param name='sqlServerDatabaseUpdate'>
            /// The requested database resource state.
            /// </param>
            public static SqlServerDatabaseResource Update(this ISqlServerDatabasesOperations operations, string resourceGroupName, string sqlServerInstanceName, string databaseName, SqlServerDatabaseUpdate sqlServerDatabaseUpdate)
            {
                return operations.UpdateAsync(resourceGroupName, sqlServerInstanceName, databaseName, sqlServerDatabaseUpdate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an existing database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='databaseName'>
            /// Name of the database
            /// </param>
            /// <param name='sqlServerDatabaseUpdate'>
            /// The requested database resource state.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlServerDatabaseResource> UpdateAsync(this ISqlServerDatabasesOperations operations, string resourceGroupName, string sqlServerInstanceName, string databaseName, SqlServerDatabaseUpdate sqlServerDatabaseUpdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, sqlServerInstanceName, databaseName, sqlServerDatabaseUpdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the databases associated with the given Arc Sql Server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            public static IPage<SqlServerDatabaseResource> List(this ISqlServerDatabasesOperations operations, string resourceGroupName, string sqlServerInstanceName)
            {
                return operations.ListAsync(resourceGroupName, sqlServerInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List the databases associated with the given Arc Sql Server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='sqlServerInstanceName'>
            /// Name of SQL Server Instance
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlServerDatabaseResource>> ListAsync(this ISqlServerDatabasesOperations operations, string resourceGroupName, string sqlServerInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, sqlServerInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the databases associated with the given Arc Sql Server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SqlServerDatabaseResource> ListNext(this ISqlServerDatabasesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List the databases associated with the given Arc Sql Server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlServerDatabaseResource>> ListNextAsync(this ISqlServerDatabasesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
