// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Catalog
{
    /// <summary> The PurviewAccounts service client. </summary>
    public partial class PurviewAccountsClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of PurviewAccountsClient for mocking. </summary>
        protected PurviewAccountsClient()
        {
        }

        /// <summary> Initializes a new instance of PurviewAccountsClient. </summary>
        /// <param name="endpoint"> The account endpoint of your Purview account. Example: https://{accountName}.purview.azure.com/account/. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public PurviewAccountsClient(string endpoint, TokenCredential credential) : this(endpoint, credential, new PurviewCatalogClientOptions())
        {
        }

        /// <summary> Initializes a new instance of PurviewAccountsClient. </summary>
        /// <param name="endpoint"> The account endpoint of your Purview account. Example: https://{accountName}.purview.azure.com/account/. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public PurviewAccountsClient(string endpoint, TokenCredential credential, PurviewCatalogClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new PurviewCatalogClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary> Get an account. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Account</c>:
        /// <code>{
        ///   id: string, # Optional. Gets or sets the identifier.
        ///   identity: {
        ///     principalId: string, # Optional. Service principal object Id
        ///     tenantId: string, # Optional. Tenant Id
        ///     type: &quot;SystemAssigned&quot;, # Optional. Identity Type
        ///   }, # Optional. Identity Info on the tracked resource
        ///   location: string, # Optional. Gets or sets the location.
        ///   name: string, # Optional. Gets or sets the name.
        ///   properties: {
        ///     cloudConnectors: {
        ///       awsExternalId: string, # Optional. AWS external identifier.
        /// Configured in AWS to allow use of the role arn used for scanning
        ///     }, # Optional. Cloud connectors.
        /// External cloud identifier used as part of scanning configuration.
        ///     createdAt: string (ISO 8601 Format), # Optional. Gets the time at which the entity was created.
        ///     createdBy: string, # Optional. Gets the creator of the entity.
        ///     createdByObjectId: string, # Optional. Gets the creators of the entity&apos;s object id.
        ///     endpoints: {
        ///       catalog: string, # Optional. Gets the catalog endpoint.
        ///       guardian: string, # Optional. Gets the guardian endpoint.
        ///       scan: string, # Optional. Gets the scan endpoint.
        ///     }, # Optional. The URIs that are the public endpoints of the account.
        ///     friendlyName: string, # Optional. Gets or sets the friendly name.
        ///     managedResourceGroupName: string, # Optional. Gets or sets the managed resource group name
        ///     managedResources: {
        ///       eventHubNamespace: string, # Optional. Gets the managed event hub namespace resource identifier.
        ///       resourceGroup: string, # Optional. Gets the managed resource group resource identifier. This resource group will host resource dependencies for the account.
        ///       storageAccount: string, # Optional. Gets the managed storage account resource identifier.
        ///     }, # Optional. Gets the resource identifiers of the managed resources.
        ///     privateEndpointConnections: [
        ///       {
        ///         id: string, # Optional. Gets or sets the identifier.
        ///         name: string, # Optional. Gets or sets the name.
        ///         properties: {
        ///           privateEndpoint: {
        ///             id: string, # Optional. The private endpoint identifier.
        ///           }, # Optional. The private endpoint information.
        ///           privateLinkServiceConnectionState: {
        ///             actionsRequired: string, # Optional. The required actions.
        ///             description: string, # Optional. The description.
        ///             status: &quot;Unknown&quot; | &quot;Pending&quot; | &quot;Approved&quot; | &quot;Rejected&quot; | &quot;Disconnected&quot;, # Optional. The status.
        ///           }, # Optional. The private link service connection state.
        ///           provisioningState: string, # Optional. The provisioning state.
        ///         }, # Optional. The connection identifier.
        ///         type: string, # Optional. Gets or sets the type.
        ///       }
        ///     ], # Optional. Gets the private endpoint connections information.
        ///     provisioningState: &quot;Unknown&quot; | &quot;Creating&quot; | &quot;Moving&quot; | &quot;Deleting&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;Failed&quot; | &quot;Succeeded&quot; | &quot;Canceled&quot;, # Optional. Gets or sets the state of the provisioning.
        ///     publicNetworkAccess: &quot;NotSpecified&quot; | &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Gets or sets the public network access.
        ///   }, # Optional. Gets or sets the properties.
        ///   sku: {
        ///     capacity: number, # Optional. Gets or sets the sku capacity. Possible values include: 4, 16
        ///     name: &quot;Standard&quot;, # Optional. Gets or sets the sku name.
        ///   }, # Optional. Gets or sets the Sku.
        ///   systemData: {
        ///     createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
        ///     createdBy: string, # Optional. The identity that created the resource.
        ///     createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
        ///     lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of the last modification the resource (UTC).
        ///     lastModifiedBy: string, # Optional. The identity that last modified the resource.
        ///     lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
        ///   }, # Optional. Metadata pertaining to creation and last modification of the resource.
        ///   tags: Dictionary&lt;string, string&gt;, # Optional. Tags on the azure resource.
        ///   type: string, # Optional. Gets or sets the type.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetAccountPropertiesAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewAccountsClient.GetAccountProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAccountPropertiesRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get an account. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Account</c>:
        /// <code>{
        ///   id: string, # Optional. Gets or sets the identifier.
        ///   identity: {
        ///     principalId: string, # Optional. Service principal object Id
        ///     tenantId: string, # Optional. Tenant Id
        ///     type: &quot;SystemAssigned&quot;, # Optional. Identity Type
        ///   }, # Optional. Identity Info on the tracked resource
        ///   location: string, # Optional. Gets or sets the location.
        ///   name: string, # Optional. Gets or sets the name.
        ///   properties: {
        ///     cloudConnectors: {
        ///       awsExternalId: string, # Optional. AWS external identifier.
        /// Configured in AWS to allow use of the role arn used for scanning
        ///     }, # Optional. Cloud connectors.
        /// External cloud identifier used as part of scanning configuration.
        ///     createdAt: string (ISO 8601 Format), # Optional. Gets the time at which the entity was created.
        ///     createdBy: string, # Optional. Gets the creator of the entity.
        ///     createdByObjectId: string, # Optional. Gets the creators of the entity&apos;s object id.
        ///     endpoints: {
        ///       catalog: string, # Optional. Gets the catalog endpoint.
        ///       guardian: string, # Optional. Gets the guardian endpoint.
        ///       scan: string, # Optional. Gets the scan endpoint.
        ///     }, # Optional. The URIs that are the public endpoints of the account.
        ///     friendlyName: string, # Optional. Gets or sets the friendly name.
        ///     managedResourceGroupName: string, # Optional. Gets or sets the managed resource group name
        ///     managedResources: {
        ///       eventHubNamespace: string, # Optional. Gets the managed event hub namespace resource identifier.
        ///       resourceGroup: string, # Optional. Gets the managed resource group resource identifier. This resource group will host resource dependencies for the account.
        ///       storageAccount: string, # Optional. Gets the managed storage account resource identifier.
        ///     }, # Optional. Gets the resource identifiers of the managed resources.
        ///     privateEndpointConnections: [
        ///       {
        ///         id: string, # Optional. Gets or sets the identifier.
        ///         name: string, # Optional. Gets or sets the name.
        ///         properties: {
        ///           privateEndpoint: {
        ///             id: string, # Optional. The private endpoint identifier.
        ///           }, # Optional. The private endpoint information.
        ///           privateLinkServiceConnectionState: {
        ///             actionsRequired: string, # Optional. The required actions.
        ///             description: string, # Optional. The description.
        ///             status: &quot;Unknown&quot; | &quot;Pending&quot; | &quot;Approved&quot; | &quot;Rejected&quot; | &quot;Disconnected&quot;, # Optional. The status.
        ///           }, # Optional. The private link service connection state.
        ///           provisioningState: string, # Optional. The provisioning state.
        ///         }, # Optional. The connection identifier.
        ///         type: string, # Optional. Gets or sets the type.
        ///       }
        ///     ], # Optional. Gets the private endpoint connections information.
        ///     provisioningState: &quot;Unknown&quot; | &quot;Creating&quot; | &quot;Moving&quot; | &quot;Deleting&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;Failed&quot; | &quot;Succeeded&quot; | &quot;Canceled&quot;, # Optional. Gets or sets the state of the provisioning.
        ///     publicNetworkAccess: &quot;NotSpecified&quot; | &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Gets or sets the public network access.
        ///   }, # Optional. Gets or sets the properties.
        ///   sku: {
        ///     capacity: number, # Optional. Gets or sets the sku capacity. Possible values include: 4, 16
        ///     name: &quot;Standard&quot;, # Optional. Gets or sets the sku name.
        ///   }, # Optional. Gets or sets the Sku.
        ///   systemData: {
        ///     createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
        ///     createdBy: string, # Optional. The identity that created the resource.
        ///     createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
        ///     lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of the last modification the resource (UTC).
        ///     lastModifiedBy: string, # Optional. The identity that last modified the resource.
        ///     lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
        ///   }, # Optional. Metadata pertaining to creation and last modification of the resource.
        ///   tags: Dictionary&lt;string, string&gt;, # Optional. Tags on the azure resource.
        ///   type: string, # Optional. Gets or sets the type.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetAccountProperties(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewAccountsClient.GetAccountProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAccountPropertiesRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates an account. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>DataPlaneAccountUpdateParameters</c>:
        /// <code>{
        ///   friendlyName: string, # Optional. The friendly name for the azure resource.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Account</c>:
        /// <code>{
        ///   id: string, # Optional. Gets or sets the identifier.
        ///   identity: {
        ///     principalId: string, # Optional. Service principal object Id
        ///     tenantId: string, # Optional. Tenant Id
        ///     type: &quot;SystemAssigned&quot;, # Optional. Identity Type
        ///   }, # Optional. Identity Info on the tracked resource
        ///   location: string, # Optional. Gets or sets the location.
        ///   name: string, # Optional. Gets or sets the name.
        ///   properties: {
        ///     cloudConnectors: {
        ///       awsExternalId: string, # Optional. AWS external identifier.
        /// Configured in AWS to allow use of the role arn used for scanning
        ///     }, # Optional. Cloud connectors.
        /// External cloud identifier used as part of scanning configuration.
        ///     createdAt: string (ISO 8601 Format), # Optional. Gets the time at which the entity was created.
        ///     createdBy: string, # Optional. Gets the creator of the entity.
        ///     createdByObjectId: string, # Optional. Gets the creators of the entity&apos;s object id.
        ///     endpoints: {
        ///       catalog: string, # Optional. Gets the catalog endpoint.
        ///       guardian: string, # Optional. Gets the guardian endpoint.
        ///       scan: string, # Optional. Gets the scan endpoint.
        ///     }, # Optional. The URIs that are the public endpoints of the account.
        ///     friendlyName: string, # Optional. Gets or sets the friendly name.
        ///     managedResourceGroupName: string, # Optional. Gets or sets the managed resource group name
        ///     managedResources: {
        ///       eventHubNamespace: string, # Optional. Gets the managed event hub namespace resource identifier.
        ///       resourceGroup: string, # Optional. Gets the managed resource group resource identifier. This resource group will host resource dependencies for the account.
        ///       storageAccount: string, # Optional. Gets the managed storage account resource identifier.
        ///     }, # Optional. Gets the resource identifiers of the managed resources.
        ///     privateEndpointConnections: [
        ///       {
        ///         id: string, # Optional. Gets or sets the identifier.
        ///         name: string, # Optional. Gets or sets the name.
        ///         properties: {
        ///           privateEndpoint: {
        ///             id: string, # Optional. The private endpoint identifier.
        ///           }, # Optional. The private endpoint information.
        ///           privateLinkServiceConnectionState: {
        ///             actionsRequired: string, # Optional. The required actions.
        ///             description: string, # Optional. The description.
        ///             status: &quot;Unknown&quot; | &quot;Pending&quot; | &quot;Approved&quot; | &quot;Rejected&quot; | &quot;Disconnected&quot;, # Optional. The status.
        ///           }, # Optional. The private link service connection state.
        ///           provisioningState: string, # Optional. The provisioning state.
        ///         }, # Optional. The connection identifier.
        ///         type: string, # Optional. Gets or sets the type.
        ///       }
        ///     ], # Optional. Gets the private endpoint connections information.
        ///     provisioningState: &quot;Unknown&quot; | &quot;Creating&quot; | &quot;Moving&quot; | &quot;Deleting&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;Failed&quot; | &quot;Succeeded&quot; | &quot;Canceled&quot;, # Optional. Gets or sets the state of the provisioning.
        ///     publicNetworkAccess: &quot;NotSpecified&quot; | &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Gets or sets the public network access.
        ///   }, # Optional. Gets or sets the properties.
        ///   sku: {
        ///     capacity: number, # Optional. Gets or sets the sku capacity. Possible values include: 4, 16
        ///     name: &quot;Standard&quot;, # Optional. Gets or sets the sku name.
        ///   }, # Optional. Gets or sets the Sku.
        ///   systemData: {
        ///     createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
        ///     createdBy: string, # Optional. The identity that created the resource.
        ///     createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
        ///     lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of the last modification the resource (UTC).
        ///     lastModifiedBy: string, # Optional. The identity that last modified the resource.
        ///     lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
        ///   }, # Optional. Metadata pertaining to creation and last modification of the resource.
        ///   tags: Dictionary&lt;string, string&gt;, # Optional. Tags on the azure resource.
        ///   type: string, # Optional. Gets or sets the type.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> UpdateAccountPropertiesAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewAccountsClient.UpdateAccountProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateAccountPropertiesRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates an account. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>DataPlaneAccountUpdateParameters</c>:
        /// <code>{
        ///   friendlyName: string, # Optional. The friendly name for the azure resource.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Account</c>:
        /// <code>{
        ///   id: string, # Optional. Gets or sets the identifier.
        ///   identity: {
        ///     principalId: string, # Optional. Service principal object Id
        ///     tenantId: string, # Optional. Tenant Id
        ///     type: &quot;SystemAssigned&quot;, # Optional. Identity Type
        ///   }, # Optional. Identity Info on the tracked resource
        ///   location: string, # Optional. Gets or sets the location.
        ///   name: string, # Optional. Gets or sets the name.
        ///   properties: {
        ///     cloudConnectors: {
        ///       awsExternalId: string, # Optional. AWS external identifier.
        /// Configured in AWS to allow use of the role arn used for scanning
        ///     }, # Optional. Cloud connectors.
        /// External cloud identifier used as part of scanning configuration.
        ///     createdAt: string (ISO 8601 Format), # Optional. Gets the time at which the entity was created.
        ///     createdBy: string, # Optional. Gets the creator of the entity.
        ///     createdByObjectId: string, # Optional. Gets the creators of the entity&apos;s object id.
        ///     endpoints: {
        ///       catalog: string, # Optional. Gets the catalog endpoint.
        ///       guardian: string, # Optional. Gets the guardian endpoint.
        ///       scan: string, # Optional. Gets the scan endpoint.
        ///     }, # Optional. The URIs that are the public endpoints of the account.
        ///     friendlyName: string, # Optional. Gets or sets the friendly name.
        ///     managedResourceGroupName: string, # Optional. Gets or sets the managed resource group name
        ///     managedResources: {
        ///       eventHubNamespace: string, # Optional. Gets the managed event hub namespace resource identifier.
        ///       resourceGroup: string, # Optional. Gets the managed resource group resource identifier. This resource group will host resource dependencies for the account.
        ///       storageAccount: string, # Optional. Gets the managed storage account resource identifier.
        ///     }, # Optional. Gets the resource identifiers of the managed resources.
        ///     privateEndpointConnections: [
        ///       {
        ///         id: string, # Optional. Gets or sets the identifier.
        ///         name: string, # Optional. Gets or sets the name.
        ///         properties: {
        ///           privateEndpoint: {
        ///             id: string, # Optional. The private endpoint identifier.
        ///           }, # Optional. The private endpoint information.
        ///           privateLinkServiceConnectionState: {
        ///             actionsRequired: string, # Optional. The required actions.
        ///             description: string, # Optional. The description.
        ///             status: &quot;Unknown&quot; | &quot;Pending&quot; | &quot;Approved&quot; | &quot;Rejected&quot; | &quot;Disconnected&quot;, # Optional. The status.
        ///           }, # Optional. The private link service connection state.
        ///           provisioningState: string, # Optional. The provisioning state.
        ///         }, # Optional. The connection identifier.
        ///         type: string, # Optional. Gets or sets the type.
        ///       }
        ///     ], # Optional. Gets the private endpoint connections information.
        ///     provisioningState: &quot;Unknown&quot; | &quot;Creating&quot; | &quot;Moving&quot; | &quot;Deleting&quot; | &quot;SoftDeleting&quot; | &quot;SoftDeleted&quot; | &quot;Failed&quot; | &quot;Succeeded&quot; | &quot;Canceled&quot;, # Optional. Gets or sets the state of the provisioning.
        ///     publicNetworkAccess: &quot;NotSpecified&quot; | &quot;Enabled&quot; | &quot;Disabled&quot;, # Optional. Gets or sets the public network access.
        ///   }, # Optional. Gets or sets the properties.
        ///   sku: {
        ///     capacity: number, # Optional. Gets or sets the sku capacity. Possible values include: 4, 16
        ///     name: &quot;Standard&quot;, # Optional. Gets or sets the sku name.
        ///   }, # Optional. Gets or sets the Sku.
        ///   systemData: {
        ///     createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
        ///     createdBy: string, # Optional. The identity that created the resource.
        ///     createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
        ///     lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of the last modification the resource (UTC).
        ///     lastModifiedBy: string, # Optional. The identity that last modified the resource.
        ///     lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
        ///   }, # Optional. Metadata pertaining to creation and last modification of the resource.
        ///   tags: Dictionary&lt;string, string&gt;, # Optional. Tags on the azure resource.
        ///   type: string, # Optional. Gets or sets the type.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response UpdateAccountProperties(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewAccountsClient.UpdateAccountProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateAccountPropertiesRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List the authorization keys associated with this account. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AccessKeys</c>:
        /// <code>{
        ///   atlasKafkaPrimaryEndpoint: string, # Optional. Gets or sets the primary connection string.
        ///   atlasKafkaSecondaryEndpoint: string, # Optional. Gets or sets the secondary connection string.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetAccessKeysAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewAccountsClient.GetAccessKeys");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAccessKeysRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List the authorization keys associated with this account. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AccessKeys</c>:
        /// <code>{
        ///   atlasKafkaPrimaryEndpoint: string, # Optional. Gets or sets the primary connection string.
        ///   atlasKafkaSecondaryEndpoint: string, # Optional. Gets or sets the secondary connection string.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetAccessKeys(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewAccountsClient.GetAccessKeys");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAccessKeysRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Regenerate the authorization keys associated with this data catalog. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AccessKeyOptions</c>:
        /// <code>{
        ///   keyType: &quot;PrimaryAtlasKafkaKey&quot; | &quot;SecondaryAtlasKafkaKey&quot;, # Optional. The access key type.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AccessKeys</c>:
        /// <code>{
        ///   atlasKafkaPrimaryEndpoint: string, # Optional. Gets or sets the primary connection string.
        ///   atlasKafkaSecondaryEndpoint: string, # Optional. Gets or sets the secondary connection string.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> RegenerateAccessKeyAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewAccountsClient.RegenerateAccessKey");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRegenerateAccessKeyRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Regenerate the authorization keys associated with this data catalog. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>AccessKeyOptions</c>:
        /// <code>{
        ///   keyType: &quot;PrimaryAtlasKafkaKey&quot; | &quot;SecondaryAtlasKafkaKey&quot;, # Optional. The access key type.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AccessKeys</c>:
        /// <code>{
        ///   atlasKafkaPrimaryEndpoint: string, # Optional. Gets or sets the primary connection string.
        ///   atlasKafkaSecondaryEndpoint: string, # Optional. Gets or sets the secondary connection string.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response RegenerateAccessKey(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewAccountsClient.RegenerateAccessKey");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRegenerateAccessKeyRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetAccountPropertiesRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/", false);
            uri.AppendQuery("api-version", "2019-11-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateAccountPropertiesRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/", false);
            uri.AppendQuery("api-version", "2019-11-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetAccessKeysRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/listkeys", false);
            uri.AppendQuery("api-version", "2019-11-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateRegenerateAccessKeyRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/regeneratekeys", false);
            uri.AppendQuery("api-version", "2019-11-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
