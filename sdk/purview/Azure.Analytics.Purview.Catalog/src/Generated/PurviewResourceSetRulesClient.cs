// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Catalog
{
    /// <summary> The PurviewResourceSetRules service client. </summary>
    public partial class PurviewResourceSetRulesClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of PurviewResourceSetRulesClient for mocking. </summary>
        protected PurviewResourceSetRulesClient()
        {
        }

        /// <summary> Initializes a new instance of PurviewResourceSetRulesClient. </summary>
        /// <param name="endpoint"> The account endpoint of your Purview account. Example: https://{accountName}.purview.azure.com/account/. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public PurviewResourceSetRulesClient(string endpoint, TokenCredential credential) : this(endpoint, credential, new PurviewCatalogClientOptions())
        {
        }

        /// <summary> Initializes a new instance of PurviewResourceSetRulesClient. </summary>
        /// <param name="endpoint"> The account endpoint of your Purview account. Example: https://{accountName}.purview.azure.com/account/. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public PurviewResourceSetRulesClient(string endpoint, TokenCredential credential, PurviewCatalogClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new PurviewCatalogClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary> Get a resource set config service model. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ResourceSetRuleConfig</c>:
        /// <code>{
        ///   advancedResourceSet: {
        ///     modifiedAt: string (ISO 8601 Format), # Optional. Date at which ResourceSetProcessing property of the account is updated.
        ///     resourceSetProcessing: &quot;Default&quot; | &quot;Advanced&quot;, # Optional. The advanced resource property of the account.
        ///   }, # Optional. Gets or sets the advanced resource set property of the account.
        ///   name: string, # Optional. The name of the rule
        ///   pathPatternConfig: {
        ///     acceptedPatterns: [
        ///       {
        ///         createdBy: string, # Optional.
        ///         filterType: &quot;Pattern&quot; | &quot;Regex&quot;, # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         modifiedBy: string, # Optional.
        ///         name: string, # Required.
        ///         path: string, # Required.
        ///       }
        ///     ], # Optional.
        ///     complexReplacers: [
        ///       {
        ///         createdBy: string, # Optional.
        ///         description: string, # Optional.
        ///         disabled: boolean, # Optional.
        ///         disableRecursiveReplacerApplication: boolean, # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         modifiedBy: string, # Optional.
        ///         name: string, # Optional.
        ///         typeName: string, # Optional.
        ///       }
        ///     ], # Optional.
        ///     createdBy: string, # Required.
        ///     enableDefaultPatterns: boolean, # Required.
        ///     lastUpdatedTimestamp: number, # Optional.
        ///     modifiedBy: string, # Optional.
        ///     normalizationRules: [
        ///       {
        ///         description: string, # Optional.
        ///         disabled: boolean, # Optional.
        ///         dynamicReplacement: boolean, # Optional.
        ///         entityTypes: [string], # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         name: string, # Optional.
        ///         regex: {
        ///           maxDigits: number, # Optional.
        ///           maxLetters: number, # Optional.
        ///           minDashes: number, # Optional.
        ///           minDigits: number, # Optional.
        ///           minDigitsOrLetters: number, # Optional.
        ///           minDots: number, # Optional.
        ///           minHex: number, # Optional.
        ///           minLetters: number, # Optional.
        ///           minUnderscores: number, # Optional.
        ///           options: number, # Optional.
        ///           regexStr: string, # Optional.
        ///         }, # Optional.
        ///         replaceWith: string, # Optional.
        ///         version: number, # Optional.
        ///       }
        ///     ], # Optional.
        ///     regexReplacers: [
        ///       {
        ///         condition: string, # Optional.
        ///         createdBy: string, # Optional.
        ///         description: string, # Optional.
        ///         disabled: boolean, # Required.
        ///         disableRecursiveReplacerApplication: boolean, # Optional.
        ///         doNotReplaceRegex: FastRegex, # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         modifiedBy: string, # Optional.
        ///         name: string, # Required.
        ///         regex: FastRegex, # Optional.
        ///         replaceWith: string, # Optional.
        ///       }
        ///     ], # Optional.
        ///     rejectedPatterns: [Filter], # Optional.
        ///     scopedRules: [
        ///       {
        ///         bindingUrl: string, # Required.
        ///         rules: [
        ///           {
        ///             displayName: string, # Optional.
        ///             isResourceSet: boolean, # Optional.
        ///             lastUpdatedTimestamp: number, # Optional.
        ///             name: string, # Optional.
        ///             qualifiedName: string, # Required.
        ///           }
        ///         ], # Optional.
        ///         storeType: string, # Required.
        ///       }
        ///     ], # Optional.
        ///     version: number, # Optional.
        ///   }, # Optional. The configuration rules for path pattern extraction.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetResourceSetRuleAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewResourceSetRulesClient.GetResourceSetRule");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetResourceSetRuleRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a resource set config service model. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ResourceSetRuleConfig</c>:
        /// <code>{
        ///   advancedResourceSet: {
        ///     modifiedAt: string (ISO 8601 Format), # Optional. Date at which ResourceSetProcessing property of the account is updated.
        ///     resourceSetProcessing: &quot;Default&quot; | &quot;Advanced&quot;, # Optional. The advanced resource property of the account.
        ///   }, # Optional. Gets or sets the advanced resource set property of the account.
        ///   name: string, # Optional. The name of the rule
        ///   pathPatternConfig: {
        ///     acceptedPatterns: [
        ///       {
        ///         createdBy: string, # Optional.
        ///         filterType: &quot;Pattern&quot; | &quot;Regex&quot;, # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         modifiedBy: string, # Optional.
        ///         name: string, # Required.
        ///         path: string, # Required.
        ///       }
        ///     ], # Optional.
        ///     complexReplacers: [
        ///       {
        ///         createdBy: string, # Optional.
        ///         description: string, # Optional.
        ///         disabled: boolean, # Optional.
        ///         disableRecursiveReplacerApplication: boolean, # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         modifiedBy: string, # Optional.
        ///         name: string, # Optional.
        ///         typeName: string, # Optional.
        ///       }
        ///     ], # Optional.
        ///     createdBy: string, # Required.
        ///     enableDefaultPatterns: boolean, # Required.
        ///     lastUpdatedTimestamp: number, # Optional.
        ///     modifiedBy: string, # Optional.
        ///     normalizationRules: [
        ///       {
        ///         description: string, # Optional.
        ///         disabled: boolean, # Optional.
        ///         dynamicReplacement: boolean, # Optional.
        ///         entityTypes: [string], # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         name: string, # Optional.
        ///         regex: {
        ///           maxDigits: number, # Optional.
        ///           maxLetters: number, # Optional.
        ///           minDashes: number, # Optional.
        ///           minDigits: number, # Optional.
        ///           minDigitsOrLetters: number, # Optional.
        ///           minDots: number, # Optional.
        ///           minHex: number, # Optional.
        ///           minLetters: number, # Optional.
        ///           minUnderscores: number, # Optional.
        ///           options: number, # Optional.
        ///           regexStr: string, # Optional.
        ///         }, # Optional.
        ///         replaceWith: string, # Optional.
        ///         version: number, # Optional.
        ///       }
        ///     ], # Optional.
        ///     regexReplacers: [
        ///       {
        ///         condition: string, # Optional.
        ///         createdBy: string, # Optional.
        ///         description: string, # Optional.
        ///         disabled: boolean, # Required.
        ///         disableRecursiveReplacerApplication: boolean, # Optional.
        ///         doNotReplaceRegex: FastRegex, # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         modifiedBy: string, # Optional.
        ///         name: string, # Required.
        ///         regex: FastRegex, # Optional.
        ///         replaceWith: string, # Optional.
        ///       }
        ///     ], # Optional.
        ///     rejectedPatterns: [Filter], # Optional.
        ///     scopedRules: [
        ///       {
        ///         bindingUrl: string, # Required.
        ///         rules: [
        ///           {
        ///             displayName: string, # Optional.
        ///             isResourceSet: boolean, # Optional.
        ///             lastUpdatedTimestamp: number, # Optional.
        ///             name: string, # Optional.
        ///             qualifiedName: string, # Required.
        ///           }
        ///         ], # Optional.
        ///         storeType: string, # Required.
        ///       }
        ///     ], # Optional.
        ///     version: number, # Optional.
        ///   }, # Optional. The configuration rules for path pattern extraction.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetResourceSetRule(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewResourceSetRulesClient.GetResourceSetRule");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetResourceSetRuleRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates an resource set config. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ResourceSetRuleConfig</c>:
        /// <code>{
        ///   advancedResourceSet: {
        ///     modifiedAt: string (ISO 8601 Format), # Optional. Date at which ResourceSetProcessing property of the account is updated.
        ///     resourceSetProcessing: &quot;Default&quot; | &quot;Advanced&quot;, # Optional. The advanced resource property of the account.
        ///   }, # Optional. Gets or sets the advanced resource set property of the account.
        ///   name: string, # Optional. The name of the rule
        ///   pathPatternConfig: {
        ///     acceptedPatterns: [
        ///       {
        ///         createdBy: string, # Optional.
        ///         filterType: &quot;Pattern&quot; | &quot;Regex&quot;, # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         modifiedBy: string, # Optional.
        ///         name: string, # Required.
        ///         path: string, # Required.
        ///       }
        ///     ], # Optional.
        ///     complexReplacers: [
        ///       {
        ///         createdBy: string, # Optional.
        ///         description: string, # Optional.
        ///         disabled: boolean, # Optional.
        ///         disableRecursiveReplacerApplication: boolean, # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         modifiedBy: string, # Optional.
        ///         name: string, # Optional.
        ///         typeName: string, # Optional.
        ///       }
        ///     ], # Optional.
        ///     createdBy: string, # Required.
        ///     enableDefaultPatterns: boolean, # Required.
        ///     lastUpdatedTimestamp: number, # Optional.
        ///     modifiedBy: string, # Optional.
        ///     normalizationRules: [
        ///       {
        ///         description: string, # Optional.
        ///         disabled: boolean, # Optional.
        ///         dynamicReplacement: boolean, # Optional.
        ///         entityTypes: [string], # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         name: string, # Optional.
        ///         regex: {
        ///           maxDigits: number, # Optional.
        ///           maxLetters: number, # Optional.
        ///           minDashes: number, # Optional.
        ///           minDigits: number, # Optional.
        ///           minDigitsOrLetters: number, # Optional.
        ///           minDots: number, # Optional.
        ///           minHex: number, # Optional.
        ///           minLetters: number, # Optional.
        ///           minUnderscores: number, # Optional.
        ///           options: number, # Optional.
        ///           regexStr: string, # Optional.
        ///         }, # Optional.
        ///         replaceWith: string, # Optional.
        ///         version: number, # Optional.
        ///       }
        ///     ], # Optional.
        ///     regexReplacers: [
        ///       {
        ///         condition: string, # Optional.
        ///         createdBy: string, # Optional.
        ///         description: string, # Optional.
        ///         disabled: boolean, # Required.
        ///         disableRecursiveReplacerApplication: boolean, # Optional.
        ///         doNotReplaceRegex: FastRegex, # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         modifiedBy: string, # Optional.
        ///         name: string, # Required.
        ///         regex: FastRegex, # Optional.
        ///         replaceWith: string, # Optional.
        ///       }
        ///     ], # Optional.
        ///     rejectedPatterns: [Filter], # Optional.
        ///     scopedRules: [
        ///       {
        ///         bindingUrl: string, # Required.
        ///         rules: [
        ///           {
        ///             displayName: string, # Optional.
        ///             isResourceSet: boolean, # Optional.
        ///             lastUpdatedTimestamp: number, # Optional.
        ///             name: string, # Optional.
        ///             qualifiedName: string, # Required.
        ///           }
        ///         ], # Optional.
        ///         storeType: string, # Required.
        ///       }
        ///     ], # Optional.
        ///     version: number, # Optional.
        ///   }, # Optional. The configuration rules for path pattern extraction.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ResourceSetRuleConfig</c>:
        /// <code>{
        ///   advancedResourceSet: {
        ///     modifiedAt: string (ISO 8601 Format), # Optional. Date at which ResourceSetProcessing property of the account is updated.
        ///     resourceSetProcessing: &quot;Default&quot; | &quot;Advanced&quot;, # Optional. The advanced resource property of the account.
        ///   }, # Optional. Gets or sets the advanced resource set property of the account.
        ///   name: string, # Optional. The name of the rule
        ///   pathPatternConfig: {
        ///     acceptedPatterns: [
        ///       {
        ///         createdBy: string, # Optional.
        ///         filterType: &quot;Pattern&quot; | &quot;Regex&quot;, # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         modifiedBy: string, # Optional.
        ///         name: string, # Required.
        ///         path: string, # Required.
        ///       }
        ///     ], # Optional.
        ///     complexReplacers: [
        ///       {
        ///         createdBy: string, # Optional.
        ///         description: string, # Optional.
        ///         disabled: boolean, # Optional.
        ///         disableRecursiveReplacerApplication: boolean, # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         modifiedBy: string, # Optional.
        ///         name: string, # Optional.
        ///         typeName: string, # Optional.
        ///       }
        ///     ], # Optional.
        ///     createdBy: string, # Required.
        ///     enableDefaultPatterns: boolean, # Required.
        ///     lastUpdatedTimestamp: number, # Optional.
        ///     modifiedBy: string, # Optional.
        ///     normalizationRules: [
        ///       {
        ///         description: string, # Optional.
        ///         disabled: boolean, # Optional.
        ///         dynamicReplacement: boolean, # Optional.
        ///         entityTypes: [string], # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         name: string, # Optional.
        ///         regex: {
        ///           maxDigits: number, # Optional.
        ///           maxLetters: number, # Optional.
        ///           minDashes: number, # Optional.
        ///           minDigits: number, # Optional.
        ///           minDigitsOrLetters: number, # Optional.
        ///           minDots: number, # Optional.
        ///           minHex: number, # Optional.
        ///           minLetters: number, # Optional.
        ///           minUnderscores: number, # Optional.
        ///           options: number, # Optional.
        ///           regexStr: string, # Optional.
        ///         }, # Optional.
        ///         replaceWith: string, # Optional.
        ///         version: number, # Optional.
        ///       }
        ///     ], # Optional.
        ///     regexReplacers: [
        ///       {
        ///         condition: string, # Optional.
        ///         createdBy: string, # Optional.
        ///         description: string, # Optional.
        ///         disabled: boolean, # Required.
        ///         disableRecursiveReplacerApplication: boolean, # Optional.
        ///         doNotReplaceRegex: FastRegex, # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         modifiedBy: string, # Optional.
        ///         name: string, # Required.
        ///         regex: FastRegex, # Optional.
        ///         replaceWith: string, # Optional.
        ///       }
        ///     ], # Optional.
        ///     rejectedPatterns: [Filter], # Optional.
        ///     scopedRules: [
        ///       {
        ///         bindingUrl: string, # Required.
        ///         rules: [
        ///           {
        ///             displayName: string, # Optional.
        ///             isResourceSet: boolean, # Optional.
        ///             lastUpdatedTimestamp: number, # Optional.
        ///             name: string, # Optional.
        ///             qualifiedName: string, # Required.
        ///           }
        ///         ], # Optional.
        ///         storeType: string, # Required.
        ///       }
        ///     ], # Optional.
        ///     version: number, # Optional.
        ///   }, # Optional. The configuration rules for path pattern extraction.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateOrUpdateResourceSetRuleAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewResourceSetRulesClient.CreateOrUpdateResourceSetRule");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateResourceSetRuleRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates an resource set config. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ResourceSetRuleConfig</c>:
        /// <code>{
        ///   advancedResourceSet: {
        ///     modifiedAt: string (ISO 8601 Format), # Optional. Date at which ResourceSetProcessing property of the account is updated.
        ///     resourceSetProcessing: &quot;Default&quot; | &quot;Advanced&quot;, # Optional. The advanced resource property of the account.
        ///   }, # Optional. Gets or sets the advanced resource set property of the account.
        ///   name: string, # Optional. The name of the rule
        ///   pathPatternConfig: {
        ///     acceptedPatterns: [
        ///       {
        ///         createdBy: string, # Optional.
        ///         filterType: &quot;Pattern&quot; | &quot;Regex&quot;, # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         modifiedBy: string, # Optional.
        ///         name: string, # Required.
        ///         path: string, # Required.
        ///       }
        ///     ], # Optional.
        ///     complexReplacers: [
        ///       {
        ///         createdBy: string, # Optional.
        ///         description: string, # Optional.
        ///         disabled: boolean, # Optional.
        ///         disableRecursiveReplacerApplication: boolean, # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         modifiedBy: string, # Optional.
        ///         name: string, # Optional.
        ///         typeName: string, # Optional.
        ///       }
        ///     ], # Optional.
        ///     createdBy: string, # Required.
        ///     enableDefaultPatterns: boolean, # Required.
        ///     lastUpdatedTimestamp: number, # Optional.
        ///     modifiedBy: string, # Optional.
        ///     normalizationRules: [
        ///       {
        ///         description: string, # Optional.
        ///         disabled: boolean, # Optional.
        ///         dynamicReplacement: boolean, # Optional.
        ///         entityTypes: [string], # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         name: string, # Optional.
        ///         regex: {
        ///           maxDigits: number, # Optional.
        ///           maxLetters: number, # Optional.
        ///           minDashes: number, # Optional.
        ///           minDigits: number, # Optional.
        ///           minDigitsOrLetters: number, # Optional.
        ///           minDots: number, # Optional.
        ///           minHex: number, # Optional.
        ///           minLetters: number, # Optional.
        ///           minUnderscores: number, # Optional.
        ///           options: number, # Optional.
        ///           regexStr: string, # Optional.
        ///         }, # Optional.
        ///         replaceWith: string, # Optional.
        ///         version: number, # Optional.
        ///       }
        ///     ], # Optional.
        ///     regexReplacers: [
        ///       {
        ///         condition: string, # Optional.
        ///         createdBy: string, # Optional.
        ///         description: string, # Optional.
        ///         disabled: boolean, # Required.
        ///         disableRecursiveReplacerApplication: boolean, # Optional.
        ///         doNotReplaceRegex: FastRegex, # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         modifiedBy: string, # Optional.
        ///         name: string, # Required.
        ///         regex: FastRegex, # Optional.
        ///         replaceWith: string, # Optional.
        ///       }
        ///     ], # Optional.
        ///     rejectedPatterns: [Filter], # Optional.
        ///     scopedRules: [
        ///       {
        ///         bindingUrl: string, # Required.
        ///         rules: [
        ///           {
        ///             displayName: string, # Optional.
        ///             isResourceSet: boolean, # Optional.
        ///             lastUpdatedTimestamp: number, # Optional.
        ///             name: string, # Optional.
        ///             qualifiedName: string, # Required.
        ///           }
        ///         ], # Optional.
        ///         storeType: string, # Required.
        ///       }
        ///     ], # Optional.
        ///     version: number, # Optional.
        ///   }, # Optional. The configuration rules for path pattern extraction.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ResourceSetRuleConfig</c>:
        /// <code>{
        ///   advancedResourceSet: {
        ///     modifiedAt: string (ISO 8601 Format), # Optional. Date at which ResourceSetProcessing property of the account is updated.
        ///     resourceSetProcessing: &quot;Default&quot; | &quot;Advanced&quot;, # Optional. The advanced resource property of the account.
        ///   }, # Optional. Gets or sets the advanced resource set property of the account.
        ///   name: string, # Optional. The name of the rule
        ///   pathPatternConfig: {
        ///     acceptedPatterns: [
        ///       {
        ///         createdBy: string, # Optional.
        ///         filterType: &quot;Pattern&quot; | &quot;Regex&quot;, # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         modifiedBy: string, # Optional.
        ///         name: string, # Required.
        ///         path: string, # Required.
        ///       }
        ///     ], # Optional.
        ///     complexReplacers: [
        ///       {
        ///         createdBy: string, # Optional.
        ///         description: string, # Optional.
        ///         disabled: boolean, # Optional.
        ///         disableRecursiveReplacerApplication: boolean, # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         modifiedBy: string, # Optional.
        ///         name: string, # Optional.
        ///         typeName: string, # Optional.
        ///       }
        ///     ], # Optional.
        ///     createdBy: string, # Required.
        ///     enableDefaultPatterns: boolean, # Required.
        ///     lastUpdatedTimestamp: number, # Optional.
        ///     modifiedBy: string, # Optional.
        ///     normalizationRules: [
        ///       {
        ///         description: string, # Optional.
        ///         disabled: boolean, # Optional.
        ///         dynamicReplacement: boolean, # Optional.
        ///         entityTypes: [string], # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         name: string, # Optional.
        ///         regex: {
        ///           maxDigits: number, # Optional.
        ///           maxLetters: number, # Optional.
        ///           minDashes: number, # Optional.
        ///           minDigits: number, # Optional.
        ///           minDigitsOrLetters: number, # Optional.
        ///           minDots: number, # Optional.
        ///           minHex: number, # Optional.
        ///           minLetters: number, # Optional.
        ///           minUnderscores: number, # Optional.
        ///           options: number, # Optional.
        ///           regexStr: string, # Optional.
        ///         }, # Optional.
        ///         replaceWith: string, # Optional.
        ///         version: number, # Optional.
        ///       }
        ///     ], # Optional.
        ///     regexReplacers: [
        ///       {
        ///         condition: string, # Optional.
        ///         createdBy: string, # Optional.
        ///         description: string, # Optional.
        ///         disabled: boolean, # Required.
        ///         disableRecursiveReplacerApplication: boolean, # Optional.
        ///         doNotReplaceRegex: FastRegex, # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         modifiedBy: string, # Optional.
        ///         name: string, # Required.
        ///         regex: FastRegex, # Optional.
        ///         replaceWith: string, # Optional.
        ///       }
        ///     ], # Optional.
        ///     rejectedPatterns: [Filter], # Optional.
        ///     scopedRules: [
        ///       {
        ///         bindingUrl: string, # Required.
        ///         rules: [
        ///           {
        ///             displayName: string, # Optional.
        ///             isResourceSet: boolean, # Optional.
        ///             lastUpdatedTimestamp: number, # Optional.
        ///             name: string, # Optional.
        ///             qualifiedName: string, # Required.
        ///           }
        ///         ], # Optional.
        ///         storeType: string, # Required.
        ///       }
        ///     ], # Optional.
        ///     version: number, # Optional.
        ///   }, # Optional. The configuration rules for path pattern extraction.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateOrUpdateResourceSetRule(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PurviewResourceSetRulesClient.CreateOrUpdateResourceSetRule");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateResourceSetRuleRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a ResourceSetRuleConfig resource. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        public virtual async Task<Response> DeleteResourceSetRuleAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewResourceSetRulesClient.DeleteResourceSetRule");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteResourceSetRuleRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a ResourceSetRuleConfig resource. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        public virtual Response DeleteResourceSetRule(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PurviewResourceSetRulesClient.DeleteResourceSetRule");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteResourceSetRuleRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a resource set config service model. </summary>
        /// <param name="skipToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ResourceSetRuleConfigListValue</c>:
        /// <code>{
        ///   advancedResourceSet: {
        ///     modifiedAt: string (ISO 8601 Format), # Optional. Date at which ResourceSetProcessing property of the account is updated.
        ///     resourceSetProcessing: &quot;Default&quot; | &quot;Advanced&quot;, # Optional. The advanced resource property of the account.
        ///   }, # Optional. Gets or sets the advanced resource set property of the account.
        ///   name: string, # Optional. The name of the rule
        ///   pathPatternConfig: {
        ///     acceptedPatterns: [
        ///       {
        ///         createdBy: string, # Optional.
        ///         filterType: &quot;Pattern&quot; | &quot;Regex&quot;, # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         modifiedBy: string, # Optional.
        ///         name: string, # Required.
        ///         path: string, # Required.
        ///       }
        ///     ], # Optional.
        ///     complexReplacers: [
        ///       {
        ///         createdBy: string, # Optional.
        ///         description: string, # Optional.
        ///         disabled: boolean, # Optional.
        ///         disableRecursiveReplacerApplication: boolean, # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         modifiedBy: string, # Optional.
        ///         name: string, # Optional.
        ///         typeName: string, # Optional.
        ///       }
        ///     ], # Optional.
        ///     createdBy: string, # Required.
        ///     enableDefaultPatterns: boolean, # Required.
        ///     lastUpdatedTimestamp: number, # Optional.
        ///     modifiedBy: string, # Optional.
        ///     normalizationRules: [
        ///       {
        ///         description: string, # Optional.
        ///         disabled: boolean, # Optional.
        ///         dynamicReplacement: boolean, # Optional.
        ///         entityTypes: [string], # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         name: string, # Optional.
        ///         regex: {
        ///           maxDigits: number, # Optional.
        ///           maxLetters: number, # Optional.
        ///           minDashes: number, # Optional.
        ///           minDigits: number, # Optional.
        ///           minDigitsOrLetters: number, # Optional.
        ///           minDots: number, # Optional.
        ///           minHex: number, # Optional.
        ///           minLetters: number, # Optional.
        ///           minUnderscores: number, # Optional.
        ///           options: number, # Optional.
        ///           regexStr: string, # Optional.
        ///         }, # Optional.
        ///         replaceWith: string, # Optional.
        ///         version: number, # Optional.
        ///       }
        ///     ], # Optional.
        ///     regexReplacers: [
        ///       {
        ///         condition: string, # Optional.
        ///         createdBy: string, # Optional.
        ///         description: string, # Optional.
        ///         disabled: boolean, # Required.
        ///         disableRecursiveReplacerApplication: boolean, # Optional.
        ///         doNotReplaceRegex: FastRegex, # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         modifiedBy: string, # Optional.
        ///         name: string, # Required.
        ///         regex: FastRegex, # Optional.
        ///         replaceWith: string, # Optional.
        ///       }
        ///     ], # Optional.
        ///     rejectedPatterns: [Filter], # Optional.
        ///     scopedRules: [
        ///       {
        ///         bindingUrl: string, # Required.
        ///         rules: [
        ///           {
        ///             displayName: string, # Optional.
        ///             isResourceSet: boolean, # Optional.
        ///             lastUpdatedTimestamp: number, # Optional.
        ///             name: string, # Optional.
        ///             qualifiedName: string, # Required.
        ///           }
        ///         ], # Optional.
        ///         storeType: string, # Required.
        ///       }
        ///     ], # Optional.
        ///     version: number, # Optional.
        ///   }, # Optional. The configuration rules for path pattern extraction.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetResourceSetRulesAsync(string skipToken = null, RequestContext context = null)
        {
            return GetResourceSetRulesImplementationAsync("PurviewResourceSetRulesClient.GetResourceSetRules", skipToken, context);
        }

        private AsyncPageable<BinaryData> GetResourceSetRulesImplementationAsync(string diagnosticsScopeName, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetResourceSetRulesRequest(skipToken, context)
                        : CreateGetResourceSetRulesNextPageRequest(nextLink, skipToken, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Get a resource set config service model. </summary>
        /// <param name="skipToken"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ResourceSetRuleConfigListValue</c>:
        /// <code>{
        ///   advancedResourceSet: {
        ///     modifiedAt: string (ISO 8601 Format), # Optional. Date at which ResourceSetProcessing property of the account is updated.
        ///     resourceSetProcessing: &quot;Default&quot; | &quot;Advanced&quot;, # Optional. The advanced resource property of the account.
        ///   }, # Optional. Gets or sets the advanced resource set property of the account.
        ///   name: string, # Optional. The name of the rule
        ///   pathPatternConfig: {
        ///     acceptedPatterns: [
        ///       {
        ///         createdBy: string, # Optional.
        ///         filterType: &quot;Pattern&quot; | &quot;Regex&quot;, # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         modifiedBy: string, # Optional.
        ///         name: string, # Required.
        ///         path: string, # Required.
        ///       }
        ///     ], # Optional.
        ///     complexReplacers: [
        ///       {
        ///         createdBy: string, # Optional.
        ///         description: string, # Optional.
        ///         disabled: boolean, # Optional.
        ///         disableRecursiveReplacerApplication: boolean, # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         modifiedBy: string, # Optional.
        ///         name: string, # Optional.
        ///         typeName: string, # Optional.
        ///       }
        ///     ], # Optional.
        ///     createdBy: string, # Required.
        ///     enableDefaultPatterns: boolean, # Required.
        ///     lastUpdatedTimestamp: number, # Optional.
        ///     modifiedBy: string, # Optional.
        ///     normalizationRules: [
        ///       {
        ///         description: string, # Optional.
        ///         disabled: boolean, # Optional.
        ///         dynamicReplacement: boolean, # Optional.
        ///         entityTypes: [string], # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         name: string, # Optional.
        ///         regex: {
        ///           maxDigits: number, # Optional.
        ///           maxLetters: number, # Optional.
        ///           minDashes: number, # Optional.
        ///           minDigits: number, # Optional.
        ///           minDigitsOrLetters: number, # Optional.
        ///           minDots: number, # Optional.
        ///           minHex: number, # Optional.
        ///           minLetters: number, # Optional.
        ///           minUnderscores: number, # Optional.
        ///           options: number, # Optional.
        ///           regexStr: string, # Optional.
        ///         }, # Optional.
        ///         replaceWith: string, # Optional.
        ///         version: number, # Optional.
        ///       }
        ///     ], # Optional.
        ///     regexReplacers: [
        ///       {
        ///         condition: string, # Optional.
        ///         createdBy: string, # Optional.
        ///         description: string, # Optional.
        ///         disabled: boolean, # Required.
        ///         disableRecursiveReplacerApplication: boolean, # Optional.
        ///         doNotReplaceRegex: FastRegex, # Optional.
        ///         lastUpdatedTimestamp: number, # Optional.
        ///         modifiedBy: string, # Optional.
        ///         name: string, # Required.
        ///         regex: FastRegex, # Optional.
        ///         replaceWith: string, # Optional.
        ///       }
        ///     ], # Optional.
        ///     rejectedPatterns: [Filter], # Optional.
        ///     scopedRules: [
        ///       {
        ///         bindingUrl: string, # Required.
        ///         rules: [
        ///           {
        ///             displayName: string, # Optional.
        ///             isResourceSet: boolean, # Optional.
        ///             lastUpdatedTimestamp: number, # Optional.
        ///             name: string, # Optional.
        ///             qualifiedName: string, # Required.
        ///           }
        ///         ], # Optional.
        ///         storeType: string, # Required.
        ///       }
        ///     ], # Optional.
        ///     version: number, # Optional.
        ///   }, # Optional. The configuration rules for path pattern extraction.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetResourceSetRules(string skipToken = null, RequestContext context = null)
        {
            return GetResourceSetRulesImplementation("PurviewResourceSetRulesClient.GetResourceSetRules", skipToken, context);
        }

        private Pageable<BinaryData> GetResourceSetRulesImplementation(string diagnosticsScopeName, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetResourceSetRulesRequest(skipToken, context)
                        : CreateGetResourceSetRulesNextPageRequest(nextLink, skipToken, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        internal HttpMessage CreateGetResourceSetRuleRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/resourceSetRuleConfigs/defaultResourceSetRuleConfig", false);
            uri.AppendQuery("api-version", "2019-11-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateResourceSetRuleRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/resourceSetRuleConfigs/defaultResourceSetRuleConfig", false);
            uri.AppendQuery("api-version", "2019-11-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteResourceSetRuleRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/resourceSetRuleConfigs/defaultResourceSetRuleConfig", false);
            uri.AppendQuery("api-version", "2019-11-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetResourceSetRulesRequest(string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/resourceSetRuleConfigs", false);
            uri.AppendQuery("api-version", "2019-11-01-preview", true);
            if (skipToken != null)
            {
                uri.AppendQuery("$skipToken", skipToken, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetResourceSetRulesNextPageRequest(string nextLink, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200204;
        private static ResponseClassifier ResponseClassifier200204 => _responseClassifier200204 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 204 });
    }
}
