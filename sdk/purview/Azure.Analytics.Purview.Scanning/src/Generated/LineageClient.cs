// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Purview.Scanning
{
    // Data plane generated client. The Lineage service client.
    /// <summary> The Lineage service client. </summary>
    public partial class LineageClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://purview.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of LineageClient for mocking. </summary>
        protected LineageClient()
        {
        }

        /// <summary> Initializes a new instance of LineageClient. </summary>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public LineageClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new PurviewScanningServiceClientOptions())
        {
        }

        /// <summary> Initializes a new instance of LineageClient. </summary>
        /// <param name="endpoint"> The catalog endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public LineageClient(Uri endpoint, TokenCredential credential, PurviewScanningServiceClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new PurviewScanningServiceClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary> Get lineage info of the entity specified by GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="direction"> The direction of the lineage, which could be INPUT, OUTPUT or BOTH. Allowed values: &quot;BOTH&quot; | &quot;INPUT&quot; | &quot;OUTPUT&quot;. </param>
        /// <param name="depth"> The number of hops for lineage. </param>
        /// <param name="width"> The number of max expanding width in lineage. </param>
        /// <param name="includeParent"> True to include the parent chain in the response. </param>
        /// <param name="getDerivedLineage"> True to include derived lineage in the response. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> or <paramref name="direction"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/LineageClient.xml" path="doc/members/member[@name='GetLineageGraphAsync(String,String,Int32,Int32,Boolean,Boolean,RequestContext)']/*" />
        public virtual async Task<Response> GetLineageGraphAsync(string guid, string direction, int? depth = null, int? width = null, bool? includeParent = null, bool? getDerivedLineage = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));
            Argument.AssertNotNull(direction, nameof(direction));

            using var scope = ClientDiagnostics.CreateScope("LineageClient.GetLineageGraph");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetLineageGraphRequest(guid, direction, depth, width, includeParent, getDerivedLineage, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get lineage info of the entity specified by GUID. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="direction"> The direction of the lineage, which could be INPUT, OUTPUT or BOTH. Allowed values: &quot;BOTH&quot; | &quot;INPUT&quot; | &quot;OUTPUT&quot;. </param>
        /// <param name="depth"> The number of hops for lineage. </param>
        /// <param name="width"> The number of max expanding width in lineage. </param>
        /// <param name="includeParent"> True to include the parent chain in the response. </param>
        /// <param name="getDerivedLineage"> True to include derived lineage in the response. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> or <paramref name="direction"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/LineageClient.xml" path="doc/members/member[@name='GetLineageGraph(String,String,Int32,Int32,Boolean,Boolean,RequestContext)']/*" />
        public virtual Response GetLineageGraph(string guid, string direction, int? depth = null, int? width = null, bool? includeParent = null, bool? getDerivedLineage = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));
            Argument.AssertNotNull(direction, nameof(direction));

            using var scope = ClientDiagnostics.CreateScope("LineageClient.GetLineageGraph");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetLineageGraphRequest(guid, direction, depth, width, includeParent, getDerivedLineage, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return immediate next page lineage info about entity with pagination. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="direction"> The direction of the lineage, which could be INPUT, OUTPUT or BOTH. Allowed values: &quot;BOTH&quot; | &quot;INPUT&quot; | &quot;OUTPUT&quot;. </param>
        /// <param name="getDerivedLineage"> True to include derived lineage in the response. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> or <paramref name="direction"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/LineageClient.xml" path="doc/members/member[@name='NextPageLineageAsync(String,String,Boolean,Int32,Int32,RequestContext)']/*" />
        public virtual async Task<Response> NextPageLineageAsync(string guid, string direction, bool? getDerivedLineage = null, int? offset = null, int? limit = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));
            Argument.AssertNotNull(direction, nameof(direction));

            using var scope = ClientDiagnostics.CreateScope("LineageClient.NextPageLineage");
            scope.Start();
            try
            {
                using HttpMessage message = CreateNextPageLineageRequest(guid, direction, getDerivedLineage, offset, limit, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return immediate next page lineage info about entity with pagination. </summary>
        /// <param name="guid"> The globally unique identifier of the entity. </param>
        /// <param name="direction"> The direction of the lineage, which could be INPUT, OUTPUT or BOTH. Allowed values: &quot;BOTH&quot; | &quot;INPUT&quot; | &quot;OUTPUT&quot;. </param>
        /// <param name="getDerivedLineage"> True to include derived lineage in the response. </param>
        /// <param name="offset"> The offset for pagination purpose. </param>
        /// <param name="limit"> The page size - by default there is no paging. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="guid"/> or <paramref name="direction"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="guid"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/LineageClient.xml" path="doc/members/member[@name='NextPageLineage(String,String,Boolean,Int32,Int32,RequestContext)']/*" />
        public virtual Response NextPageLineage(string guid, string direction, bool? getDerivedLineage = null, int? offset = null, int? limit = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(guid, nameof(guid));
            Argument.AssertNotNull(direction, nameof(direction));

            using var scope = ClientDiagnostics.CreateScope("LineageClient.NextPageLineage");
            scope.Start();
            try
            {
                using HttpMessage message = CreateNextPageLineageRequest(guid, direction, getDerivedLineage, offset, limit, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns lineage info about entity.
        /// 
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format
        /// 
        /// attr:[attrName]=[attrValue]
        /// 
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// GET /v2/lineage/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="direction"> The direction of the lineage, which could be INPUT, OUTPUT or BOTH. Allowed values: &quot;BOTH&quot; | &quot;INPUT&quot; | &quot;OUTPUT&quot;. </param>
        /// <param name="depth"> The number of hops for lineage. </param>
        /// <param name="width"> The number of max expanding width in lineage. </param>
        /// <param name="includeParent"> True to include the parent chain in the response. </param>
        /// <param name="getDerivedLineage"> True to include derived lineage in the response. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity.(This is only an example. qualifiedName can be changed to other unique attributes). </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> or <paramref name="direction"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="typeName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/LineageClient.xml" path="doc/members/member[@name='GetLineageByUniqueAttributeAsync(String,String,Int32,Int32,Boolean,Boolean,String,RequestContext)']/*" />
        public virtual async Task<Response> GetLineageByUniqueAttributeAsync(string typeName, string direction, int? depth = null, int? width = null, bool? includeParent = null, bool? getDerivedLineage = null, string attrQualifiedName = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(typeName, nameof(typeName));
            Argument.AssertNotNull(direction, nameof(direction));

            using var scope = ClientDiagnostics.CreateScope("LineageClient.GetLineageByUniqueAttribute");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetLineageByUniqueAttributeRequest(typeName, direction, depth, width, includeParent, getDerivedLineage, attrQualifiedName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns lineage info about entity.
        /// 
        /// In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format
        /// 
        /// attr:[attrName]=[attrValue]
        /// 
        /// NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
        /// The REST request would look something like this:
        /// GET /v2/lineage/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
        /// </summary>
        /// <param name="typeName"> The name of the type. </param>
        /// <param name="direction"> The direction of the lineage, which could be INPUT, OUTPUT or BOTH. Allowed values: &quot;BOTH&quot; | &quot;INPUT&quot; | &quot;OUTPUT&quot;. </param>
        /// <param name="depth"> The number of hops for lineage. </param>
        /// <param name="width"> The number of max expanding width in lineage. </param>
        /// <param name="includeParent"> True to include the parent chain in the response. </param>
        /// <param name="getDerivedLineage"> True to include derived lineage in the response. </param>
        /// <param name="attrQualifiedName"> The qualified name of the entity.(This is only an example. qualifiedName can be changed to other unique attributes). </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> or <paramref name="direction"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="typeName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/LineageClient.xml" path="doc/members/member[@name='GetLineageByUniqueAttribute(String,String,Int32,Int32,Boolean,Boolean,String,RequestContext)']/*" />
        public virtual Response GetLineageByUniqueAttribute(string typeName, string direction, int? depth = null, int? width = null, bool? includeParent = null, bool? getDerivedLineage = null, string attrQualifiedName = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(typeName, nameof(typeName));
            Argument.AssertNotNull(direction, nameof(direction));

            using var scope = ClientDiagnostics.CreateScope("LineageClient.GetLineageByUniqueAttribute");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetLineageByUniqueAttributeRequest(typeName, direction, depth, width, includeParent, getDerivedLineage, attrQualifiedName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetLineageGraphRequest(string guid, string direction, int? depth, int? width, bool? includeParent, bool? getDerivedLineage, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/lineage/", false);
            uri.AppendPath(guid, true);
            uri.AppendQuery("direction", direction, true);
            if (depth != null)
            {
                uri.AppendQuery("depth", depth.Value, true);
            }
            if (width != null)
            {
                uri.AppendQuery("width", width.Value, true);
            }
            if (includeParent != null)
            {
                uri.AppendQuery("includeParent", includeParent.Value, true);
            }
            if (getDerivedLineage != null)
            {
                uri.AppendQuery("getDerivedLineage", getDerivedLineage.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateNextPageLineageRequest(string guid, string direction, bool? getDerivedLineage, int? offset, int? limit, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/lineage/", false);
            uri.AppendPath(guid, true);
            uri.AppendPath("/next/", false);
            uri.AppendQuery("direction", direction, true);
            if (getDerivedLineage != null)
            {
                uri.AppendQuery("getDerivedLineage", getDerivedLineage.Value, true);
            }
            if (offset != null)
            {
                uri.AppendQuery("offset", offset.Value, true);
            }
            if (limit != null)
            {
                uri.AppendQuery("limit", limit.Value, true);
            }
            uri.AppendQuery("api-version", "2022-08-01-preview", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetLineageByUniqueAttributeRequest(string typeName, string direction, int? depth, int? width, bool? includeParent, bool? getDerivedLineage, string attrQualifiedName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200400404);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/catalog/api", false);
            uri.AppendPath("/atlas/v2/lineage/uniqueAttribute/type/", false);
            uri.AppendPath(typeName, true);
            uri.AppendQuery("direction", direction, true);
            if (depth != null)
            {
                uri.AppendQuery("depth", depth.Value, true);
            }
            if (width != null)
            {
                uri.AppendQuery("width", width.Value, true);
            }
            if (includeParent != null)
            {
                uri.AppendQuery("includeParent", includeParent.Value, true);
            }
            if (getDerivedLineage != null)
            {
                uri.AppendQuery("getDerivedLineage", getDerivedLineage.Value, true);
            }
            if (attrQualifiedName != null)
            {
                uri.AppendQuery("attr:qualifiedName", attrQualifiedName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200400404;
        private static ResponseClassifier ResponseClassifier200400404 => _responseClassifier200400404 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 400, 404 });
    }
}
