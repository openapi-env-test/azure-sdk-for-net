<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="UpdateAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new MetadataPolicyClient(endpoint, credential);

var data = new {};

Response response = await client.UpdateAsync("<policyId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new MetadataPolicyClient(endpoint, credential);

var data = new {
    name = "<name>",
    id = "<id>",
    version = 1234,
    properties = new {
        description = "<description>",
        decisionRules = new[] {
            new {
                effect = "Deny",
                dnfCondition = new[] {
                    new[] {
                        new {
                            attributeName = "<attributeName>",
                            attributeValueIncludes = "<attributeValueIncludes>",
                            attributeValueIncludedIn = new[] {
                                "<String>"
                            },
                            attributeValueExcludes = "<attributeValueExcludes>",
                            attributeValueExcludedIn = new[] {
                                "<String>"
                            },
                        }
                    }
                },
            }
        },
        attributeRules = new[] {
            new {
                id = "<id>",
                name = "<name>",
                dnfCondition = new[] {
                    new[] {
                        new {
                            attributeName = "<attributeName>",
                            attributeValueIncludes = "<attributeValueIncludes>",
                            attributeValueIncludedIn = new[] {
                                "<String>"
                            },
                            attributeValueExcludes = "<attributeValueExcludes>",
                            attributeValueExcludedIn = new[] {
                                "<String>"
                            },
                        }
                    }
                },
            }
        },
        collection = new {
            type = "<type>",
            referenceName = "<referenceName>",
        },
        parentCollectionName = "<parentCollectionName>",
    },
};

Response response = await client.UpdateAsync("<policyId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("effect").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludes").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludedIn")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludes").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludedIn")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludes").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludedIn")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludes").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludedIn")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("collection").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("collection").GetProperty("referenceName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("parentCollectionName").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>MetadataPolicy</c>:
<code>{
  name: string, # Optional. The name of policy
  id: string, # Optional. The id of policy
  version: number, # Optional. The version of policy
  properties: {
    description: string, # Optional. The description of policy
    decisionRules: [
      {
        kind: &quot;decisionrule&quot; | &quot;attributerule&quot;, # Optional. The kind of rule
        effect: &quot;Deny&quot; | &quot;Permit&quot;, # Optional. The effect for rule
        dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
      }
    ], # Optional. The DecisionRules of policy
    attributeRules: [
      {
        kind: &quot;decisionrule&quot; | &quot;attributerule&quot;, # Optional. The kind of rule
        id: string, # Optional. The id for rule
        name: string, # Optional. The name for rule
        dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
      }
    ], # Optional. The AttributeRules of policy
    collection: {
      type: string, # Optional. The type of reference
      referenceName: string, # Optional. The name of reference
    }, # Optional. The collection reference for a policy
    parentCollectionName: string, # Optional. The parent collection of the policy
  }, # Optional.
}
</code>

Response Body:

Schema for <c>MetadataPolicy</c>:
<code>{
  name: string, # Optional. The name of policy
  id: string, # Optional. The id of policy
  version: number, # Optional. The version of policy
  properties: {
    description: string, # Optional. The description of policy
    decisionRules: [
      {
        kind: &quot;decisionrule&quot; | &quot;attributerule&quot;, # Optional. The kind of rule
        effect: &quot;Deny&quot; | &quot;Permit&quot;, # Optional. The effect for rule
        dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
      }
    ], # Optional. The DecisionRules of policy
    attributeRules: [
      {
        kind: &quot;decisionrule&quot; | &quot;attributerule&quot;, # Optional. The kind of rule
        id: string, # Optional. The id for rule
        name: string, # Optional. The name for rule
        dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
      }
    ], # Optional. The AttributeRules of policy
    collection: {
      type: string, # Optional. The type of reference
      referenceName: string, # Optional. The name of reference
    }, # Optional. The collection reference for a policy
    parentCollectionName: string, # Optional. The parent collection of the policy
  }, # Optional.
}
</code>

</remarks>
    </member>
    <member name="Update(String,RequestContent,RequestContext)">
<example>
This sample shows how to call Update with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new MetadataPolicyClient(endpoint, credential);

var data = new {};

Response response = client.Update("<policyId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Update with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new MetadataPolicyClient(endpoint, credential);

var data = new {
    name = "<name>",
    id = "<id>",
    version = 1234,
    properties = new {
        description = "<description>",
        decisionRules = new[] {
            new {
                effect = "Deny",
                dnfCondition = new[] {
                    new[] {
                        new {
                            attributeName = "<attributeName>",
                            attributeValueIncludes = "<attributeValueIncludes>",
                            attributeValueIncludedIn = new[] {
                                "<String>"
                            },
                            attributeValueExcludes = "<attributeValueExcludes>",
                            attributeValueExcludedIn = new[] {
                                "<String>"
                            },
                        }
                    }
                },
            }
        },
        attributeRules = new[] {
            new {
                id = "<id>",
                name = "<name>",
                dnfCondition = new[] {
                    new[] {
                        new {
                            attributeName = "<attributeName>",
                            attributeValueIncludes = "<attributeValueIncludes>",
                            attributeValueIncludedIn = new[] {
                                "<String>"
                            },
                            attributeValueExcludes = "<attributeValueExcludes>",
                            attributeValueExcludedIn = new[] {
                                "<String>"
                            },
                        }
                    }
                },
            }
        },
        collection = new {
            type = "<type>",
            referenceName = "<referenceName>",
        },
        parentCollectionName = "<parentCollectionName>",
    },
};

Response response = client.Update("<policyId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("effect").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludes").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludedIn")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludes").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludedIn")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludes").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludedIn")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludes").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludedIn")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("collection").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("collection").GetProperty("referenceName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("parentCollectionName").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>MetadataPolicy</c>:
<code>{
  name: string, # Optional. The name of policy
  id: string, # Optional. The id of policy
  version: number, # Optional. The version of policy
  properties: {
    description: string, # Optional. The description of policy
    decisionRules: [
      {
        kind: &quot;decisionrule&quot; | &quot;attributerule&quot;, # Optional. The kind of rule
        effect: &quot;Deny&quot; | &quot;Permit&quot;, # Optional. The effect for rule
        dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
      }
    ], # Optional. The DecisionRules of policy
    attributeRules: [
      {
        kind: &quot;decisionrule&quot; | &quot;attributerule&quot;, # Optional. The kind of rule
        id: string, # Optional. The id for rule
        name: string, # Optional. The name for rule
        dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
      }
    ], # Optional. The AttributeRules of policy
    collection: {
      type: string, # Optional. The type of reference
      referenceName: string, # Optional. The name of reference
    }, # Optional. The collection reference for a policy
    parentCollectionName: string, # Optional. The parent collection of the policy
  }, # Optional.
}
</code>

Response Body:

Schema for <c>MetadataPolicy</c>:
<code>{
  name: string, # Optional. The name of policy
  id: string, # Optional. The id of policy
  version: number, # Optional. The version of policy
  properties: {
    description: string, # Optional. The description of policy
    decisionRules: [
      {
        kind: &quot;decisionrule&quot; | &quot;attributerule&quot;, # Optional. The kind of rule
        effect: &quot;Deny&quot; | &quot;Permit&quot;, # Optional. The effect for rule
        dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
      }
    ], # Optional. The DecisionRules of policy
    attributeRules: [
      {
        kind: &quot;decisionrule&quot; | &quot;attributerule&quot;, # Optional. The kind of rule
        id: string, # Optional. The id for rule
        name: string, # Optional. The name for rule
        dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
      }
    ], # Optional. The AttributeRules of policy
    collection: {
      type: string, # Optional. The type of reference
      referenceName: string, # Optional. The name of reference
    }, # Optional. The collection reference for a policy
    parentCollectionName: string, # Optional. The parent collection of the policy
  }, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetMetadataPolicyAsync(String,RequestContext)">
<example>
This sample shows how to call GetMetadataPolicyAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new MetadataPolicyClient(endpoint, credential);

Response response = await client.GetMetadataPolicyAsync("<policyId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("effect").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludes").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludedIn")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludes").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludedIn")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludes").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludedIn")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludes").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludedIn")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("collection").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("collection").GetProperty("referenceName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("parentCollectionName").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>MetadataPolicy</c>:
<code>{
  name: string, # Optional. The name of policy
  id: string, # Optional. The id of policy
  version: number, # Optional. The version of policy
  properties: {
    description: string, # Optional. The description of policy
    decisionRules: [
      {
        kind: &quot;decisionrule&quot; | &quot;attributerule&quot;, # Optional. The kind of rule
        effect: &quot;Deny&quot; | &quot;Permit&quot;, # Optional. The effect for rule
        dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
      }
    ], # Optional. The DecisionRules of policy
    attributeRules: [
      {
        kind: &quot;decisionrule&quot; | &quot;attributerule&quot;, # Optional. The kind of rule
        id: string, # Optional. The id for rule
        name: string, # Optional. The name for rule
        dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
      }
    ], # Optional. The AttributeRules of policy
    collection: {
      type: string, # Optional. The type of reference
      referenceName: string, # Optional. The name of reference
    }, # Optional. The collection reference for a policy
    parentCollectionName: string, # Optional. The parent collection of the policy
  }, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetMetadataPolicy(String,RequestContext)">
<example>
This sample shows how to call GetMetadataPolicy with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new MetadataPolicyClient(endpoint, credential);

Response response = client.GetMetadataPolicy("<policyId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("effect").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludes").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludedIn")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludes").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludedIn")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludes").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludedIn")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludes").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludedIn")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("collection").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("collection").GetProperty("referenceName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("parentCollectionName").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>MetadataPolicy</c>:
<code>{
  name: string, # Optional. The name of policy
  id: string, # Optional. The id of policy
  version: number, # Optional. The version of policy
  properties: {
    description: string, # Optional. The description of policy
    decisionRules: [
      {
        kind: &quot;decisionrule&quot; | &quot;attributerule&quot;, # Optional. The kind of rule
        effect: &quot;Deny&quot; | &quot;Permit&quot;, # Optional. The effect for rule
        dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
      }
    ], # Optional. The DecisionRules of policy
    attributeRules: [
      {
        kind: &quot;decisionrule&quot; | &quot;attributerule&quot;, # Optional. The kind of rule
        id: string, # Optional. The id for rule
        name: string, # Optional. The name for rule
        dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
      }
    ], # Optional. The AttributeRules of policy
    collection: {
      type: string, # Optional. The type of reference
      referenceName: string, # Optional. The name of reference
    }, # Optional. The collection reference for a policy
    parentCollectionName: string, # Optional. The parent collection of the policy
  }, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetMetadataPoliciesAsync(String,RequestContext)">
<example>
This sample shows how to call GetMetadataPoliciesAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new MetadataPolicyClient(endpoint, credential);

await foreach (var data in client.GetMetadataPoliciesAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetMetadataPoliciesAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new MetadataPolicyClient(endpoint, credential);

await foreach (var data in client.GetMetadataPoliciesAsync("<collectionName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("kind").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("effect").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludes").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludedIn")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludes").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludedIn")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("kind").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludes").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludedIn")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludes").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludedIn")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("collection").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("collection").GetProperty("referenceName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("parentCollectionName").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>MetadataPolicyListValues</c>:
<code>{
  name: string, # Optional. The name of policy
  id: string, # Optional. The id of policy
  version: number, # Optional. The version of policy
  properties: {
    description: string, # Optional. The description of policy
    decisionRules: [
      {
        kind: &quot;decisionrule&quot; | &quot;attributerule&quot;, # Optional. The kind of rule
        effect: &quot;Deny&quot; | &quot;Permit&quot;, # Optional. The effect for rule
        dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
      }
    ], # Optional. The DecisionRules of policy
    attributeRules: [
      {
        kind: &quot;decisionrule&quot; | &quot;attributerule&quot;, # Optional. The kind of rule
        id: string, # Optional. The id for rule
        name: string, # Optional. The name for rule
        dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
      }
    ], # Optional. The AttributeRules of policy
    collection: {
      type: string, # Optional. The type of reference
      referenceName: string, # Optional. The name of reference
    }, # Optional. The collection reference for a policy
    parentCollectionName: string, # Optional. The parent collection of the policy
  }, # Optional.
}
</code>

</remarks>
    </member>
    <member name="GetMetadataPolicies(String,RequestContext)">
<example>
This sample shows how to call GetMetadataPolicies and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new MetadataPolicyClient(endpoint, credential);

foreach (var data in client.GetMetadataPolicies())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetMetadataPolicies with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new MetadataPolicyClient(endpoint, credential);

foreach (var data in client.GetMetadataPolicies("<collectionName>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("kind").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("effect").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludes").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludedIn")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludes").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludedIn")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("kind").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludes").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludedIn")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludes").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludedIn")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("collection").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("collection").GetProperty("referenceName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("parentCollectionName").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>MetadataPolicyListValues</c>:
<code>{
  name: string, # Optional. The name of policy
  id: string, # Optional. The id of policy
  version: number, # Optional. The version of policy
  properties: {
    description: string, # Optional. The description of policy
    decisionRules: [
      {
        kind: &quot;decisionrule&quot; | &quot;attributerule&quot;, # Optional. The kind of rule
        effect: &quot;Deny&quot; | &quot;Permit&quot;, # Optional. The effect for rule
        dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
      }
    ], # Optional. The DecisionRules of policy
    attributeRules: [
      {
        kind: &quot;decisionrule&quot; | &quot;attributerule&quot;, # Optional. The kind of rule
        id: string, # Optional. The id for rule
        name: string, # Optional. The name for rule
        dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
      }
    ], # Optional. The AttributeRules of policy
    collection: {
      type: string, # Optional. The type of reference
      referenceName: string, # Optional. The name of reference
    }, # Optional. The collection reference for a policy
    parentCollectionName: string, # Optional. The parent collection of the policy
  }, # Optional.
}
</code>

</remarks>
    </member>
  </members>
</doc>