// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Monitor
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ActivityLogAlertRuleOperations.
    /// </summary>
    public static partial class ActivityLogAlertRuleOperationsExtensions
    {
            /// <summary>
            /// Create a new Activity Log Alert rule or update an existing one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='alertRuleName'>
            /// The name of the Activity Log Alert rule.
            /// </param>
            /// <param name='activityLogAlertRule'>
            /// The Activity Log Alert rule to create or use for the update.
            /// </param>
            public static AlertRuleResource CreateOrUpdate(this IActivityLogAlertRuleOperations operations, string resourceGroupName, string alertRuleName, AlertRuleResource activityLogAlertRule)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, alertRuleName, activityLogAlertRule).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new Activity Log Alert rule or update an existing one.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='alertRuleName'>
            /// The name of the Activity Log Alert rule.
            /// </param>
            /// <param name='activityLogAlertRule'>
            /// The Activity Log Alert rule to create or use for the update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AlertRuleResource> CreateOrUpdateAsync(this IActivityLogAlertRuleOperations operations, string resourceGroupName, string alertRuleName, AlertRuleResource activityLogAlertRule, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, alertRuleName, activityLogAlertRule, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an Activity Log Alert rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='alertRuleName'>
            /// The name of the Activity Log Alert rule.
            /// </param>
            public static AlertRuleResource Get(this IActivityLogAlertRuleOperations operations, string resourceGroupName, string alertRuleName)
            {
                return operations.GetAsync(resourceGroupName, alertRuleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an Activity Log Alert rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='alertRuleName'>
            /// The name of the Activity Log Alert rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AlertRuleResource> GetAsync(this IActivityLogAlertRuleOperations operations, string resourceGroupName, string alertRuleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, alertRuleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an Activity Log Alert rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='alertRuleName'>
            /// The name of the Activity Log Alert rule.
            /// </param>
            public static void Delete(this IActivityLogAlertRuleOperations operations, string resourceGroupName, string alertRuleName)
            {
                operations.DeleteAsync(resourceGroupName, alertRuleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an Activity Log Alert rule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='alertRuleName'>
            /// The name of the Activity Log Alert rule.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IActivityLogAlertRuleOperations operations, string resourceGroupName, string alertRuleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, alertRuleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates 'tags' and 'enabled' fields in an existing Alert rule. This method
            /// is used to update the Alert rule tags, and to enable or disable the Alert
            /// rule. To update other fields use CreateOrUpdate operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='alertRuleName'>
            /// The name of the Activity Log Alert rule.
            /// </param>
            /// <param name='activityLogAlertRulePatch'>
            /// Parameters supplied to the operation.
            /// </param>
            public static AlertRuleResource Update(this IActivityLogAlertRuleOperations operations, string resourceGroupName, string alertRuleName, AlertRulePatchObject activityLogAlertRulePatch)
            {
                return operations.UpdateAsync(resourceGroupName, alertRuleName, activityLogAlertRulePatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates 'tags' and 'enabled' fields in an existing Alert rule. This method
            /// is used to update the Alert rule tags, and to enable or disable the Alert
            /// rule. To update other fields use CreateOrUpdate operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='alertRuleName'>
            /// The name of the Activity Log Alert rule.
            /// </param>
            /// <param name='activityLogAlertRulePatch'>
            /// Parameters supplied to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AlertRuleResource> UpdateAsync(this IActivityLogAlertRuleOperations operations, string resourceGroupName, string alertRuleName, AlertRulePatchObject activityLogAlertRulePatch, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, alertRuleName, activityLogAlertRulePatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of all Activity Log Alert rules in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<AlertRuleResource> ListBySubscriptionId(this IActivityLogAlertRuleOperations operations)
            {
                return operations.ListBySubscriptionIdAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of all Activity Log Alert rules in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AlertRuleResource>> ListBySubscriptionIdAsync(this IActivityLogAlertRuleOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionIdWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of all Activity Log Alert rules in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static IPage<AlertRuleResource> ListByResourceGroup(this IActivityLogAlertRuleOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of all Activity Log Alert rules in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AlertRuleResource>> ListByResourceGroupAsync(this IActivityLogAlertRuleOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of all Activity Log Alert rules in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AlertRuleResource> ListBySubscriptionIdNext(this IActivityLogAlertRuleOperations operations, string nextPageLink)
            {
                return operations.ListBySubscriptionIdNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of all Activity Log Alert rules in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AlertRuleResource>> ListBySubscriptionIdNextAsync(this IActivityLogAlertRuleOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionIdNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of all Activity Log Alert rules in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AlertRuleResource> ListByResourceGroupNext(this IActivityLogAlertRuleOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of all Activity Log Alert rules in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AlertRuleResource>> ListByResourceGroupNextAsync(this IActivityLogAlertRuleOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
